/*
API Manager Policy API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apim_policy

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/apim_policy"
)

func Test_apim_policy_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService DeleteApimPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var apiPolicyId string

		httpRes, err := apiClient.DefaultApi.DeleteApimPolicy(context.Background(), orgId, envId, apiId, apiPolicyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DisableApimPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var apiPolicyId string

		resp, httpRes, err := apiClient.DefaultApi.DisableApimPolicy(context.Background(), orgId, envId, apiId, apiPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService EnableApimPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var apiPolicyId string

		resp, httpRes, err := apiClient.DefaultApi.EnableApimPolicy(context.Background(), orgId, envId, apiId, apiPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetApimPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string

		resp, httpRes, err := apiClient.DefaultApi.GetApimPolicies(context.Background(), orgId, envId, apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetApimPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var apiPolicyId string

		resp, httpRes, err := apiClient.DefaultApi.GetApimPolicy(context.Background(), orgId, envId, apiId, apiPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetOrgAutomatedPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.GetOrgAutomatedPolicies(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetOrgCustomPolicyTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		httpRes, err := apiClient.DefaultApi.GetOrgCustomPolicyTemplates(context.Background(), orgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetOrgExchangePolicyTemplateDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var groupId string
		var assetId string
		var assetVersion string

		resp, httpRes, err := apiClient.DefaultApi.GetOrgExchangePolicyTemplateDetails(context.Background(), orgId, groupId, assetId, assetVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetOrgExchangePolicyTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.GetOrgExchangePolicyTemplates(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchApimPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var apiPolicyId string

		resp, httpRes, err := apiClient.DefaultApi.PatchApimPolicy(context.Background(), orgId, envId, apiId, apiPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PostApimPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string

		resp, httpRes, err := apiClient.DefaultApi.PostApimPolicy(context.Background(), orgId, envId, apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
