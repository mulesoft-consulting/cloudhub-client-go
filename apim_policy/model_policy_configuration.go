/*
API Manager Policy API

API Manager Policy API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_policy

import (
	"encoding/json"
)

// checks if the PolicyConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyConfiguration{}

// PolicyConfiguration struct for PolicyConfiguration
type PolicyConfiguration struct {
	PropertyName *string `json:"propertyName,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Type *string `json:"type,omitempty"`
	Options []map[string]interface{} `json:"options,omitempty"`
	Optional *bool `json:"optional,omitempty"`
	Sensitive *bool `json:"sensitive,omitempty"`
	AllowMultiple *bool `json:"allowMultiple,omitempty"`
	Configuration []PolicyConfigurationConfigurationInner `json:"configuration,omitempty"`
}

// NewPolicyConfiguration instantiates a new PolicyConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyConfiguration() *PolicyConfiguration {
	this := PolicyConfiguration{}
	return &this
}

// NewPolicyConfigurationWithDefaults instantiates a new PolicyConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyConfigurationWithDefaults() *PolicyConfiguration {
	this := PolicyConfiguration{}
	return &this
}

// GetPropertyName returns the PropertyName field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetPropertyName() string {
	if o == nil || IsNil(o.PropertyName) {
		var ret string
		return ret
	}
	return *o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetPropertyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyName) {
		return nil, false
	}
	return o.PropertyName, true
}

// HasPropertyName returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasPropertyName() bool {
	if o != nil && !IsNil(o.PropertyName) {
		return true
	}

	return false
}

// SetPropertyName gets a reference to the given string and assigns it to the PropertyName field.
func (o *PolicyConfiguration) SetPropertyName(v string) {
	o.PropertyName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PolicyConfiguration) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyConfiguration) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PolicyConfiguration) SetType(v string) {
	o.Type = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetOptions() []map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetOptionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []map[string]interface{} and assigns it to the Options field.
func (o *PolicyConfiguration) SetOptions(v []map[string]interface{}) {
	o.Options = v
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetOptional() bool {
	if o == nil || IsNil(o.Optional) {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetOptionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Optional) {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasOptional() bool {
	if o != nil && !IsNil(o.Optional) {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *PolicyConfiguration) SetOptional(v bool) {
	o.Optional = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetSensitive() bool {
	if o == nil || IsNil(o.Sensitive) {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Sensitive) {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasSensitive() bool {
	if o != nil && !IsNil(o.Sensitive) {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *PolicyConfiguration) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetAllowMultiple returns the AllowMultiple field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetAllowMultiple() bool {
	if o == nil || IsNil(o.AllowMultiple) {
		var ret bool
		return ret
	}
	return *o.AllowMultiple
}

// GetAllowMultipleOk returns a tuple with the AllowMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetAllowMultipleOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultiple) {
		return nil, false
	}
	return o.AllowMultiple, true
}

// HasAllowMultiple returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasAllowMultiple() bool {
	if o != nil && !IsNil(o.AllowMultiple) {
		return true
	}

	return false
}

// SetAllowMultiple gets a reference to the given bool and assigns it to the AllowMultiple field.
func (o *PolicyConfiguration) SetAllowMultiple(v bool) {
	o.AllowMultiple = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *PolicyConfiguration) GetConfiguration() []PolicyConfigurationConfigurationInner {
	if o == nil || IsNil(o.Configuration) {
		var ret []PolicyConfigurationConfigurationInner
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyConfiguration) GetConfigurationOk() ([]PolicyConfigurationConfigurationInner, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *PolicyConfiguration) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given []PolicyConfigurationConfigurationInner and assigns it to the Configuration field.
func (o *PolicyConfiguration) SetConfiguration(v []PolicyConfigurationConfigurationInner) {
	o.Configuration = v
}

func (o PolicyConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyName) {
		toSerialize["propertyName"] = o.PropertyName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Optional) {
		toSerialize["optional"] = o.Optional
	}
	if !IsNil(o.Sensitive) {
		toSerialize["sensitive"] = o.Sensitive
	}
	if !IsNil(o.AllowMultiple) {
		toSerialize["allowMultiple"] = o.AllowMultiple
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullablePolicyConfiguration struct {
	value *PolicyConfiguration
	isSet bool
}

func (v NullablePolicyConfiguration) Get() *PolicyConfiguration {
	return v.value
}

func (v *NullablePolicyConfiguration) Set(val *PolicyConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyConfiguration(val *PolicyConfiguration) *NullablePolicyConfiguration {
	return &NullablePolicyConfiguration{value: val, isSet: true}
}

func (v NullablePolicyConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


