/*
API Manager Policy API

API Manager Policy API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_policy

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiDeleteApimPolicyRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiId string
	apiPolicyId string
}

func (r DefaultApiDeleteApimPolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteApimPolicyExecute(r)
}

/*
DeleteApimPolicy Delete a specific api manager instance policy.

Delete a specific api manager instance policy in a given organization and environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment Id
 @param apiId The api manager instance Id
 @param apiPolicyId The api manager instance policy Id
 @return DefaultApiDeleteApimPolicyRequest
*/
func (a *DefaultApiService) DeleteApimPolicy(ctx context.Context, orgId string, envId string, apiId string, apiPolicyId string) DefaultApiDeleteApimPolicyRequest {
	return DefaultApiDeleteApimPolicyRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiId: apiId,
		apiPolicyId: apiPolicyId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DeleteApimPolicyExecute(r DefaultApiDeleteApimPolicyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteApimPolicy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis/{apiId}/policies/{apiPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiId"+"}", url.PathEscape(parameterValueToString(r.apiId, "apiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiPolicyId"+"}", url.PathEscape(parameterValueToString(r.apiPolicyId, "apiPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiDisableApimPolicyRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiId string
	apiPolicyId string
}

func (r DefaultApiDisableApimPolicyRequest) Execute() (*ApimPolicy, *http.Response, error) {
	return r.ApiService.DisableApimPolicyExecute(r)
}

/*
DisableApimPolicy Disable a specific api manager instance policy.

Disable a specific api manager instance policy in a given organization and environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment Id
 @param apiId The api manager instance Id
 @param apiPolicyId The api manager instance policy Id
 @return DefaultApiDisableApimPolicyRequest
*/
func (a *DefaultApiService) DisableApimPolicy(ctx context.Context, orgId string, envId string, apiId string, apiPolicyId string) DefaultApiDisableApimPolicyRequest {
	return DefaultApiDisableApimPolicyRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiId: apiId,
		apiPolicyId: apiPolicyId,
	}
}

// Execute executes the request
//  @return ApimPolicy
func (a *DefaultApiService) DisableApimPolicyExecute(r DefaultApiDisableApimPolicyRequest) (*ApimPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DisableApimPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/xapi/v1/organizations/{orgId}/environments/{envId}/apis/{apiId}/policies/{apiPolicyId}/disable"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiId"+"}", url.PathEscape(parameterValueToString(r.apiId, "apiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiPolicyId"+"}", url.PathEscape(parameterValueToString(r.apiPolicyId, "apiPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiEnableApimPolicyRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiId string
	apiPolicyId string
}

func (r DefaultApiEnableApimPolicyRequest) Execute() (*ApimPolicy, *http.Response, error) {
	return r.ApiService.EnableApimPolicyExecute(r)
}

/*
EnableApimPolicy Enable a specific api manager instance policy.

Enable a specific api manager instance policy in a given organization and environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment Id
 @param apiId The api manager instance Id
 @param apiPolicyId The api manager instance policy Id
 @return DefaultApiEnableApimPolicyRequest
*/
func (a *DefaultApiService) EnableApimPolicy(ctx context.Context, orgId string, envId string, apiId string, apiPolicyId string) DefaultApiEnableApimPolicyRequest {
	return DefaultApiEnableApimPolicyRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiId: apiId,
		apiPolicyId: apiPolicyId,
	}
}

// Execute executes the request
//  @return ApimPolicy
func (a *DefaultApiService) EnableApimPolicyExecute(r DefaultApiEnableApimPolicyRequest) (*ApimPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.EnableApimPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/xapi/v1/organizations/{orgId}/environments/{envId}/apis/{apiId}/policies/{apiPolicyId}/enable"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiId"+"}", url.PathEscape(parameterValueToString(r.apiId, "apiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiPolicyId"+"}", url.PathEscape(parameterValueToString(r.apiPolicyId, "apiPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetApimPoliciesRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiId string
	fullInfo *bool
}

func (r DefaultApiGetApimPoliciesRequest) FullInfo(fullInfo bool) DefaultApiGetApimPoliciesRequest {
	r.fullInfo = &fullInfo
	return r
}

func (r DefaultApiGetApimPoliciesRequest) Execute() (*ApimPolicyCollection, *http.Response, error) {
	return r.ApiService.GetApimPoliciesExecute(r)
}

/*
GetApimPolicies Retrieve all of api manager instance policies.

Retrieve all of api manager instance policies in a given organization and environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment Id
 @param apiId The api manager instance Id
 @return DefaultApiGetApimPoliciesRequest
*/
func (a *DefaultApiService) GetApimPolicies(ctx context.Context, orgId string, envId string, apiId string) DefaultApiGetApimPoliciesRequest {
	return DefaultApiGetApimPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiId: apiId,
	}
}

// Execute executes the request
//  @return ApimPolicyCollection
func (a *DefaultApiService) GetApimPoliciesExecute(r DefaultApiGetApimPoliciesRequest) (*ApimPolicyCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimPolicyCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis/{apiId}/policies"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiId"+"}", url.PathEscape(parameterValueToString(r.apiId, "apiId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fullInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fullInfo", r.fullInfo, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetApimPolicyRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiId string
	apiPolicyId string
}

func (r DefaultApiGetApimPolicyRequest) Execute() (*ApimPolicy, *http.Response, error) {
	return r.ApiService.GetApimPolicyExecute(r)
}

/*
GetApimPolicy Retrieve a specific api manager instance policy.

Retrieve a specific api manager instance policy in a given organization and environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment Id
 @param apiId The api manager instance Id
 @param apiPolicyId The api manager instance policy Id
 @return DefaultApiGetApimPolicyRequest
*/
func (a *DefaultApiService) GetApimPolicy(ctx context.Context, orgId string, envId string, apiId string, apiPolicyId string) DefaultApiGetApimPolicyRequest {
	return DefaultApiGetApimPolicyRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiId: apiId,
		apiPolicyId: apiPolicyId,
	}
}

// Execute executes the request
//  @return ApimPolicy
func (a *DefaultApiService) GetApimPolicyExecute(r DefaultApiGetApimPolicyRequest) (*ApimPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis/{apiId}/policies/{apiPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiId"+"}", url.PathEscape(parameterValueToString(r.apiId, "apiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiPolicyId"+"}", url.PathEscape(parameterValueToString(r.apiPolicyId, "apiPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetOrgAutomatedPoliciesRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	environmentId *string
}

// A environment id
func (r DefaultApiGetOrgAutomatedPoliciesRequest) EnvironmentId(environmentId string) DefaultApiGetOrgAutomatedPoliciesRequest {
	r.environmentId = &environmentId
	return r
}

func (r DefaultApiGetOrgAutomatedPoliciesRequest) Execute() (*AutomatedPolicyCollection, *http.Response, error) {
	return r.ApiService.GetOrgAutomatedPoliciesExecute(r)
}

/*
GetOrgAutomatedPolicies Retrieve all automated policies of a given organization

Retrieves all automated policies of a given organization and optionally environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @return DefaultApiGetOrgAutomatedPoliciesRequest
*/
func (a *DefaultApiService) GetOrgAutomatedPolicies(ctx context.Context, orgId string) DefaultApiGetOrgAutomatedPoliciesRequest {
	return DefaultApiGetOrgAutomatedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return AutomatedPolicyCollection
func (a *DefaultApiService) GetOrgAutomatedPoliciesExecute(r DefaultApiGetOrgAutomatedPoliciesRequest) (*AutomatedPolicyCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomatedPolicyCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetOrgAutomatedPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/automated-policies"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentId", r.environmentId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetOrgCustomPolicyTemplatesRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	query *string
	offset *int32
	ascending *bool
	sort *string
	limit *int32
}

// Search criteria.
func (r DefaultApiGetOrgCustomPolicyTemplatesRequest) Query(query string) DefaultApiGetOrgCustomPolicyTemplatesRequest {
	r.query = &query
	return r
}

// Skip over a number of elements by specifying an offset value for the query.
func (r DefaultApiGetOrgCustomPolicyTemplatesRequest) Offset(offset int32) DefaultApiGetOrgCustomPolicyTemplatesRequest {
	r.offset = &offset
	return r
}

// Order for sorting.
func (r DefaultApiGetOrgCustomPolicyTemplatesRequest) Ascending(ascending bool) DefaultApiGetOrgCustomPolicyTemplatesRequest {
	r.ascending = &ascending
	return r
}

// Property to sort by.
func (r DefaultApiGetOrgCustomPolicyTemplatesRequest) Sort(sort string) DefaultApiGetOrgCustomPolicyTemplatesRequest {
	r.sort = &sort
	return r
}

// Limit the number of elements on the response.
func (r DefaultApiGetOrgCustomPolicyTemplatesRequest) Limit(limit int32) DefaultApiGetOrgCustomPolicyTemplatesRequest {
	r.limit = &limit
	return r
}

func (r DefaultApiGetOrgCustomPolicyTemplatesRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetOrgCustomPolicyTemplatesExecute(r)
}

/*
GetOrgCustomPolicyTemplates Retrieve all or part of custom policy templates of a given organization

Retrieves all or part of custom policy templates of a given organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @return DefaultApiGetOrgCustomPolicyTemplatesRequest
*/
func (a *DefaultApiService) GetOrgCustomPolicyTemplates(ctx context.Context, orgId string) DefaultApiGetOrgCustomPolicyTemplatesRequest {
	return DefaultApiGetOrgCustomPolicyTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
func (a *DefaultApiService) GetOrgCustomPolicyTemplatesExecute(r DefaultApiGetOrgCustomPolicyTemplatesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetOrgCustomPolicyTemplates")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/custom-policy-templates"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ascending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ascending", r.ascending, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiGetOrgExchangePolicyTemplateDetailsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	groupId string
	assetId string
	assetVersion string
	includeAllVersions *bool
	splitModel *bool
}

// Whether to include all versions of the asset.
func (r DefaultApiGetOrgExchangePolicyTemplateDetailsRequest) IncludeAllVersions(includeAllVersions bool) DefaultApiGetOrgExchangePolicyTemplateDetailsRequest {
	r.includeAllVersions = &includeAllVersions
	return r
}

// Whether to include asset split model.
func (r DefaultApiGetOrgExchangePolicyTemplateDetailsRequest) SplitModel(splitModel bool) DefaultApiGetOrgExchangePolicyTemplateDetailsRequest {
	r.splitModel = &splitModel
	return r
}

func (r DefaultApiGetOrgExchangePolicyTemplateDetailsRequest) Execute() (*ExchangePolicyTemplate, *http.Response, error) {
	return r.ApiService.GetOrgExchangePolicyTemplateDetailsExecute(r)
}

/*
GetOrgExchangePolicyTemplateDetails Retrieve details of exchange policy template of a given organization

Retrieve details of exchange policy template of a given organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param groupId The group Id
 @param assetId The asset Id
 @param assetVersion The asset version
 @return DefaultApiGetOrgExchangePolicyTemplateDetailsRequest
*/
func (a *DefaultApiService) GetOrgExchangePolicyTemplateDetails(ctx context.Context, orgId string, groupId string, assetId string, assetVersion string) DefaultApiGetOrgExchangePolicyTemplateDetailsRequest {
	return DefaultApiGetOrgExchangePolicyTemplateDetailsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		groupId: groupId,
		assetId: assetId,
		assetVersion: assetVersion,
	}
}

// Execute executes the request
//  @return ExchangePolicyTemplate
func (a *DefaultApiService) GetOrgExchangePolicyTemplateDetailsExecute(r DefaultApiGetOrgExchangePolicyTemplateDetailsRequest) (*ExchangePolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExchangePolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetOrgExchangePolicyTemplateDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/xapi/v1/organizations/{orgId}/exchange-policy-templates/{groupId}/{assetId}/{assetVersion}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetId"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"assetVersion"+"}", url.PathEscape(parameterValueToString(r.assetVersion, "assetVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeAllVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAllVersions", r.includeAllVersions, "")
	}
	if r.splitModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "splitModel", r.splitModel, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetOrgExchangePolicyTemplatesRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	environmentId *string
	splitModel *bool
	latest *bool
	apiInstanceId *string
	includeConfiguration *bool
	automatedOnly *bool
}

// The environment id.
func (r DefaultApiGetOrgExchangePolicyTemplatesRequest) EnvironmentId(environmentId string) DefaultApiGetOrgExchangePolicyTemplatesRequest {
	r.environmentId = &environmentId
	return r
}

// Whether to include asset split model.
func (r DefaultApiGetOrgExchangePolicyTemplatesRequest) SplitModel(splitModel bool) DefaultApiGetOrgExchangePolicyTemplatesRequest {
	r.splitModel = &splitModel
	return r
}

// include only latest versions.
func (r DefaultApiGetOrgExchangePolicyTemplatesRequest) Latest(latest bool) DefaultApiGetOrgExchangePolicyTemplatesRequest {
	r.latest = &latest
	return r
}

// include only templates used for api instance id.
func (r DefaultApiGetOrgExchangePolicyTemplatesRequest) ApiInstanceId(apiInstanceId string) DefaultApiGetOrgExchangePolicyTemplatesRequest {
	r.apiInstanceId = &apiInstanceId
	return r
}

// whether to include configuration.
func (r DefaultApiGetOrgExchangePolicyTemplatesRequest) IncludeConfiguration(includeConfiguration bool) DefaultApiGetOrgExchangePolicyTemplatesRequest {
	r.includeConfiguration = &includeConfiguration
	return r
}

// whether to include automated policies only.
func (r DefaultApiGetOrgExchangePolicyTemplatesRequest) AutomatedOnly(automatedOnly bool) DefaultApiGetOrgExchangePolicyTemplatesRequest {
	r.automatedOnly = &automatedOnly
	return r
}

func (r DefaultApiGetOrgExchangePolicyTemplatesRequest) Execute() ([]ExchangePolicyTemplate, *http.Response, error) {
	return r.ApiService.GetOrgExchangePolicyTemplatesExecute(r)
}

/*
GetOrgExchangePolicyTemplates Retrieve all or part of exchange policy templates of a given organization

Retrieves all or part of exchange policy templates of a given organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @return DefaultApiGetOrgExchangePolicyTemplatesRequest
*/
func (a *DefaultApiService) GetOrgExchangePolicyTemplates(ctx context.Context, orgId string) DefaultApiGetOrgExchangePolicyTemplatesRequest {
	return DefaultApiGetOrgExchangePolicyTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return []ExchangePolicyTemplate
func (a *DefaultApiService) GetOrgExchangePolicyTemplatesExecute(r DefaultApiGetOrgExchangePolicyTemplatesRequest) ([]ExchangePolicyTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExchangePolicyTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetOrgExchangePolicyTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/xapi/v1/organizations/{orgId}/exchange-policy-templates"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.environmentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environmentId", r.environmentId, "")
	}
	if r.splitModel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "splitModel", r.splitModel, "")
	}
	if r.latest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latest", r.latest, "")
	}
	if r.apiInstanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "apiInstanceId", r.apiInstanceId, "")
	}
	if r.includeConfiguration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeConfiguration", r.includeConfiguration, "")
	}
	if r.automatedOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "automatedOnly", r.automatedOnly, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPatchApimPolicyRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiId string
	apiPolicyId string
	body *map[string]interface{}
}

// policy content
func (r DefaultApiPatchApimPolicyRequest) Body(body map[string]interface{}) DefaultApiPatchApimPolicyRequest {
	r.body = &body
	return r
}

func (r DefaultApiPatchApimPolicyRequest) Execute() (*ApimPolicy, *http.Response, error) {
	return r.ApiService.PatchApimPolicyExecute(r)
}

/*
PatchApimPolicy Update a specific api manager instance policy.

Update a specific api manager instance policy in a given organization and environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment Id
 @param apiId The api manager instance Id
 @param apiPolicyId The api manager instance policy Id
 @return DefaultApiPatchApimPolicyRequest
*/
func (a *DefaultApiService) PatchApimPolicy(ctx context.Context, orgId string, envId string, apiId string, apiPolicyId string) DefaultApiPatchApimPolicyRequest {
	return DefaultApiPatchApimPolicyRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiId: apiId,
		apiPolicyId: apiPolicyId,
	}
}

// Execute executes the request
//  @return ApimPolicy
func (a *DefaultApiService) PatchApimPolicyExecute(r DefaultApiPatchApimPolicyRequest) (*ApimPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchApimPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis/{apiId}/policies/{apiPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiId"+"}", url.PathEscape(parameterValueToString(r.apiId, "apiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiPolicyId"+"}", url.PathEscape(parameterValueToString(r.apiPolicyId, "apiPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPostApimPolicyRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiId string
	apimPolicyBody *ApimPolicyBody
}

// policy content
func (r DefaultApiPostApimPolicyRequest) ApimPolicyBody(apimPolicyBody ApimPolicyBody) DefaultApiPostApimPolicyRequest {
	r.apimPolicyBody = &apimPolicyBody
	return r
}

func (r DefaultApiPostApimPolicyRequest) Execute() (*ApimPolicy, *http.Response, error) {
	return r.ApiService.PostApimPolicyExecute(r)
}

/*
PostApimPolicy Create an api manager instance policy.

Create an api manager instance policy in a given organization and environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment Id
 @param apiId The api manager instance Id
 @return DefaultApiPostApimPolicyRequest
*/
func (a *DefaultApiService) PostApimPolicy(ctx context.Context, orgId string, envId string, apiId string) DefaultApiPostApimPolicyRequest {
	return DefaultApiPostApimPolicyRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiId: apiId,
	}
}

// Execute executes the request
//  @return ApimPolicy
func (a *DefaultApiService) PostApimPolicyExecute(r DefaultApiPostApimPolicyRequest) (*ApimPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostApimPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis/{apiId}/policies"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiId"+"}", url.PathEscape(parameterValueToString(r.apiId, "apiId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apimPolicyBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetOrgAutomatedPolicies404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
