/*
 * API Manager API
 *
 * API Manager API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"encoding/json"
)

// ErrorsResponseErrors struct for ErrorsResponseErrors
type ErrorsResponseErrors struct {
	Type *string `json:"type,omitempty"`
	DataPath *string `json:"dataPath,omitempty"`
	Keyword *string `json:"keyword,omitempty"`
	Schema *string `json:"schema,omitempty"`
	Data *string `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewErrorsResponseErrors instantiates a new ErrorsResponseErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorsResponseErrors() *ErrorsResponseErrors {
	this := ErrorsResponseErrors{}
	return &this
}

// NewErrorsResponseErrorsWithDefaults instantiates a new ErrorsResponseErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsResponseErrorsWithDefaults() *ErrorsResponseErrors {
	this := ErrorsResponseErrors{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ErrorsResponseErrors) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsResponseErrors) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ErrorsResponseErrors) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ErrorsResponseErrors) SetType(v string) {
	o.Type = &v
}

// GetDataPath returns the DataPath field value if set, zero value otherwise.
func (o *ErrorsResponseErrors) GetDataPath() string {
	if o == nil || o.DataPath == nil {
		var ret string
		return ret
	}
	return *o.DataPath
}

// GetDataPathOk returns a tuple with the DataPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsResponseErrors) GetDataPathOk() (*string, bool) {
	if o == nil || o.DataPath == nil {
		return nil, false
	}
	return o.DataPath, true
}

// HasDataPath returns a boolean if a field has been set.
func (o *ErrorsResponseErrors) HasDataPath() bool {
	if o != nil && o.DataPath != nil {
		return true
	}

	return false
}

// SetDataPath gets a reference to the given string and assigns it to the DataPath field.
func (o *ErrorsResponseErrors) SetDataPath(v string) {
	o.DataPath = &v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *ErrorsResponseErrors) GetKeyword() string {
	if o == nil || o.Keyword == nil {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsResponseErrors) GetKeywordOk() (*string, bool) {
	if o == nil || o.Keyword == nil {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *ErrorsResponseErrors) HasKeyword() bool {
	if o != nil && o.Keyword != nil {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *ErrorsResponseErrors) SetKeyword(v string) {
	o.Keyword = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *ErrorsResponseErrors) GetSchema() string {
	if o == nil || o.Schema == nil {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsResponseErrors) GetSchemaOk() (*string, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *ErrorsResponseErrors) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *ErrorsResponseErrors) SetSchema(v string) {
	o.Schema = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ErrorsResponseErrors) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsResponseErrors) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ErrorsResponseErrors) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ErrorsResponseErrors) SetData(v string) {
	o.Data = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorsResponseErrors) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsResponseErrors) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorsResponseErrors) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorsResponseErrors) SetMessage(v string) {
	o.Message = &v
}

func (o ErrorsResponseErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DataPath != nil {
		toSerialize["dataPath"] = o.DataPath
	}
	if o.Keyword != nil {
		toSerialize["keyword"] = o.Keyword
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableErrorsResponseErrors struct {
	value *ErrorsResponseErrors
	isSet bool
}

func (v NullableErrorsResponseErrors) Get() *ErrorsResponseErrors {
	return v.value
}

func (v *NullableErrorsResponseErrors) Set(val *ErrorsResponseErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorsResponseErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorsResponseErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorsResponseErrors(val *ErrorsResponseErrors) *NullableErrorsResponseErrors {
	return &NullableErrorsResponseErrors{value: val, isSet: true}
}

func (v NullableErrorsResponseErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorsResponseErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


