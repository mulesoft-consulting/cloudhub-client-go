/*
API Manager API

API Manager API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiDeleteApimInstanceRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
}

func (r DefaultApiDeleteApimInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteApimInstanceExecute(r)
}

/*
DeleteApimInstance Delete a specific API Manager Instance

Delete a specific API Manager Instance in a specific environment and organization. Connected Apps require the scope "Manage APIs Configuration".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api manager instance id for a given environment
 @return DefaultApiDeleteApimInstanceRequest
*/
func (a *DefaultApiService) DeleteApimInstance(ctx context.Context, orgId string, envId string, envApiId string) DefaultApiDeleteApimInstanceRequest {
	return DefaultApiDeleteApimInstanceRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DeleteApimInstanceExecute(r DefaultApiDeleteApimInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteApimInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis/{envApiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetApimInstanceDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiGetApimInstanceDetailsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	includeProxyTemplate *bool
	includeValidation *bool
	includeTlsContexts *bool
}

// Include the configured proxyTemplate to its associated endpoint
func (r DefaultApiGetApimInstanceDetailsRequest) IncludeProxyTemplate(includeProxyTemplate bool) DefaultApiGetApimInstanceDetailsRequest {
	r.includeProxyTemplate = &includeProxyTemplate
	return r
}

// Include the configured validation to its associated endpoint
func (r DefaultApiGetApimInstanceDetailsRequest) IncludeValidation(includeValidation bool) DefaultApiGetApimInstanceDetailsRequest {
	r.includeValidation = &includeValidation
	return r
}

// Include the configured TLS contexts
func (r DefaultApiGetApimInstanceDetailsRequest) IncludeTlsContexts(includeTlsContexts bool) DefaultApiGetApimInstanceDetailsRequest {
	r.includeTlsContexts = &includeTlsContexts
	return r
}

func (r DefaultApiGetApimInstanceDetailsRequest) Execute() (*ApimInstanceDetails, *http.Response, error) {
	return r.ApiService.GetApimInstanceDetailsExecute(r)
}

/*
GetApimInstanceDetails Retrieves a specific API Manager Instance

Retrieves a specific API Manager Instance for a specific environment and organization. Connected Apps require the scope "View APIs Configuration".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api manager instance id for a given environment
 @return DefaultApiGetApimInstanceDetailsRequest
*/
func (a *DefaultApiService) GetApimInstanceDetails(ctx context.Context, orgId string, envId string, envApiId string) DefaultApiGetApimInstanceDetailsRequest {
	return DefaultApiGetApimInstanceDetailsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

// Execute executes the request
//  @return ApimInstanceDetails
func (a *DefaultApiService) GetApimInstanceDetailsExecute(r DefaultApiGetApimInstanceDetailsRequest) (*ApimInstanceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimInstanceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimInstanceDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis/{envApiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeProxyTemplate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeProxyTemplate", r.includeProxyTemplate, "")
	}
	if r.includeValidation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeValidation", r.includeValidation, "")
	}
	if r.includeTlsContexts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTlsContexts", r.includeTlsContexts, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetApimInstanceDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetEnvApimInstancesRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	query *string
	groupId *string
	assetId *string
	assetVersion *string
	instanceLabel *string
	productVersion *string
	autodiscoveryInstanceName *string
	filters *[]string
	limit *int32
	offset *int32
	sort *string
	ascending *bool
}

// A string that will be checked for a partial or similar matches of the name, description, label and tags
func (r DefaultApiGetEnvApimInstancesRequest) Query(query string) DefaultApiGetEnvApimInstancesRequest {
	r.query = &query
	return r
}

// A string that will be checked for an exact match of the groupId
func (r DefaultApiGetEnvApimInstancesRequest) GroupId(groupId string) DefaultApiGetEnvApimInstancesRequest {
	r.groupId = &groupId
	return r
}

// A string that will be checked for an exact match of the assetId
func (r DefaultApiGetEnvApimInstancesRequest) AssetId(assetId string) DefaultApiGetEnvApimInstancesRequest {
	r.assetId = &assetId
	return r
}

// A string that will be checked for an exact match of the assetVersion
func (r DefaultApiGetEnvApimInstancesRequest) AssetVersion(assetVersion string) DefaultApiGetEnvApimInstancesRequest {
	r.assetVersion = &assetVersion
	return r
}

// A string that will be checked for an exact match of the instanceLabel
func (r DefaultApiGetEnvApimInstancesRequest) InstanceLabel(instanceLabel string) DefaultApiGetEnvApimInstancesRequest {
	r.instanceLabel = &instanceLabel
	return r
}

// A string that will be checked for an exact match of the productVersion
func (r DefaultApiGetEnvApimInstancesRequest) ProductVersion(productVersion string) DefaultApiGetEnvApimInstancesRequest {
	r.productVersion = &productVersion
	return r
}

// A string that will be checked for an exact match of the autodiscoveryInstanceName
func (r DefaultApiGetEnvApimInstancesRequest) AutodiscoveryInstanceName(autodiscoveryInstanceName string) DefaultApiGetEnvApimInstancesRequest {
	r.autodiscoveryInstanceName = &autodiscoveryInstanceName
	return r
}

// Comma-separated list of filters, which can be \&quot;active\&quot; and/or \&quot;pinned\&quot;
func (r DefaultApiGetEnvApimInstancesRequest) Filters(filters []string) DefaultApiGetEnvApimInstancesRequest {
	r.filters = &filters
	return r
}

// Maximum number of rolegroups to retrieve per request.
func (r DefaultApiGetEnvApimInstancesRequest) Limit(limit int32) DefaultApiGetEnvApimInstancesRequest {
	r.limit = &limit
	return r
}

// The number of records to omit from the response.
func (r DefaultApiGetEnvApimInstancesRequest) Offset(offset int32) DefaultApiGetEnvApimInstancesRequest {
	r.offset = &offset
	return r
}

// Default value is name
func (r DefaultApiGetEnvApimInstancesRequest) Sort(sort string) DefaultApiGetEnvApimInstancesRequest {
	r.sort = &sort
	return r
}

// To activate ascending sorting
func (r DefaultApiGetEnvApimInstancesRequest) Ascending(ascending bool) DefaultApiGetEnvApimInstancesRequest {
	r.ascending = &ascending
	return r
}

func (r DefaultApiGetEnvApimInstancesRequest) Execute() (*ApimInstanceCollection, *http.Response, error) {
	return r.ApiService.GetEnvApimInstancesExecute(r)
}

/*
GetEnvApimInstances Retrieves a collection of API Manager Instances

Retrieves collection of API Manager Instances that meets the given criteria. Connected Apps require the scope "View APIs Configuration"

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @return DefaultApiGetEnvApimInstancesRequest
*/
func (a *DefaultApiService) GetEnvApimInstances(ctx context.Context, orgId string, envId string) DefaultApiGetEnvApimInstancesRequest {
	return DefaultApiGetEnvApimInstancesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
	}
}

// Execute executes the request
//  @return ApimInstanceCollection
func (a *DefaultApiService) GetEnvApimInstancesExecute(r DefaultApiGetEnvApimInstancesRequest) (*ApimInstanceCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimInstanceCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetEnvApimInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/organizations/{orgId}/environments/{envId}/apis"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	}
	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupId", r.groupId, "")
	}
	if r.assetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assetId", r.assetId, "")
	}
	if r.assetVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assetVersion", r.assetVersion, "")
	}
	if r.instanceLabel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "instanceLabel", r.instanceLabel, "")
	}
	if r.productVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productVersion", r.productVersion, "")
	}
	if r.autodiscoveryInstanceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autodiscoveryInstanceName", r.autodiscoveryInstanceName, "")
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filters", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filters", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.ascending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ascending", r.ascending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPatchApimInstanceRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	force *bool
	updateApisInSamePort *bool
	body *map[string]interface{}
}

// Allows patching the API autodiscoveryInstanceName. You may want to change the &#39;api.version&#39; configuration on all Mule 2 &amp; Mule 3 applications tracking this API.
func (r DefaultApiPatchApimInstanceRequest) Force(force bool) DefaultApiPatchApimInstanceRequest {
	r.force = &force
	return r
}

// For APIs deployed to Flex, if endpoint proxyUri or inbound TLS Contexts are being updated, apis in the same port are also updated
func (r DefaultApiPatchApimInstanceRequest) UpdateApisInSamePort(updateApisInSamePort bool) DefaultApiPatchApimInstanceRequest {
	r.updateApisInSamePort = &updateApisInSamePort
	return r
}

// Patch API Manager Instance Body
func (r DefaultApiPatchApimInstanceRequest) Body(body map[string]interface{}) DefaultApiPatchApimInstanceRequest {
	r.body = &body
	return r
}

func (r DefaultApiPatchApimInstanceRequest) Execute() (*ApimInstancePatchResponse, *http.Response, error) {
	return r.ApiService.PatchApimInstanceExecute(r)
}

/*
PatchApimInstance Patches a specific API Manager Instance

Patches a specific API Manager Instance in a specific environment and organization. Connected Apps require the scope "Manage APIs Configuration".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api manager instance id for a given environment
 @return DefaultApiPatchApimInstanceRequest
*/
func (a *DefaultApiService) PatchApimInstance(ctx context.Context, orgId string, envId string, envApiId string) DefaultApiPatchApimInstanceRequest {
	return DefaultApiPatchApimInstanceRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

// Execute executes the request
//  @return ApimInstancePatchResponse
func (a *DefaultApiService) PatchApimInstanceExecute(r DefaultApiPatchApimInstanceRequest) (*ApimInstancePatchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimInstancePatchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchApimInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/xapi/v1/organizations/{orgId}/environments/{envId}/apis/{envApiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "force", r.force, "")
	}
	if r.updateApisInSamePort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateApisInSamePort", r.updateApisInSamePort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetApimInstanceDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPostApimInstanceRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apimInstancePostBody *ApimInstancePostBody
}

// Post API Manager Instance Body
func (r DefaultApiPostApimInstanceRequest) ApimInstancePostBody(apimInstancePostBody ApimInstancePostBody) DefaultApiPostApimInstanceRequest {
	r.apimInstancePostBody = &apimInstancePostBody
	return r
}

func (r DefaultApiPostApimInstanceRequest) Execute() (*ApimInstancePostResponse, *http.Response, error) {
	return r.ApiService.PostApimInstanceExecute(r)
}

/*
PostApimInstance Creates an API Manager Instance

Creates an API Manager Instance in a given environment. Connected Apps require the scope "Manage APIs Configuration".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @return DefaultApiPostApimInstanceRequest
*/
func (a *DefaultApiService) PostApimInstance(ctx context.Context, orgId string, envId string) DefaultApiPostApimInstanceRequest {
	return DefaultApiPostApimInstanceRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
	}
}

// Execute executes the request
//  @return ApimInstancePostResponse
func (a *DefaultApiService) PostApimInstanceExecute(r DefaultApiPostApimInstanceRequest) (*ApimInstancePostResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApimInstancePostResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostApimInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/xapi/v1/organizations/{orgId}/environments/{envId}/apis"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apimInstancePostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
