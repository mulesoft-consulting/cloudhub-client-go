/*
Runtime Fabrics API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rtf

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/rtf"
)

func Test_rtf_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService DeleteFabrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fabricsId string

		httpRes, err := apiClient.DefaultApi.DeleteFabrics(context.Background(), orgId, fabricsId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAllFabrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.GetAllFabrics(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFabrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fabricsId string

		resp, httpRes, err := apiClient.DefaultApi.GetFabrics(context.Background(), orgId, fabricsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFabricsAssociations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fabricsId string

		resp, httpRes, err := apiClient.DefaultApi.GetFabricsAssociations(context.Background(), orgId, fabricsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFabricsHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fabricsId string

		resp, httpRes, err := apiClient.DefaultApi.GetFabricsHealth(context.Background(), orgId, fabricsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetFabricsHelmRepoProps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.GetFabricsHelmRepoProps(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PostFabrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.DefaultApi.PostFabrics(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PostFabricsAssociations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var fabricsId string

		resp, httpRes, err := apiClient.DefaultApi.PostFabricsAssociations(context.Background(), orgId, fabricsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
