/*
Runtime Fabrics API

Runtime Fabrics API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtf

import (
	"encoding/json"
)

// checks if the Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Status{}

// Status struct for Status
type Status struct {
	IsHealthy *bool `json:"isHealthy,omitempty"`
	IsReady *bool `json:"isReady,omitempty"`
	IsSchedulable *bool `json:"isSchedulable,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus() *Status {
	this := Status{}
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetIsHealthy returns the IsHealthy field value if set, zero value otherwise.
func (o *Status) GetIsHealthy() bool {
	if o == nil || IsNil(o.IsHealthy) {
		var ret bool
		return ret
	}
	return *o.IsHealthy
}

// GetIsHealthyOk returns a tuple with the IsHealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetIsHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHealthy) {
		return nil, false
	}
	return o.IsHealthy, true
}

// HasIsHealthy returns a boolean if a field has been set.
func (o *Status) HasIsHealthy() bool {
	if o != nil && !IsNil(o.IsHealthy) {
		return true
	}

	return false
}

// SetIsHealthy gets a reference to the given bool and assigns it to the IsHealthy field.
func (o *Status) SetIsHealthy(v bool) {
	o.IsHealthy = &v
}

// GetIsReady returns the IsReady field value if set, zero value otherwise.
func (o *Status) GetIsReady() bool {
	if o == nil || IsNil(o.IsReady) {
		var ret bool
		return ret
	}
	return *o.IsReady
}

// GetIsReadyOk returns a tuple with the IsReady field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetIsReadyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReady) {
		return nil, false
	}
	return o.IsReady, true
}

// HasIsReady returns a boolean if a field has been set.
func (o *Status) HasIsReady() bool {
	if o != nil && !IsNil(o.IsReady) {
		return true
	}

	return false
}

// SetIsReady gets a reference to the given bool and assigns it to the IsReady field.
func (o *Status) SetIsReady(v bool) {
	o.IsReady = &v
}

// GetIsSchedulable returns the IsSchedulable field value if set, zero value otherwise.
func (o *Status) GetIsSchedulable() bool {
	if o == nil || IsNil(o.IsSchedulable) {
		var ret bool
		return ret
	}
	return *o.IsSchedulable
}

// GetIsSchedulableOk returns a tuple with the IsSchedulable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetIsSchedulableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSchedulable) {
		return nil, false
	}
	return o.IsSchedulable, true
}

// HasIsSchedulable returns a boolean if a field has been set.
func (o *Status) HasIsSchedulable() bool {
	if o != nil && !IsNil(o.IsSchedulable) {
		return true
	}

	return false
}

// SetIsSchedulable gets a reference to the given bool and assigns it to the IsSchedulable field.
func (o *Status) SetIsSchedulable(v bool) {
	o.IsSchedulable = &v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsHealthy) {
		toSerialize["isHealthy"] = o.IsHealthy
	}
	if !IsNil(o.IsReady) {
		toSerialize["isReady"] = o.IsReady
	}
	if !IsNil(o.IsSchedulable) {
		toSerialize["isSchedulable"] = o.IsSchedulable
	}
	return toSerialize, nil
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


