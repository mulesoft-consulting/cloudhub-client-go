/*
Anypoint MQ Exchange Binding specfication

Anypoint MQ Exchange Binding API specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ame_binding

import (
	"encoding/json"
)

// checks if the ExchangeBindingWithRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeBindingWithRules{}

// ExchangeBindingWithRules struct for ExchangeBindingWithRules
type ExchangeBindingWithRules struct {
	QueueId *string `json:"queueId,omitempty"`
	ExchangeId *string `json:"exchangeId,omitempty"`
	Rules []map[string]interface{} `json:"rules,omitempty"`
}

// NewExchangeBindingWithRules instantiates a new ExchangeBindingWithRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeBindingWithRules() *ExchangeBindingWithRules {
	this := ExchangeBindingWithRules{}
	return &this
}

// NewExchangeBindingWithRulesWithDefaults instantiates a new ExchangeBindingWithRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeBindingWithRulesWithDefaults() *ExchangeBindingWithRules {
	this := ExchangeBindingWithRules{}
	return &this
}

// GetQueueId returns the QueueId field value if set, zero value otherwise.
func (o *ExchangeBindingWithRules) GetQueueId() string {
	if o == nil || IsNil(o.QueueId) {
		var ret string
		return ret
	}
	return *o.QueueId
}

// GetQueueIdOk returns a tuple with the QueueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeBindingWithRules) GetQueueIdOk() (*string, bool) {
	if o == nil || IsNil(o.QueueId) {
		return nil, false
	}
	return o.QueueId, true
}

// HasQueueId returns a boolean if a field has been set.
func (o *ExchangeBindingWithRules) HasQueueId() bool {
	if o != nil && !IsNil(o.QueueId) {
		return true
	}

	return false
}

// SetQueueId gets a reference to the given string and assigns it to the QueueId field.
func (o *ExchangeBindingWithRules) SetQueueId(v string) {
	o.QueueId = &v
}

// GetExchangeId returns the ExchangeId field value if set, zero value otherwise.
func (o *ExchangeBindingWithRules) GetExchangeId() string {
	if o == nil || IsNil(o.ExchangeId) {
		var ret string
		return ret
	}
	return *o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeBindingWithRules) GetExchangeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeId) {
		return nil, false
	}
	return o.ExchangeId, true
}

// HasExchangeId returns a boolean if a field has been set.
func (o *ExchangeBindingWithRules) HasExchangeId() bool {
	if o != nil && !IsNil(o.ExchangeId) {
		return true
	}

	return false
}

// SetExchangeId gets a reference to the given string and assigns it to the ExchangeId field.
func (o *ExchangeBindingWithRules) SetExchangeId(v string) {
	o.ExchangeId = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ExchangeBindingWithRules) GetRules() []map[string]interface{} {
	if o == nil || IsNil(o.Rules) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeBindingWithRules) GetRulesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ExchangeBindingWithRules) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []map[string]interface{} and assigns it to the Rules field.
func (o *ExchangeBindingWithRules) SetRules(v []map[string]interface{}) {
	o.Rules = v
}

func (o ExchangeBindingWithRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeBindingWithRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueueId) {
		toSerialize["queueId"] = o.QueueId
	}
	if !IsNil(o.ExchangeId) {
		toSerialize["exchangeId"] = o.ExchangeId
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableExchangeBindingWithRules struct {
	value *ExchangeBindingWithRules
	isSet bool
}

func (v NullableExchangeBindingWithRules) Get() *ExchangeBindingWithRules {
	return v.value
}

func (v *NullableExchangeBindingWithRules) Set(val *ExchangeBindingWithRules) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeBindingWithRules) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeBindingWithRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeBindingWithRules(val *ExchangeBindingWithRules) *NullableExchangeBindingWithRules {
	return &NullableExchangeBindingWithRules{value: val, isSet: true}
}

func (v NullableExchangeBindingWithRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeBindingWithRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


