/*
Secret Group CRL Distributor Configs API

Secret Group CRL Distributor Configs API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_crl_distributor_configs

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiGetSecretGroupCrlDistribCfgsDetailsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
}

func (r DefaultApiGetSecretGroupCrlDistribCfgsDetailsRequest) Execute() (*CrlDistribCfgsDetails, *http.Response, error) {
	return r.ApiService.GetSecretGroupCrlDistribCfgsDetailsExecute(r)
}

/*
GetSecretGroupCrlDistribCfgsDetails Retrieve crl-distributor-configs details

Retrieves crl-distributor-configs details by id for a given secret group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The crl distributor configurations id
 @return DefaultApiGetSecretGroupCrlDistribCfgsDetailsRequest
*/
func (a *DefaultApiService) GetSecretGroupCrlDistribCfgsDetails(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiGetSecretGroupCrlDistribCfgsDetailsRequest {
	return DefaultApiGetSecretGroupCrlDistribCfgsDetailsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return CrlDistribCfgsDetails
func (a *DefaultApiService) GetSecretGroupCrlDistribCfgsDetailsExecute(r DefaultApiGetSecretGroupCrlDistribCfgsDetailsRequest) (*CrlDistribCfgsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CrlDistribCfgsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetSecretGroupCrlDistribCfgsDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/crlDistributorConfigs/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupCrlDistribCfgsDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetSecretGroupCrlDistribCfgsListRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
}

func (r DefaultApiGetSecretGroupCrlDistribCfgsListRequest) Execute() ([]CrlDistribCfgSummary, *http.Response, error) {
	return r.ApiService.GetSecretGroupCrlDistribCfgsListExecute(r)
}

/*
GetSecretGroupCrlDistribCfgsList Retrieves a secret-groups' collection of crl-distributor-configs.

Retrieves a secret-groups' collection of crl-distributor-configs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @return DefaultApiGetSecretGroupCrlDistribCfgsListRequest
*/
func (a *DefaultApiService) GetSecretGroupCrlDistribCfgsList(ctx context.Context, orgId string, envId string, secretGroupId string) DefaultApiGetSecretGroupCrlDistribCfgsListRequest {
	return DefaultApiGetSecretGroupCrlDistribCfgsListRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
	}
}

// Execute executes the request
//  @return []CrlDistribCfgSummary
func (a *DefaultApiService) GetSecretGroupCrlDistribCfgsListExecute(r DefaultApiGetSecretGroupCrlDistribCfgsListRequest) ([]CrlDistribCfgSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CrlDistribCfgSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetSecretGroupCrlDistribCfgsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/crlDistributorConfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPostSecretGroupCrlDistribCfgsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	crlDistribCfgsReqBody *CrlDistribCfgsReqBody
}

func (r DefaultApiPostSecretGroupCrlDistribCfgsRequest) CrlDistribCfgsReqBody(crlDistribCfgsReqBody CrlDistribCfgsReqBody) DefaultApiPostSecretGroupCrlDistribCfgsRequest {
	r.crlDistribCfgsReqBody = &crlDistribCfgsReqBody
	return r
}

func (r DefaultApiPostSecretGroupCrlDistribCfgsRequest) Execute() (*PostSecretGroupCrlDistribCfgs201Response, *http.Response, error) {
	return r.ApiService.PostSecretGroupCrlDistribCfgsExecute(r)
}

/*
PostSecretGroupCrlDistribCfgs Create a secret-groups' crl-distributor-configs.

Create a secret-groups' crl-distributor-configs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @return DefaultApiPostSecretGroupCrlDistribCfgsRequest
*/
func (a *DefaultApiService) PostSecretGroupCrlDistribCfgs(ctx context.Context, orgId string, envId string, secretGroupId string) DefaultApiPostSecretGroupCrlDistribCfgsRequest {
	return DefaultApiPostSecretGroupCrlDistribCfgsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
	}
}

// Execute executes the request
//  @return PostSecretGroupCrlDistribCfgs201Response
func (a *DefaultApiService) PostSecretGroupCrlDistribCfgsExecute(r DefaultApiPostSecretGroupCrlDistribCfgsRequest) (*PostSecretGroupCrlDistribCfgs201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostSecretGroupCrlDistribCfgs201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostSecretGroupCrlDistribCfgs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/crlDistributorConfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.crlDistribCfgsReqBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPutSecretGroupTlsContextRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
	crlDistribCfgsReqBody *CrlDistribCfgsReqBody
}

func (r DefaultApiPutSecretGroupTlsContextRequest) CrlDistribCfgsReqBody(crlDistribCfgsReqBody CrlDistribCfgsReqBody) DefaultApiPutSecretGroupTlsContextRequest {
	r.crlDistribCfgsReqBody = &crlDistribCfgsReqBody
	return r
}

func (r DefaultApiPutSecretGroupTlsContextRequest) Execute() (*PutSecretGroupTlsContext200Response, *http.Response, error) {
	return r.ApiService.PutSecretGroupTlsContextExecute(r)
}

/*
PutSecretGroupTlsContext Update a given secret-group tls-context

Update tls-context details for a given secret-group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The crl distributor configurations id
 @return DefaultApiPutSecretGroupTlsContextRequest
*/
func (a *DefaultApiService) PutSecretGroupTlsContext(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiPutSecretGroupTlsContextRequest {
	return DefaultApiPutSecretGroupTlsContextRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return PutSecretGroupTlsContext200Response
func (a *DefaultApiService) PutSecretGroupTlsContextExecute(r DefaultApiPutSecretGroupTlsContextRequest) (*PutSecretGroupTlsContext200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutSecretGroupTlsContext200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PutSecretGroupTlsContext")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/crlDistributorConfigs/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.crlDistribCfgsReqBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupCrlDistribCfgsDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
