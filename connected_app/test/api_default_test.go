/*
Connected App API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package connected_app

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/connected_app"
)

func Test_connected_app_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService ConnectedApplicationsConnAppIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connAppId string

		httpRes, err := apiClient.DefaultApi.ConnectedApplicationsConnAppIdDelete(context.Background(), connAppId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ConnectedApplicationsConnAppIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connAppId string

		resp, httpRes, err := apiClient.DefaultApi.ConnectedApplicationsConnAppIdGet(context.Background(), connAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ConnectedApplicationsConnAppIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connAppId string

		resp, httpRes, err := apiClient.DefaultApi.ConnectedApplicationsConnAppIdPatch(context.Background(), connAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ConnectedApplicationsConnAppIdScopesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connAppId string

		resp, httpRes, err := apiClient.DefaultApi.ConnectedApplicationsConnAppIdScopesGet(context.Background(), connAppId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ConnectedApplicationsConnAppIdScopesPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connAppId string

		httpRes, err := apiClient.DefaultApi.ConnectedApplicationsConnAppIdScopesPut(context.Background(), connAppId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ConnectedApplicationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ConnectedApplicationsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ConnectedApplicationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ConnectedApplicationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
