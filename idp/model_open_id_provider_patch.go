/*
Identity Provider Management API

Description of Identity Provider API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
)

// checks if the OpenIDProviderPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenIDProviderPatch{}

// OpenIDProviderPatch struct for OpenIDProviderPatch
type OpenIDProviderPatch struct {
	Name *string `json:"name,omitempty"`
	Type *SamlProviderPatchType `json:"type,omitempty"`
	OidcProvider *OpenIDProviderPatchOidcProvider `json:"oidc_provider,omitempty"`
	AllowUntrustedCertificates *bool `json:"allow_untrusted_certificates,omitempty"`
	LoginDisabled *bool `json:"login_disabled,omitempty"`
}

// NewOpenIDProviderPatch instantiates a new OpenIDProviderPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenIDProviderPatch() *OpenIDProviderPatch {
	this := OpenIDProviderPatch{}
	return &this
}

// NewOpenIDProviderPatchWithDefaults instantiates a new OpenIDProviderPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenIDProviderPatchWithDefaults() *OpenIDProviderPatch {
	this := OpenIDProviderPatch{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OpenIDProviderPatch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIDProviderPatch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OpenIDProviderPatch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OpenIDProviderPatch) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OpenIDProviderPatch) GetType() SamlProviderPatchType {
	if o == nil || IsNil(o.Type) {
		var ret SamlProviderPatchType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIDProviderPatch) GetTypeOk() (*SamlProviderPatchType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OpenIDProviderPatch) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given SamlProviderPatchType and assigns it to the Type field.
func (o *OpenIDProviderPatch) SetType(v SamlProviderPatchType) {
	o.Type = &v
}

// GetOidcProvider returns the OidcProvider field value if set, zero value otherwise.
func (o *OpenIDProviderPatch) GetOidcProvider() OpenIDProviderPatchOidcProvider {
	if o == nil || IsNil(o.OidcProvider) {
		var ret OpenIDProviderPatchOidcProvider
		return ret
	}
	return *o.OidcProvider
}

// GetOidcProviderOk returns a tuple with the OidcProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIDProviderPatch) GetOidcProviderOk() (*OpenIDProviderPatchOidcProvider, bool) {
	if o == nil || IsNil(o.OidcProvider) {
		return nil, false
	}
	return o.OidcProvider, true
}

// HasOidcProvider returns a boolean if a field has been set.
func (o *OpenIDProviderPatch) HasOidcProvider() bool {
	if o != nil && !IsNil(o.OidcProvider) {
		return true
	}

	return false
}

// SetOidcProvider gets a reference to the given OpenIDProviderPatchOidcProvider and assigns it to the OidcProvider field.
func (o *OpenIDProviderPatch) SetOidcProvider(v OpenIDProviderPatchOidcProvider) {
	o.OidcProvider = &v
}

// GetAllowUntrustedCertificates returns the AllowUntrustedCertificates field value if set, zero value otherwise.
func (o *OpenIDProviderPatch) GetAllowUntrustedCertificates() bool {
	if o == nil || IsNil(o.AllowUntrustedCertificates) {
		var ret bool
		return ret
	}
	return *o.AllowUntrustedCertificates
}

// GetAllowUntrustedCertificatesOk returns a tuple with the AllowUntrustedCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIDProviderPatch) GetAllowUntrustedCertificatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowUntrustedCertificates) {
		return nil, false
	}
	return o.AllowUntrustedCertificates, true
}

// HasAllowUntrustedCertificates returns a boolean if a field has been set.
func (o *OpenIDProviderPatch) HasAllowUntrustedCertificates() bool {
	if o != nil && !IsNil(o.AllowUntrustedCertificates) {
		return true
	}

	return false
}

// SetAllowUntrustedCertificates gets a reference to the given bool and assigns it to the AllowUntrustedCertificates field.
func (o *OpenIDProviderPatch) SetAllowUntrustedCertificates(v bool) {
	o.AllowUntrustedCertificates = &v
}

// GetLoginDisabled returns the LoginDisabled field value if set, zero value otherwise.
func (o *OpenIDProviderPatch) GetLoginDisabled() bool {
	if o == nil || IsNil(o.LoginDisabled) {
		var ret bool
		return ret
	}
	return *o.LoginDisabled
}

// GetLoginDisabledOk returns a tuple with the LoginDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenIDProviderPatch) GetLoginDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LoginDisabled) {
		return nil, false
	}
	return o.LoginDisabled, true
}

// HasLoginDisabled returns a boolean if a field has been set.
func (o *OpenIDProviderPatch) HasLoginDisabled() bool {
	if o != nil && !IsNil(o.LoginDisabled) {
		return true
	}

	return false
}

// SetLoginDisabled gets a reference to the given bool and assigns it to the LoginDisabled field.
func (o *OpenIDProviderPatch) SetLoginDisabled(v bool) {
	o.LoginDisabled = &v
}

func (o OpenIDProviderPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenIDProviderPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.OidcProvider) {
		toSerialize["oidc_provider"] = o.OidcProvider
	}
	if !IsNil(o.AllowUntrustedCertificates) {
		toSerialize["allow_untrusted_certificates"] = o.AllowUntrustedCertificates
	}
	if !IsNil(o.LoginDisabled) {
		toSerialize["login_disabled"] = o.LoginDisabled
	}
	return toSerialize, nil
}

type NullableOpenIDProviderPatch struct {
	value *OpenIDProviderPatch
	isSet bool
}

func (v NullableOpenIDProviderPatch) Get() *OpenIDProviderPatch {
	return v.value
}

func (v *NullableOpenIDProviderPatch) Set(val *OpenIDProviderPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenIDProviderPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenIDProviderPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenIDProviderPatch(val *OpenIDProviderPatch) *NullableOpenIDProviderPatch {
	return &NullableOpenIDProviderPatch{value: val, isSet: true}
}

func (v NullableOpenIDProviderPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenIDProviderPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


