/*
Identity Provider Management API

Description of Identity Provider API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
)

// checks if the Credentials1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Credentials1{}

// Credentials1 struct for Credentials1
type Credentials1 struct {
	Id *string `json:"id,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// NewCredentials1 instantiates a new Credentials1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentials1() *Credentials1 {
	this := Credentials1{}
	return &this
}

// NewCredentials1WithDefaults instantiates a new Credentials1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentials1WithDefaults() *Credentials1 {
	this := Credentials1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Credentials1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Credentials1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Credentials1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Credentials1) SetId(v string) {
	o.Id = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *Credentials1) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Credentials1) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *Credentials1) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *Credentials1) SetSecret(v string) {
	o.Secret = &v
}

func (o Credentials1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Credentials1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableCredentials1 struct {
	value *Credentials1
	isSet bool
}

func (v NullableCredentials1) Get() *Credentials1 {
	return v.value
}

func (v *NullableCredentials1) Set(val *Credentials1) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentials1) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentials1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentials1(val *Credentials1) *NullableCredentials1 {
	return &NullableCredentials1{value: val, isSet: true}
}

func (v NullableCredentials1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentials1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


