/*
Identity Provider Management API

Description of Identity Provider API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
	"fmt"
)

// IdpPostBody - struct for IdpPostBody
type IdpPostBody struct {
	LdapProviderPostBody *LdapProviderPostBody
	OpenIDProviderDynamicPostBody *OpenIDProviderDynamicPostBody
	OpenIDProviderManualPostBody *OpenIDProviderManualPostBody
	SamlProviderPostBody *SamlProviderPostBody
}

// LdapProviderPostBodyAsIdpPostBody is a convenience function that returns LdapProviderPostBody wrapped in IdpPostBody
func LdapProviderPostBodyAsIdpPostBody(v *LdapProviderPostBody) IdpPostBody {
	return IdpPostBody{
		LdapProviderPostBody: v,
	}
}

// OpenIDProviderDynamicPostBodyAsIdpPostBody is a convenience function that returns OpenIDProviderDynamicPostBody wrapped in IdpPostBody
func OpenIDProviderDynamicPostBodyAsIdpPostBody(v *OpenIDProviderDynamicPostBody) IdpPostBody {
	return IdpPostBody{
		OpenIDProviderDynamicPostBody: v,
	}
}

// OpenIDProviderManualPostBodyAsIdpPostBody is a convenience function that returns OpenIDProviderManualPostBody wrapped in IdpPostBody
func OpenIDProviderManualPostBodyAsIdpPostBody(v *OpenIDProviderManualPostBody) IdpPostBody {
	return IdpPostBody{
		OpenIDProviderManualPostBody: v,
	}
}

// SamlProviderPostBodyAsIdpPostBody is a convenience function that returns SamlProviderPostBody wrapped in IdpPostBody
func SamlProviderPostBodyAsIdpPostBody(v *SamlProviderPostBody) IdpPostBody {
	return IdpPostBody{
		SamlProviderPostBody: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IdpPostBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LdapProviderPostBody
	err = newStrictDecoder(data).Decode(&dst.LdapProviderPostBody)
	if err == nil {
		jsonLdapProviderPostBody, _ := json.Marshal(dst.LdapProviderPostBody)
		if string(jsonLdapProviderPostBody) == "{}" { // empty struct
			dst.LdapProviderPostBody = nil
		} else {
			match++
		}
	} else {
		dst.LdapProviderPostBody = nil
	}

	// try to unmarshal data into OpenIDProviderDynamicPostBody
	err = newStrictDecoder(data).Decode(&dst.OpenIDProviderDynamicPostBody)
	if err == nil {
		jsonOpenIDProviderDynamicPostBody, _ := json.Marshal(dst.OpenIDProviderDynamicPostBody)
		if string(jsonOpenIDProviderDynamicPostBody) == "{}" { // empty struct
			dst.OpenIDProviderDynamicPostBody = nil
		} else {
			match++
		}
	} else {
		dst.OpenIDProviderDynamicPostBody = nil
	}

	// try to unmarshal data into OpenIDProviderManualPostBody
	err = newStrictDecoder(data).Decode(&dst.OpenIDProviderManualPostBody)
	if err == nil {
		jsonOpenIDProviderManualPostBody, _ := json.Marshal(dst.OpenIDProviderManualPostBody)
		if string(jsonOpenIDProviderManualPostBody) == "{}" { // empty struct
			dst.OpenIDProviderManualPostBody = nil
		} else {
			match++
		}
	} else {
		dst.OpenIDProviderManualPostBody = nil
	}

	// try to unmarshal data into SamlProviderPostBody
	err = newStrictDecoder(data).Decode(&dst.SamlProviderPostBody)
	if err == nil {
		jsonSamlProviderPostBody, _ := json.Marshal(dst.SamlProviderPostBody)
		if string(jsonSamlProviderPostBody) == "{}" { // empty struct
			dst.SamlProviderPostBody = nil
		} else {
			match++
		}
	} else {
		dst.SamlProviderPostBody = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LdapProviderPostBody = nil
		dst.OpenIDProviderDynamicPostBody = nil
		dst.OpenIDProviderManualPostBody = nil
		dst.SamlProviderPostBody = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IdpPostBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IdpPostBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IdpPostBody) MarshalJSON() ([]byte, error) {
	if src.LdapProviderPostBody != nil {
		return json.Marshal(&src.LdapProviderPostBody)
	}

	if src.OpenIDProviderDynamicPostBody != nil {
		return json.Marshal(&src.OpenIDProviderDynamicPostBody)
	}

	if src.OpenIDProviderManualPostBody != nil {
		return json.Marshal(&src.OpenIDProviderManualPostBody)
	}

	if src.SamlProviderPostBody != nil {
		return json.Marshal(&src.SamlProviderPostBody)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IdpPostBody) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LdapProviderPostBody != nil {
		return obj.LdapProviderPostBody
	}

	if obj.OpenIDProviderDynamicPostBody != nil {
		return obj.OpenIDProviderDynamicPostBody
	}

	if obj.OpenIDProviderManualPostBody != nil {
		return obj.OpenIDProviderManualPostBody
	}

	if obj.SamlProviderPostBody != nil {
		return obj.SamlProviderPostBody
	}

	// all schemas are nil
	return nil
}

type NullableIdpPostBody struct {
	value *IdpPostBody
	isSet bool
}

func (v NullableIdpPostBody) Get() *IdpPostBody {
	return v.value
}

func (v *NullableIdpPostBody) Set(val *IdpPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpPostBody(val *IdpPostBody) *NullableIdpPostBody {
	return &NullableIdpPostBody{value: val, isSet: true}
}

func (v NullableIdpPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


