/*
Identity Provider Management API

Description of Identity Provider API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
)

// checks if the Urls3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Urls3{}

// Urls3 struct for Urls3
type Urls3 struct {
	Authorize *string `json:"authorize,omitempty"`
	Token *string `json:"token,omitempty"`
	Userinfo *string `json:"userinfo,omitempty"`
}

// NewUrls3 instantiates a new Urls3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrls3() *Urls3 {
	this := Urls3{}
	return &this
}

// NewUrls3WithDefaults instantiates a new Urls3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrls3WithDefaults() *Urls3 {
	this := Urls3{}
	return &this
}

// GetAuthorize returns the Authorize field value if set, zero value otherwise.
func (o *Urls3) GetAuthorize() string {
	if o == nil || IsNil(o.Authorize) {
		var ret string
		return ret
	}
	return *o.Authorize
}

// GetAuthorizeOk returns a tuple with the Authorize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Urls3) GetAuthorizeOk() (*string, bool) {
	if o == nil || IsNil(o.Authorize) {
		return nil, false
	}
	return o.Authorize, true
}

// HasAuthorize returns a boolean if a field has been set.
func (o *Urls3) HasAuthorize() bool {
	if o != nil && !IsNil(o.Authorize) {
		return true
	}

	return false
}

// SetAuthorize gets a reference to the given string and assigns it to the Authorize field.
func (o *Urls3) SetAuthorize(v string) {
	o.Authorize = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *Urls3) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Urls3) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *Urls3) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *Urls3) SetToken(v string) {
	o.Token = &v
}

// GetUserinfo returns the Userinfo field value if set, zero value otherwise.
func (o *Urls3) GetUserinfo() string {
	if o == nil || IsNil(o.Userinfo) {
		var ret string
		return ret
	}
	return *o.Userinfo
}

// GetUserinfoOk returns a tuple with the Userinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Urls3) GetUserinfoOk() (*string, bool) {
	if o == nil || IsNil(o.Userinfo) {
		return nil, false
	}
	return o.Userinfo, true
}

// HasUserinfo returns a boolean if a field has been set.
func (o *Urls3) HasUserinfo() bool {
	if o != nil && !IsNil(o.Userinfo) {
		return true
	}

	return false
}

// SetUserinfo gets a reference to the given string and assigns it to the Userinfo field.
func (o *Urls3) SetUserinfo(v string) {
	o.Userinfo = &v
}

func (o Urls3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Urls3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authorize) {
		toSerialize["authorize"] = o.Authorize
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Userinfo) {
		toSerialize["userinfo"] = o.Userinfo
	}
	return toSerialize, nil
}

type NullableUrls3 struct {
	value *Urls3
	isSet bool
}

func (v NullableUrls3) Get() *Urls3 {
	return v.value
}

func (v *NullableUrls3) Set(val *Urls3) {
	v.value = val
	v.isSet = true
}

func (v NullableUrls3) IsSet() bool {
	return v.isSet
}

func (v *NullableUrls3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrls3(val *Urls3) *NullableUrls3 {
	return &NullableUrls3{value: val, isSet: true}
}

func (v NullableUrls3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrls3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


