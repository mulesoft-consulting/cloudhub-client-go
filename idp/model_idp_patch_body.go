/*
Identity Provider Management API

Description of Identity Provider API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
	"fmt"
)

// IdpPatchBody - struct for IdpPatchBody
type IdpPatchBody struct {
	LdapProviderPatch *LdapProviderPatch
	OpenIDProviderPatch *OpenIDProviderPatch
	SamlProviderPatch *SamlProviderPatch
}

// LdapProviderPatchAsIdpPatchBody is a convenience function that returns LdapProviderPatch wrapped in IdpPatchBody
func LdapProviderPatchAsIdpPatchBody(v *LdapProviderPatch) IdpPatchBody {
	return IdpPatchBody{
		LdapProviderPatch: v,
	}
}

// OpenIDProviderPatchAsIdpPatchBody is a convenience function that returns OpenIDProviderPatch wrapped in IdpPatchBody
func OpenIDProviderPatchAsIdpPatchBody(v *OpenIDProviderPatch) IdpPatchBody {
	return IdpPatchBody{
		OpenIDProviderPatch: v,
	}
}

// SamlProviderPatchAsIdpPatchBody is a convenience function that returns SamlProviderPatch wrapped in IdpPatchBody
func SamlProviderPatchAsIdpPatchBody(v *SamlProviderPatch) IdpPatchBody {
	return IdpPatchBody{
		SamlProviderPatch: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IdpPatchBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LdapProviderPatch
	err = newStrictDecoder(data).Decode(&dst.LdapProviderPatch)
	if err == nil {
		jsonLdapProviderPatch, _ := json.Marshal(dst.LdapProviderPatch)
		if string(jsonLdapProviderPatch) == "{}" { // empty struct
			dst.LdapProviderPatch = nil
		} else {
			match++
		}
	} else {
		dst.LdapProviderPatch = nil
	}

	// try to unmarshal data into OpenIDProviderPatch
	err = newStrictDecoder(data).Decode(&dst.OpenIDProviderPatch)
	if err == nil {
		jsonOpenIDProviderPatch, _ := json.Marshal(dst.OpenIDProviderPatch)
		if string(jsonOpenIDProviderPatch) == "{}" { // empty struct
			dst.OpenIDProviderPatch = nil
		} else {
			match++
		}
	} else {
		dst.OpenIDProviderPatch = nil
	}

	// try to unmarshal data into SamlProviderPatch
	err = newStrictDecoder(data).Decode(&dst.SamlProviderPatch)
	if err == nil {
		jsonSamlProviderPatch, _ := json.Marshal(dst.SamlProviderPatch)
		if string(jsonSamlProviderPatch) == "{}" { // empty struct
			dst.SamlProviderPatch = nil
		} else {
			match++
		}
	} else {
		dst.SamlProviderPatch = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LdapProviderPatch = nil
		dst.OpenIDProviderPatch = nil
		dst.SamlProviderPatch = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IdpPatchBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IdpPatchBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IdpPatchBody) MarshalJSON() ([]byte, error) {
	if src.LdapProviderPatch != nil {
		return json.Marshal(&src.LdapProviderPatch)
	}

	if src.OpenIDProviderPatch != nil {
		return json.Marshal(&src.OpenIDProviderPatch)
	}

	if src.SamlProviderPatch != nil {
		return json.Marshal(&src.SamlProviderPatch)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IdpPatchBody) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LdapProviderPatch != nil {
		return obj.LdapProviderPatch
	}

	if obj.OpenIDProviderPatch != nil {
		return obj.OpenIDProviderPatch
	}

	if obj.SamlProviderPatch != nil {
		return obj.SamlProviderPatch
	}

	// all schemas are nil
	return nil
}

type NullableIdpPatchBody struct {
	value *IdpPatchBody
	isSet bool
}

func (v NullableIdpPatchBody) Get() *IdpPatchBody {
	return v.value
}

func (v *NullableIdpPatchBody) Set(val *IdpPatchBody) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpPatchBody) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpPatchBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpPatchBody(val *IdpPatchBody) *NullableIdpPatchBody {
	return &NullableIdpPatchBody{value: val, isSet: true}
}

func (v NullableIdpPatchBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpPatchBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


