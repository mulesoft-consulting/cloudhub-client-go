/*
Identity Provider Management API

Description of Identity Provider API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
)

// checks if the SamlProviderPostBodyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SamlProviderPostBodyType{}

// SamlProviderPostBodyType struct for SamlProviderPostBodyType
type SamlProviderPostBodyType struct {
	Description *string `json:"description,omitempty"`
	Name string `json:"name"`
}

// NewSamlProviderPostBodyType instantiates a new SamlProviderPostBodyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamlProviderPostBodyType(name string) *SamlProviderPostBodyType {
	this := SamlProviderPostBodyType{}
	this.Name = name
	return &this
}

// NewSamlProviderPostBodyTypeWithDefaults instantiates a new SamlProviderPostBodyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamlProviderPostBodyTypeWithDefaults() *SamlProviderPostBodyType {
	this := SamlProviderPostBodyType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SamlProviderPostBodyType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamlProviderPostBodyType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SamlProviderPostBodyType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SamlProviderPostBodyType) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *SamlProviderPostBodyType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SamlProviderPostBodyType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SamlProviderPostBodyType) SetName(v string) {
	o.Name = v
}

func (o SamlProviderPostBodyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SamlProviderPostBodyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableSamlProviderPostBodyType struct {
	value *SamlProviderPostBodyType
	isSet bool
}

func (v NullableSamlProviderPostBodyType) Get() *SamlProviderPostBodyType {
	return v.value
}

func (v *NullableSamlProviderPostBodyType) Set(val *SamlProviderPostBodyType) {
	v.value = val
	v.isSet = true
}

func (v NullableSamlProviderPostBodyType) IsSet() bool {
	return v.isSet
}

func (v *NullableSamlProviderPostBodyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamlProviderPostBodyType(val *SamlProviderPostBodyType) *NullableSamlProviderPostBodyType {
	return &NullableSamlProviderPostBodyType{value: val, isSet: true}
}

func (v NullableSamlProviderPostBodyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamlProviderPostBodyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


