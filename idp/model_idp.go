/*
Identity Provider Management API

Description of Identity Provider API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idp

import (
	"encoding/json"
	"fmt"
)

// Idp - struct for Idp
type Idp struct {
	LdapProviderGet *LdapProviderGet
	OpenIDProviderGet *OpenIDProviderGet
	SamlProviderGet *SamlProviderGet
}

// LdapProviderGetAsIdp is a convenience function that returns LdapProviderGet wrapped in Idp
func LdapProviderGetAsIdp(v *LdapProviderGet) Idp {
	return Idp{
		LdapProviderGet: v,
	}
}

// OpenIDProviderGetAsIdp is a convenience function that returns OpenIDProviderGet wrapped in Idp
func OpenIDProviderGetAsIdp(v *OpenIDProviderGet) Idp {
	return Idp{
		OpenIDProviderGet: v,
	}
}

// SamlProviderGetAsIdp is a convenience function that returns SamlProviderGet wrapped in Idp
func SamlProviderGetAsIdp(v *SamlProviderGet) Idp {
	return Idp{
		SamlProviderGet: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Idp) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LdapProviderGet
	err = newStrictDecoder(data).Decode(&dst.LdapProviderGet)
	if err == nil {
		jsonLdapProviderGet, _ := json.Marshal(dst.LdapProviderGet)
		if string(jsonLdapProviderGet) == "{}" { // empty struct
			dst.LdapProviderGet = nil
		} else {
			match++
		}
	} else {
		dst.LdapProviderGet = nil
	}

	// try to unmarshal data into OpenIDProviderGet
	err = newStrictDecoder(data).Decode(&dst.OpenIDProviderGet)
	if err == nil {
		jsonOpenIDProviderGet, _ := json.Marshal(dst.OpenIDProviderGet)
		if string(jsonOpenIDProviderGet) == "{}" { // empty struct
			dst.OpenIDProviderGet = nil
		} else {
			match++
		}
	} else {
		dst.OpenIDProviderGet = nil
	}

	// try to unmarshal data into SamlProviderGet
	err = newStrictDecoder(data).Decode(&dst.SamlProviderGet)
	if err == nil {
		jsonSamlProviderGet, _ := json.Marshal(dst.SamlProviderGet)
		if string(jsonSamlProviderGet) == "{}" { // empty struct
			dst.SamlProviderGet = nil
		} else {
			match++
		}
	} else {
		dst.SamlProviderGet = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LdapProviderGet = nil
		dst.OpenIDProviderGet = nil
		dst.SamlProviderGet = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Idp)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Idp)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Idp) MarshalJSON() ([]byte, error) {
	if src.LdapProviderGet != nil {
		return json.Marshal(&src.LdapProviderGet)
	}

	if src.OpenIDProviderGet != nil {
		return json.Marshal(&src.OpenIDProviderGet)
	}

	if src.SamlProviderGet != nil {
		return json.Marshal(&src.SamlProviderGet)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Idp) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LdapProviderGet != nil {
		return obj.LdapProviderGet
	}

	if obj.OpenIDProviderGet != nil {
		return obj.OpenIDProviderGet
	}

	if obj.SamlProviderGet != nil {
		return obj.SamlProviderGet
	}

	// all schemas are nil
	return nil
}

type NullableIdp struct {
	value *Idp
	isSet bool
}

func (v NullableIdp) Get() *Idp {
	return v.value
}

func (v *NullableIdp) Set(val *Idp) {
	v.value = val
	v.isSet = true
}

func (v NullableIdp) IsSet() bool {
	return v.isSet
}

func (v *NullableIdp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdp(val *Idp) *NullableIdp {
	return &NullableIdp{value: val, isSet: true}
}

func (v NullableIdp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


