/*
Alert API Manager

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apim_alerts

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/apim_alerts"
)

func Test_apim_alerts_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService CreateAlertForAPIManagerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiVersion string

		resp, httpRes, err := apiClient.DefaultApi.CreateAlertForAPIManagerInstance(context.Background(), orgId, envId, apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteanAlertfromAPImanager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiVersion string
		var alertId string

		httpRes, err := apiClient.DefaultApi.DeleteanAlertfromAPImanager(context.Background(), orgId, envId, apiVersion, alertId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ModifyonealertfromAPImanger", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiVersion string
		var alertId string

		resp, httpRes, err := apiClient.DefaultApi.ModifyonealertfromAPImanger(context.Background(), orgId, envId, apiVersion, alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiVersion string
		var alertId string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGet(context.Background(), orgId, envId, apiVersion, alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiVersion string

		resp, httpRes, err := apiClient.DefaultApi.OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGet(context.Background(), orgId, envId, apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
