/*
Alert API Manager

Alert for API Manager

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_alerts

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiCreateAlertForAPIManagerInstanceRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiVersion string
	alertCore *AlertCore
}

// 
func (r DefaultApiCreateAlertForAPIManagerInstanceRequest) AlertCore(alertCore AlertCore) DefaultApiCreateAlertForAPIManagerInstanceRequest {
	r.alertCore = &alertCore
	return r
}

func (r DefaultApiCreateAlertForAPIManagerInstanceRequest) Execute() (*Alert, *http.Response, error) {
	return r.ApiService.CreateAlertForAPIManagerInstanceExecute(r)
}

/*
CreateAlertForAPIManagerInstance Method for CreateAlertForAPIManagerInstance

Create a new alert for API manager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param apiVersion The api version
 @return DefaultApiCreateAlertForAPIManagerInstanceRequest
*/
func (a *DefaultApiService) CreateAlertForAPIManagerInstance(ctx context.Context, orgId string, envId string, apiVersion string) DefaultApiCreateAlertForAPIManagerInstanceRequest {
	return DefaultApiCreateAlertForAPIManagerInstanceRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiVersion: apiVersion,
	}
}

// Execute executes the request
//  @return Alert
func (a *DefaultApiService) CreateAlertForAPIManagerInstanceExecute(r DefaultApiCreateAlertForAPIManagerInstanceRequest) (*Alert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.CreateAlertForAPIManagerInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{apiVersion}/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiVersion"+"}", url.PathEscape(parameterValueToString(r.apiVersion, "apiVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alertCore
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiDeleteanAlertfromAPImanagerRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiVersion string
	alertId string
}

func (r DefaultApiDeleteanAlertfromAPImanagerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteanAlertfromAPImanagerExecute(r)
}

/*
DeleteanAlertfromAPImanager DeleteanAlertfromAPImanager

Delete an Alert from API manager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId the environment id
 @param apiVersion the api version
 @param alertId the id of the alert
 @return DefaultApiDeleteanAlertfromAPImanagerRequest
*/
func (a *DefaultApiService) DeleteanAlertfromAPImanager(ctx context.Context, orgId string, envId string, apiVersion string, alertId string) DefaultApiDeleteanAlertfromAPImanagerRequest {
	return DefaultApiDeleteanAlertfromAPImanagerRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiVersion: apiVersion,
		alertId: alertId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DeleteanAlertfromAPImanagerExecute(r DefaultApiDeleteanAlertfromAPImanagerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteanAlertfromAPImanager")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{apiVersion}/alerts/{alertId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiVersion"+"}", url.PathEscape(parameterValueToString(r.apiVersion, "apiVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alertId"+"}", url.PathEscape(parameterValueToString(r.alertId, "alertId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiModifyonealertfromAPImangerRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiVersion string
	alertId string
	alertCore *AlertCore
}

func (r DefaultApiModifyonealertfromAPImangerRequest) AlertCore(alertCore AlertCore) DefaultApiModifyonealertfromAPImangerRequest {
	r.alertCore = &alertCore
	return r
}

func (r DefaultApiModifyonealertfromAPImangerRequest) Execute() (*Alert, *http.Response, error) {
	return r.ApiService.ModifyonealertfromAPImangerExecute(r)
}

/*
ModifyonealertfromAPImanger ModifyonealertfromAPImanger

Modify one alert from API manger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId the environment id
 @param apiVersion the api version
 @param alertId the id of the alert
 @return DefaultApiModifyonealertfromAPImangerRequest
*/
func (a *DefaultApiService) ModifyonealertfromAPImanger(ctx context.Context, orgId string, envId string, apiVersion string, alertId string) DefaultApiModifyonealertfromAPImangerRequest {
	return DefaultApiModifyonealertfromAPImangerRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiVersion: apiVersion,
		alertId: alertId,
	}
}

// Execute executes the request
//  @return Alert
func (a *DefaultApiService) ModifyonealertfromAPImangerExecute(r DefaultApiModifyonealertfromAPImangerRequest) (*Alert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ModifyonealertfromAPImanger")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{apiVersion}/alerts/{alertId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiVersion"+"}", url.PathEscape(parameterValueToString(r.apiVersion, "apiVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alertId"+"}", url.PathEscape(parameterValueToString(r.alertId, "alertId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.alertCore
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiVersion string
	alertId string
}

func (r DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetRequest) Execute() (*Alert, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetExecute(r)
}

/*
OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGet Getonealert

Get one alert

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId the environment id
 @param apiVersion the api version
 @param alertId the id of the alert
 @return DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGet(ctx context.Context, orgId string, envId string, apiVersion string, alertId string) DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetRequest {
	return DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiVersion: apiVersion,
		alertId: alertId,
	}
}

// Execute executes the request
//  @return Alert
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetExecute(r DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGetRequest) (*Alert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsAlertIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{apiVersion}/alerts/{alertId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiVersion"+"}", url.PathEscape(parameterValueToString(r.apiVersion, "apiVersion")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alertId"+"}", url.PathEscape(parameterValueToString(r.alertId, "alertId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apiVersion string
}

func (r DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetRequest) Execute() ([]Alert, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetExecute(r)
}

/*
OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGet GetAlertsfromAPImanager

Get Alerts from API manager

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param apiVersion The api version
 @return DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGet(ctx context.Context, orgId string, envId string, apiVersion string) DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetRequest {
	return DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		apiVersion: apiVersion,
	}
}

// Execute executes the request
//  @return []Alert
func (a *DefaultApiService) OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetExecute(r DefaultApiOrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGetRequest) ([]Alert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Alert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdEnvironmentsEnvIdApisApiVersionAlertsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{apiVersion}/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"apiVersion"+"}", url.PathEscape(parameterValueToString(r.apiVersion, "apiVersion")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
