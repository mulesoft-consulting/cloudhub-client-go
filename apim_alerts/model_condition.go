/*
Alert API Manager

Alert for API Manager

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_alerts

import (
	"encoding/json"
)

// checks if the Condition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Condition{}

// Condition struct for Condition
type Condition struct {
	ResourceType string `json:"resourceType"`
	Aggregate string `json:"aggregate"`
	Operator string `json:"operator"`
	Value int32 `json:"value"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition(resourceType string, aggregate string, operator string, value int32) *Condition {
	this := Condition{}
	this.ResourceType = resourceType
	this.Aggregate = aggregate
	this.Operator = operator
	this.Value = value
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetResourceType returns the ResourceType field value
func (o *Condition) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *Condition) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *Condition) SetResourceType(v string) {
	o.ResourceType = v
}

// GetAggregate returns the Aggregate field value
func (o *Condition) GetAggregate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Aggregate
}

// GetAggregateOk returns a tuple with the Aggregate field value
// and a boolean to check if the value has been set.
func (o *Condition) GetAggregateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregate, true
}

// SetAggregate sets field value
func (o *Condition) SetAggregate(v string) {
	o.Aggregate = v
}

// GetOperator returns the Operator field value
func (o *Condition) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *Condition) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *Condition) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *Condition) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Condition) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Condition) SetValue(v int32) {
	o.Value = v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Condition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceType"] = o.ResourceType
	toSerialize["aggregate"] = o.Aggregate
	toSerialize["operator"] = o.Operator
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


