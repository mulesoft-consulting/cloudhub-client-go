/*
Secret Group Truststore API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package secretgroup_truststore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/secretgroup_truststore"
)

func Test_secretgroup_truststore_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService GetSecretGroupTruststoreDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var secretGroupId string
		var secretId string

		resp, httpRes, err := apiClient.DefaultApi.GetSecretGroupTruststoreDetails(context.Background(), orgId, envId, secretGroupId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSecretGroupTruststores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var secretGroupId string

		resp, httpRes, err := apiClient.DefaultApi.GetSecretGroupTruststores(context.Background(), orgId, envId, secretGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchSecretGroupTruststore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var secretGroupId string
		var secretId string

		resp, httpRes, err := apiClient.DefaultApi.PatchSecretGroupTruststore(context.Background(), orgId, envId, secretGroupId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PostSecretGroupTruststore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var secretGroupId string

		resp, httpRes, err := apiClient.DefaultApi.PostSecretGroupTruststore(context.Background(), orgId, envId, secretGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutSecretGroupTruststore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var secretGroupId string
		var secretId string

		resp, httpRes, err := apiClient.DefaultApi.PutSecretGroupTruststore(context.Background(), orgId, envId, secretGroupId, secretId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
