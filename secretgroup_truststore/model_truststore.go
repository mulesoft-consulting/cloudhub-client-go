/*
Secret Group Truststore API

Secret Group Truststore API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_truststore

import (
	"encoding/json"
)

// checks if the Truststore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Truststore{}

// Truststore struct for Truststore
type Truststore struct {
	Name *string `json:"name,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
	Meta *Meta `json:"meta,omitempty"`
	// Type of truststore supported
	Type *string `json:"type,omitempty"`
	Details *TruststoreDetails `json:"details,omitempty"`
	// File name of the truststore that is stored in this secret
	TruststoreFileName *string `json:"truststoreFileName,omitempty"`
	// Algorithm used to create the truststore manager factory which will make use of this truststore
	Algorithm *string `json:"algorithm,omitempty"`
}

// NewTruststore instantiates a new Truststore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTruststore() *Truststore {
	this := Truststore{}
	return &this
}

// NewTruststoreWithDefaults instantiates a new Truststore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTruststoreWithDefaults() *Truststore {
	this := Truststore{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Truststore) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Truststore) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Truststore) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Truststore) SetName(v string) {
	o.Name = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Truststore) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Truststore) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Truststore) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *Truststore) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Truststore) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Truststore) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Truststore) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Truststore) SetMeta(v Meta) {
	o.Meta = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Truststore) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Truststore) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Truststore) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Truststore) SetType(v string) {
	o.Type = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Truststore) GetDetails() TruststoreDetails {
	if o == nil || IsNil(o.Details) {
		var ret TruststoreDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Truststore) GetDetailsOk() (*TruststoreDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Truststore) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given TruststoreDetails and assigns it to the Details field.
func (o *Truststore) SetDetails(v TruststoreDetails) {
	o.Details = &v
}

// GetTruststoreFileName returns the TruststoreFileName field value if set, zero value otherwise.
func (o *Truststore) GetTruststoreFileName() string {
	if o == nil || IsNil(o.TruststoreFileName) {
		var ret string
		return ret
	}
	return *o.TruststoreFileName
}

// GetTruststoreFileNameOk returns a tuple with the TruststoreFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Truststore) GetTruststoreFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.TruststoreFileName) {
		return nil, false
	}
	return o.TruststoreFileName, true
}

// HasTruststoreFileName returns a boolean if a field has been set.
func (o *Truststore) HasTruststoreFileName() bool {
	if o != nil && !IsNil(o.TruststoreFileName) {
		return true
	}

	return false
}

// SetTruststoreFileName gets a reference to the given string and assigns it to the TruststoreFileName field.
func (o *Truststore) SetTruststoreFileName(v string) {
	o.TruststoreFileName = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *Truststore) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Truststore) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *Truststore) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *Truststore) SetAlgorithm(v string) {
	o.Algorithm = &v
}

func (o Truststore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Truststore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.TruststoreFileName) {
		toSerialize["truststoreFileName"] = o.TruststoreFileName
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	return toSerialize, nil
}

type NullableTruststore struct {
	value *Truststore
	isSet bool
}

func (v NullableTruststore) Get() *Truststore {
	return v.value
}

func (v *NullableTruststore) Set(val *Truststore) {
	v.value = val
	v.isSet = true
}

func (v NullableTruststore) IsSet() bool {
	return v.isSet
}

func (v *NullableTruststore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTruststore(val *Truststore) *NullableTruststore {
	return &NullableTruststore{value: val, isSet: true}
}

func (v NullableTruststore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTruststore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


