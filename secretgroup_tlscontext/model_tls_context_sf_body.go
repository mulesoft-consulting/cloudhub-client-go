/*
Secret Group TLS Context API

Secret Group TLS Context API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_tlscontext

import (
	"encoding/json"
)

// checks if the TlsContextSfBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TlsContextSfBody{}

// TlsContextSfBody struct for TlsContextSfBody
type TlsContextSfBody struct {
	// Date on which this secret should expire. If not set, by default, it will be set to one year from the date on which this secret is created/updated. Once the secret expires, a grant can not be requested for it. 
	ExpirationDate *string `json:"expirationDate,omitempty"`
	Name *string `json:"name,omitempty"`
	AcceptableTlsVersions *AcceptableTlsVersions `json:"acceptableTlsVersions,omitempty"`
	AcceptableCipherSuites *AcceptableCipherSuites `json:"acceptableCipherSuites,omitempty"`
	MutualAuthentication *MutualAuthentication `json:"mutualAuthentication,omitempty"`
	// This flag is to enable client authentication. To set this flag to true, both keystore and truststore must be set.
	EnableMutualAuthentication *bool `json:"enableMutualAuthentication,omitempty"`
	// The target engine
	Target *string `json:"target,omitempty"`
	Keystore *SecretPath `json:"keystore,omitempty"`
	Truststore *SecretPath `json:"truststore,omitempty"`
}

// NewTlsContextSfBody instantiates a new TlsContextSfBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTlsContextSfBody() *TlsContextSfBody {
	this := TlsContextSfBody{}
	return &this
}

// NewTlsContextSfBodyWithDefaults instantiates a new TlsContextSfBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTlsContextSfBodyWithDefaults() *TlsContextSfBody {
	this := TlsContextSfBody{}
	return &this
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *TlsContextSfBody) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TlsContextSfBody) SetName(v string) {
	o.Name = &v
}

// GetAcceptableTlsVersions returns the AcceptableTlsVersions field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetAcceptableTlsVersions() AcceptableTlsVersions {
	if o == nil || IsNil(o.AcceptableTlsVersions) {
		var ret AcceptableTlsVersions
		return ret
	}
	return *o.AcceptableTlsVersions
}

// GetAcceptableTlsVersionsOk returns a tuple with the AcceptableTlsVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetAcceptableTlsVersionsOk() (*AcceptableTlsVersions, bool) {
	if o == nil || IsNil(o.AcceptableTlsVersions) {
		return nil, false
	}
	return o.AcceptableTlsVersions, true
}

// HasAcceptableTlsVersions returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasAcceptableTlsVersions() bool {
	if o != nil && !IsNil(o.AcceptableTlsVersions) {
		return true
	}

	return false
}

// SetAcceptableTlsVersions gets a reference to the given AcceptableTlsVersions and assigns it to the AcceptableTlsVersions field.
func (o *TlsContextSfBody) SetAcceptableTlsVersions(v AcceptableTlsVersions) {
	o.AcceptableTlsVersions = &v
}

// GetAcceptableCipherSuites returns the AcceptableCipherSuites field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetAcceptableCipherSuites() AcceptableCipherSuites {
	if o == nil || IsNil(o.AcceptableCipherSuites) {
		var ret AcceptableCipherSuites
		return ret
	}
	return *o.AcceptableCipherSuites
}

// GetAcceptableCipherSuitesOk returns a tuple with the AcceptableCipherSuites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetAcceptableCipherSuitesOk() (*AcceptableCipherSuites, bool) {
	if o == nil || IsNil(o.AcceptableCipherSuites) {
		return nil, false
	}
	return o.AcceptableCipherSuites, true
}

// HasAcceptableCipherSuites returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasAcceptableCipherSuites() bool {
	if o != nil && !IsNil(o.AcceptableCipherSuites) {
		return true
	}

	return false
}

// SetAcceptableCipherSuites gets a reference to the given AcceptableCipherSuites and assigns it to the AcceptableCipherSuites field.
func (o *TlsContextSfBody) SetAcceptableCipherSuites(v AcceptableCipherSuites) {
	o.AcceptableCipherSuites = &v
}

// GetMutualAuthentication returns the MutualAuthentication field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetMutualAuthentication() MutualAuthentication {
	if o == nil || IsNil(o.MutualAuthentication) {
		var ret MutualAuthentication
		return ret
	}
	return *o.MutualAuthentication
}

// GetMutualAuthenticationOk returns a tuple with the MutualAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetMutualAuthenticationOk() (*MutualAuthentication, bool) {
	if o == nil || IsNil(o.MutualAuthentication) {
		return nil, false
	}
	return o.MutualAuthentication, true
}

// HasMutualAuthentication returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasMutualAuthentication() bool {
	if o != nil && !IsNil(o.MutualAuthentication) {
		return true
	}

	return false
}

// SetMutualAuthentication gets a reference to the given MutualAuthentication and assigns it to the MutualAuthentication field.
func (o *TlsContextSfBody) SetMutualAuthentication(v MutualAuthentication) {
	o.MutualAuthentication = &v
}

// GetEnableMutualAuthentication returns the EnableMutualAuthentication field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetEnableMutualAuthentication() bool {
	if o == nil || IsNil(o.EnableMutualAuthentication) {
		var ret bool
		return ret
	}
	return *o.EnableMutualAuthentication
}

// GetEnableMutualAuthenticationOk returns a tuple with the EnableMutualAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetEnableMutualAuthenticationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMutualAuthentication) {
		return nil, false
	}
	return o.EnableMutualAuthentication, true
}

// HasEnableMutualAuthentication returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasEnableMutualAuthentication() bool {
	if o != nil && !IsNil(o.EnableMutualAuthentication) {
		return true
	}

	return false
}

// SetEnableMutualAuthentication gets a reference to the given bool and assigns it to the EnableMutualAuthentication field.
func (o *TlsContextSfBody) SetEnableMutualAuthentication(v bool) {
	o.EnableMutualAuthentication = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *TlsContextSfBody) SetTarget(v string) {
	o.Target = &v
}

// GetKeystore returns the Keystore field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetKeystore() SecretPath {
	if o == nil || IsNil(o.Keystore) {
		var ret SecretPath
		return ret
	}
	return *o.Keystore
}

// GetKeystoreOk returns a tuple with the Keystore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetKeystoreOk() (*SecretPath, bool) {
	if o == nil || IsNil(o.Keystore) {
		return nil, false
	}
	return o.Keystore, true
}

// HasKeystore returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasKeystore() bool {
	if o != nil && !IsNil(o.Keystore) {
		return true
	}

	return false
}

// SetKeystore gets a reference to the given SecretPath and assigns it to the Keystore field.
func (o *TlsContextSfBody) SetKeystore(v SecretPath) {
	o.Keystore = &v
}

// GetTruststore returns the Truststore field value if set, zero value otherwise.
func (o *TlsContextSfBody) GetTruststore() SecretPath {
	if o == nil || IsNil(o.Truststore) {
		var ret SecretPath
		return ret
	}
	return *o.Truststore
}

// GetTruststoreOk returns a tuple with the Truststore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TlsContextSfBody) GetTruststoreOk() (*SecretPath, bool) {
	if o == nil || IsNil(o.Truststore) {
		return nil, false
	}
	return o.Truststore, true
}

// HasTruststore returns a boolean if a field has been set.
func (o *TlsContextSfBody) HasTruststore() bool {
	if o != nil && !IsNil(o.Truststore) {
		return true
	}

	return false
}

// SetTruststore gets a reference to the given SecretPath and assigns it to the Truststore field.
func (o *TlsContextSfBody) SetTruststore(v SecretPath) {
	o.Truststore = &v
}

func (o TlsContextSfBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TlsContextSfBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AcceptableTlsVersions) {
		toSerialize["acceptableTlsVersions"] = o.AcceptableTlsVersions
	}
	if !IsNil(o.AcceptableCipherSuites) {
		toSerialize["acceptableCipherSuites"] = o.AcceptableCipherSuites
	}
	if !IsNil(o.MutualAuthentication) {
		toSerialize["mutualAuthentication"] = o.MutualAuthentication
	}
	if !IsNil(o.EnableMutualAuthentication) {
		toSerialize["enableMutualAuthentication"] = o.EnableMutualAuthentication
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Keystore) {
		toSerialize["keystore"] = o.Keystore
	}
	if !IsNil(o.Truststore) {
		toSerialize["truststore"] = o.Truststore
	}
	return toSerialize, nil
}

type NullableTlsContextSfBody struct {
	value *TlsContextSfBody
	isSet bool
}

func (v NullableTlsContextSfBody) Get() *TlsContextSfBody {
	return v.value
}

func (v *NullableTlsContextSfBody) Set(val *TlsContextSfBody) {
	v.value = val
	v.isSet = true
}

func (v NullableTlsContextSfBody) IsSet() bool {
	return v.isSet
}

func (v *NullableTlsContextSfBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTlsContextSfBody(val *TlsContextSfBody) *NullableTlsContextSfBody {
	return &NullableTlsContextSfBody{value: val, isSet: true}
}

func (v NullableTlsContextSfBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTlsContextSfBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


