/*
Secret Group TLS Context API

Secret Group TLS Context API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_tlscontext

import (
	"encoding/json"
)

// checks if the CertificatePinning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificatePinning{}

// CertificatePinning struct for CertificatePinning
type CertificatePinning struct {
	PerformCertificatePinning *bool `json:"performCertificatePinning,omitempty"`
	CertificatePinset *SecretPath `json:"certificatePinset,omitempty"`
}

// NewCertificatePinning instantiates a new CertificatePinning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatePinning() *CertificatePinning {
	this := CertificatePinning{}
	return &this
}

// NewCertificatePinningWithDefaults instantiates a new CertificatePinning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatePinningWithDefaults() *CertificatePinning {
	this := CertificatePinning{}
	return &this
}

// GetPerformCertificatePinning returns the PerformCertificatePinning field value if set, zero value otherwise.
func (o *CertificatePinning) GetPerformCertificatePinning() bool {
	if o == nil || IsNil(o.PerformCertificatePinning) {
		var ret bool
		return ret
	}
	return *o.PerformCertificatePinning
}

// GetPerformCertificatePinningOk returns a tuple with the PerformCertificatePinning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatePinning) GetPerformCertificatePinningOk() (*bool, bool) {
	if o == nil || IsNil(o.PerformCertificatePinning) {
		return nil, false
	}
	return o.PerformCertificatePinning, true
}

// HasPerformCertificatePinning returns a boolean if a field has been set.
func (o *CertificatePinning) HasPerformCertificatePinning() bool {
	if o != nil && !IsNil(o.PerformCertificatePinning) {
		return true
	}

	return false
}

// SetPerformCertificatePinning gets a reference to the given bool and assigns it to the PerformCertificatePinning field.
func (o *CertificatePinning) SetPerformCertificatePinning(v bool) {
	o.PerformCertificatePinning = &v
}

// GetCertificatePinset returns the CertificatePinset field value if set, zero value otherwise.
func (o *CertificatePinning) GetCertificatePinset() SecretPath {
	if o == nil || IsNil(o.CertificatePinset) {
		var ret SecretPath
		return ret
	}
	return *o.CertificatePinset
}

// GetCertificatePinsetOk returns a tuple with the CertificatePinset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatePinning) GetCertificatePinsetOk() (*SecretPath, bool) {
	if o == nil || IsNil(o.CertificatePinset) {
		return nil, false
	}
	return o.CertificatePinset, true
}

// HasCertificatePinset returns a boolean if a field has been set.
func (o *CertificatePinning) HasCertificatePinset() bool {
	if o != nil && !IsNil(o.CertificatePinset) {
		return true
	}

	return false
}

// SetCertificatePinset gets a reference to the given SecretPath and assigns it to the CertificatePinset field.
func (o *CertificatePinning) SetCertificatePinset(v SecretPath) {
	o.CertificatePinset = &v
}

func (o CertificatePinning) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificatePinning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PerformCertificatePinning) {
		toSerialize["performCertificatePinning"] = o.PerformCertificatePinning
	}
	if !IsNil(o.CertificatePinset) {
		toSerialize["certificatePinset"] = o.CertificatePinset
	}
	return toSerialize, nil
}

type NullableCertificatePinning struct {
	value *CertificatePinning
	isSet bool
}

func (v NullableCertificatePinning) Get() *CertificatePinning {
	return v.value
}

func (v *NullableCertificatePinning) Set(val *CertificatePinning) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatePinning) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatePinning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatePinning(val *CertificatePinning) *NullableCertificatePinning {
	return &NullableCertificatePinning{value: val, isSet: true}
}

func (v NullableCertificatePinning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatePinning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


