/*
Secret Group TLS Context API

Secret Group TLS Context API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_tlscontext

import (
	"encoding/json"
)

// checks if the MutualAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MutualAuthentication{}

// MutualAuthentication struct for MutualAuthentication
type MutualAuthentication struct {
	// List of Object identifier (OID). OIDs are intended to be globally unique. They are formed by taking a unique numeric string (e.g. 1.3.5.7.9.24.68) and adding additional digits in a unique fashion (e.g. 1.3.5.7.9.24.68.1, 1.3.5.7.9.24.68.2, 1.3.5.7.9.24.68.1.1, etc.) An institution will acquire an arc (eg 1.3.5.7.9.24.68) and then extend the arc (called subarcs) as indicated above to create additional OIDâ€™s and arcs. There is no limit to the length of an OID, and virtually no computational burden to having a long OID. 
	CertificatePolicies []string `json:"certificatePolicies,omitempty"`
	// allows application to control if strict or lax certificate checking will be performed during chain-of-trust processing
	CertCheckingStrength *string `json:"certCheckingStrength,omitempty"`
	// maximum allowed chain length for the certificates
	VerificationDepth *int32 `json:"verificationDepth,omitempty"`
	// Whether or not to perform domain checking
	PerformDomainChecking *bool `json:"performDomainChecking,omitempty"`
	// Controls certificate policy processing as defined in RFC 3280, 5280. A certificate can contain zero or more policies. A policy is represented as an object identifier (OID). In an end entity certificate, this policy information indicate the policy under which the certificate has been issued and the purposes for which the certificate may be used. In a CA certificate, this policy information limits the set of policies for certification paths that include this certificate. Applications with specific policy requirements are expected to have a list of those policies that they will accept and to compare the policy OIDs in the certificate to that list. If this extension is critical, the path validation software MUST be able to interpret this extension (including the optional qualifier), or MUST reject the certificate 
	CertificatePolicyChecking *bool `json:"certificatePolicyChecking,omitempty"`
	// Indicates if the path must be valid for at least one of the certificate policies in the user-initial-policy-set.
	RequireInitialExplicitPolicy *bool `json:"requireInitialExplicitPolicy,omitempty"`
	// Indicates if certificate revocation checking should be enabled or not
	RevocationChecking *bool `json:"revocationChecking,omitempty"`
	// Protocol used for certificate revocation checking. Must be set if revocationChecking is set to 'true'.
	RevocationCheckingMethod *string `json:"revocationCheckingMethod,omitempty"`
	CrlDistributorConfig *SecretPath `json:"crlDistributorConfig,omitempty"`
	// Indicates if a valid CRL file must be in effect for every immediate and root Certificate Authority (CA) in the chain-of-trust
	RequireCrlForAllCa *bool `json:"requireCrlForAllCa,omitempty"`
	// Should the truststore i.e. trusted certificate authorities be sent to far-end during mutual authentication
	SendTruststore *bool `json:"sendTruststore,omitempty"`
	CertificatePinning *CertificatePinning `json:"certificatePinning,omitempty"`
	AuthenticationOverrides *AuthenticationOverrides `json:"authenticationOverrides,omitempty"`
}

// NewMutualAuthentication instantiates a new MutualAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutualAuthentication() *MutualAuthentication {
	this := MutualAuthentication{}
	var performDomainChecking bool = false
	this.PerformDomainChecking = &performDomainChecking
	var certificatePolicyChecking bool = false
	this.CertificatePolicyChecking = &certificatePolicyChecking
	var requireInitialExplicitPolicy bool = false
	this.RequireInitialExplicitPolicy = &requireInitialExplicitPolicy
	var revocationChecking bool = false
	this.RevocationChecking = &revocationChecking
	var requireCrlForAllCa bool = false
	this.RequireCrlForAllCa = &requireCrlForAllCa
	var sendTruststore bool = false
	this.SendTruststore = &sendTruststore
	return &this
}

// NewMutualAuthenticationWithDefaults instantiates a new MutualAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutualAuthenticationWithDefaults() *MutualAuthentication {
	this := MutualAuthentication{}
	var performDomainChecking bool = false
	this.PerformDomainChecking = &performDomainChecking
	var certificatePolicyChecking bool = false
	this.CertificatePolicyChecking = &certificatePolicyChecking
	var requireInitialExplicitPolicy bool = false
	this.RequireInitialExplicitPolicy = &requireInitialExplicitPolicy
	var revocationChecking bool = false
	this.RevocationChecking = &revocationChecking
	var requireCrlForAllCa bool = false
	this.RequireCrlForAllCa = &requireCrlForAllCa
	var sendTruststore bool = false
	this.SendTruststore = &sendTruststore
	return &this
}

// GetCertificatePolicies returns the CertificatePolicies field value if set, zero value otherwise.
func (o *MutualAuthentication) GetCertificatePolicies() []string {
	if o == nil || IsNil(o.CertificatePolicies) {
		var ret []string
		return ret
	}
	return o.CertificatePolicies
}

// GetCertificatePoliciesOk returns a tuple with the CertificatePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetCertificatePoliciesOk() ([]string, bool) {
	if o == nil || IsNil(o.CertificatePolicies) {
		return nil, false
	}
	return o.CertificatePolicies, true
}

// HasCertificatePolicies returns a boolean if a field has been set.
func (o *MutualAuthentication) HasCertificatePolicies() bool {
	if o != nil && !IsNil(o.CertificatePolicies) {
		return true
	}

	return false
}

// SetCertificatePolicies gets a reference to the given []string and assigns it to the CertificatePolicies field.
func (o *MutualAuthentication) SetCertificatePolicies(v []string) {
	o.CertificatePolicies = v
}

// GetCertCheckingStrength returns the CertCheckingStrength field value if set, zero value otherwise.
func (o *MutualAuthentication) GetCertCheckingStrength() string {
	if o == nil || IsNil(o.CertCheckingStrength) {
		var ret string
		return ret
	}
	return *o.CertCheckingStrength
}

// GetCertCheckingStrengthOk returns a tuple with the CertCheckingStrength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetCertCheckingStrengthOk() (*string, bool) {
	if o == nil || IsNil(o.CertCheckingStrength) {
		return nil, false
	}
	return o.CertCheckingStrength, true
}

// HasCertCheckingStrength returns a boolean if a field has been set.
func (o *MutualAuthentication) HasCertCheckingStrength() bool {
	if o != nil && !IsNil(o.CertCheckingStrength) {
		return true
	}

	return false
}

// SetCertCheckingStrength gets a reference to the given string and assigns it to the CertCheckingStrength field.
func (o *MutualAuthentication) SetCertCheckingStrength(v string) {
	o.CertCheckingStrength = &v
}

// GetVerificationDepth returns the VerificationDepth field value if set, zero value otherwise.
func (o *MutualAuthentication) GetVerificationDepth() int32 {
	if o == nil || IsNil(o.VerificationDepth) {
		var ret int32
		return ret
	}
	return *o.VerificationDepth
}

// GetVerificationDepthOk returns a tuple with the VerificationDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetVerificationDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.VerificationDepth) {
		return nil, false
	}
	return o.VerificationDepth, true
}

// HasVerificationDepth returns a boolean if a field has been set.
func (o *MutualAuthentication) HasVerificationDepth() bool {
	if o != nil && !IsNil(o.VerificationDepth) {
		return true
	}

	return false
}

// SetVerificationDepth gets a reference to the given int32 and assigns it to the VerificationDepth field.
func (o *MutualAuthentication) SetVerificationDepth(v int32) {
	o.VerificationDepth = &v
}

// GetPerformDomainChecking returns the PerformDomainChecking field value if set, zero value otherwise.
func (o *MutualAuthentication) GetPerformDomainChecking() bool {
	if o == nil || IsNil(o.PerformDomainChecking) {
		var ret bool
		return ret
	}
	return *o.PerformDomainChecking
}

// GetPerformDomainCheckingOk returns a tuple with the PerformDomainChecking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetPerformDomainCheckingOk() (*bool, bool) {
	if o == nil || IsNil(o.PerformDomainChecking) {
		return nil, false
	}
	return o.PerformDomainChecking, true
}

// HasPerformDomainChecking returns a boolean if a field has been set.
func (o *MutualAuthentication) HasPerformDomainChecking() bool {
	if o != nil && !IsNil(o.PerformDomainChecking) {
		return true
	}

	return false
}

// SetPerformDomainChecking gets a reference to the given bool and assigns it to the PerformDomainChecking field.
func (o *MutualAuthentication) SetPerformDomainChecking(v bool) {
	o.PerformDomainChecking = &v
}

// GetCertificatePolicyChecking returns the CertificatePolicyChecking field value if set, zero value otherwise.
func (o *MutualAuthentication) GetCertificatePolicyChecking() bool {
	if o == nil || IsNil(o.CertificatePolicyChecking) {
		var ret bool
		return ret
	}
	return *o.CertificatePolicyChecking
}

// GetCertificatePolicyCheckingOk returns a tuple with the CertificatePolicyChecking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetCertificatePolicyCheckingOk() (*bool, bool) {
	if o == nil || IsNil(o.CertificatePolicyChecking) {
		return nil, false
	}
	return o.CertificatePolicyChecking, true
}

// HasCertificatePolicyChecking returns a boolean if a field has been set.
func (o *MutualAuthentication) HasCertificatePolicyChecking() bool {
	if o != nil && !IsNil(o.CertificatePolicyChecking) {
		return true
	}

	return false
}

// SetCertificatePolicyChecking gets a reference to the given bool and assigns it to the CertificatePolicyChecking field.
func (o *MutualAuthentication) SetCertificatePolicyChecking(v bool) {
	o.CertificatePolicyChecking = &v
}

// GetRequireInitialExplicitPolicy returns the RequireInitialExplicitPolicy field value if set, zero value otherwise.
func (o *MutualAuthentication) GetRequireInitialExplicitPolicy() bool {
	if o == nil || IsNil(o.RequireInitialExplicitPolicy) {
		var ret bool
		return ret
	}
	return *o.RequireInitialExplicitPolicy
}

// GetRequireInitialExplicitPolicyOk returns a tuple with the RequireInitialExplicitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetRequireInitialExplicitPolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireInitialExplicitPolicy) {
		return nil, false
	}
	return o.RequireInitialExplicitPolicy, true
}

// HasRequireInitialExplicitPolicy returns a boolean if a field has been set.
func (o *MutualAuthentication) HasRequireInitialExplicitPolicy() bool {
	if o != nil && !IsNil(o.RequireInitialExplicitPolicy) {
		return true
	}

	return false
}

// SetRequireInitialExplicitPolicy gets a reference to the given bool and assigns it to the RequireInitialExplicitPolicy field.
func (o *MutualAuthentication) SetRequireInitialExplicitPolicy(v bool) {
	o.RequireInitialExplicitPolicy = &v
}

// GetRevocationChecking returns the RevocationChecking field value if set, zero value otherwise.
func (o *MutualAuthentication) GetRevocationChecking() bool {
	if o == nil || IsNil(o.RevocationChecking) {
		var ret bool
		return ret
	}
	return *o.RevocationChecking
}

// GetRevocationCheckingOk returns a tuple with the RevocationChecking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetRevocationCheckingOk() (*bool, bool) {
	if o == nil || IsNil(o.RevocationChecking) {
		return nil, false
	}
	return o.RevocationChecking, true
}

// HasRevocationChecking returns a boolean if a field has been set.
func (o *MutualAuthentication) HasRevocationChecking() bool {
	if o != nil && !IsNil(o.RevocationChecking) {
		return true
	}

	return false
}

// SetRevocationChecking gets a reference to the given bool and assigns it to the RevocationChecking field.
func (o *MutualAuthentication) SetRevocationChecking(v bool) {
	o.RevocationChecking = &v
}

// GetRevocationCheckingMethod returns the RevocationCheckingMethod field value if set, zero value otherwise.
func (o *MutualAuthentication) GetRevocationCheckingMethod() string {
	if o == nil || IsNil(o.RevocationCheckingMethod) {
		var ret string
		return ret
	}
	return *o.RevocationCheckingMethod
}

// GetRevocationCheckingMethodOk returns a tuple with the RevocationCheckingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetRevocationCheckingMethodOk() (*string, bool) {
	if o == nil || IsNil(o.RevocationCheckingMethod) {
		return nil, false
	}
	return o.RevocationCheckingMethod, true
}

// HasRevocationCheckingMethod returns a boolean if a field has been set.
func (o *MutualAuthentication) HasRevocationCheckingMethod() bool {
	if o != nil && !IsNil(o.RevocationCheckingMethod) {
		return true
	}

	return false
}

// SetRevocationCheckingMethod gets a reference to the given string and assigns it to the RevocationCheckingMethod field.
func (o *MutualAuthentication) SetRevocationCheckingMethod(v string) {
	o.RevocationCheckingMethod = &v
}

// GetCrlDistributorConfig returns the CrlDistributorConfig field value if set, zero value otherwise.
func (o *MutualAuthentication) GetCrlDistributorConfig() SecretPath {
	if o == nil || IsNil(o.CrlDistributorConfig) {
		var ret SecretPath
		return ret
	}
	return *o.CrlDistributorConfig
}

// GetCrlDistributorConfigOk returns a tuple with the CrlDistributorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetCrlDistributorConfigOk() (*SecretPath, bool) {
	if o == nil || IsNil(o.CrlDistributorConfig) {
		return nil, false
	}
	return o.CrlDistributorConfig, true
}

// HasCrlDistributorConfig returns a boolean if a field has been set.
func (o *MutualAuthentication) HasCrlDistributorConfig() bool {
	if o != nil && !IsNil(o.CrlDistributorConfig) {
		return true
	}

	return false
}

// SetCrlDistributorConfig gets a reference to the given SecretPath and assigns it to the CrlDistributorConfig field.
func (o *MutualAuthentication) SetCrlDistributorConfig(v SecretPath) {
	o.CrlDistributorConfig = &v
}

// GetRequireCrlForAllCa returns the RequireCrlForAllCa field value if set, zero value otherwise.
func (o *MutualAuthentication) GetRequireCrlForAllCa() bool {
	if o == nil || IsNil(o.RequireCrlForAllCa) {
		var ret bool
		return ret
	}
	return *o.RequireCrlForAllCa
}

// GetRequireCrlForAllCaOk returns a tuple with the RequireCrlForAllCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetRequireCrlForAllCaOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireCrlForAllCa) {
		return nil, false
	}
	return o.RequireCrlForAllCa, true
}

// HasRequireCrlForAllCa returns a boolean if a field has been set.
func (o *MutualAuthentication) HasRequireCrlForAllCa() bool {
	if o != nil && !IsNil(o.RequireCrlForAllCa) {
		return true
	}

	return false
}

// SetRequireCrlForAllCa gets a reference to the given bool and assigns it to the RequireCrlForAllCa field.
func (o *MutualAuthentication) SetRequireCrlForAllCa(v bool) {
	o.RequireCrlForAllCa = &v
}

// GetSendTruststore returns the SendTruststore field value if set, zero value otherwise.
func (o *MutualAuthentication) GetSendTruststore() bool {
	if o == nil || IsNil(o.SendTruststore) {
		var ret bool
		return ret
	}
	return *o.SendTruststore
}

// GetSendTruststoreOk returns a tuple with the SendTruststore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetSendTruststoreOk() (*bool, bool) {
	if o == nil || IsNil(o.SendTruststore) {
		return nil, false
	}
	return o.SendTruststore, true
}

// HasSendTruststore returns a boolean if a field has been set.
func (o *MutualAuthentication) HasSendTruststore() bool {
	if o != nil && !IsNil(o.SendTruststore) {
		return true
	}

	return false
}

// SetSendTruststore gets a reference to the given bool and assigns it to the SendTruststore field.
func (o *MutualAuthentication) SetSendTruststore(v bool) {
	o.SendTruststore = &v
}

// GetCertificatePinning returns the CertificatePinning field value if set, zero value otherwise.
func (o *MutualAuthentication) GetCertificatePinning() CertificatePinning {
	if o == nil || IsNil(o.CertificatePinning) {
		var ret CertificatePinning
		return ret
	}
	return *o.CertificatePinning
}

// GetCertificatePinningOk returns a tuple with the CertificatePinning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetCertificatePinningOk() (*CertificatePinning, bool) {
	if o == nil || IsNil(o.CertificatePinning) {
		return nil, false
	}
	return o.CertificatePinning, true
}

// HasCertificatePinning returns a boolean if a field has been set.
func (o *MutualAuthentication) HasCertificatePinning() bool {
	if o != nil && !IsNil(o.CertificatePinning) {
		return true
	}

	return false
}

// SetCertificatePinning gets a reference to the given CertificatePinning and assigns it to the CertificatePinning field.
func (o *MutualAuthentication) SetCertificatePinning(v CertificatePinning) {
	o.CertificatePinning = &v
}

// GetAuthenticationOverrides returns the AuthenticationOverrides field value if set, zero value otherwise.
func (o *MutualAuthentication) GetAuthenticationOverrides() AuthenticationOverrides {
	if o == nil || IsNil(o.AuthenticationOverrides) {
		var ret AuthenticationOverrides
		return ret
	}
	return *o.AuthenticationOverrides
}

// GetAuthenticationOverridesOk returns a tuple with the AuthenticationOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualAuthentication) GetAuthenticationOverridesOk() (*AuthenticationOverrides, bool) {
	if o == nil || IsNil(o.AuthenticationOverrides) {
		return nil, false
	}
	return o.AuthenticationOverrides, true
}

// HasAuthenticationOverrides returns a boolean if a field has been set.
func (o *MutualAuthentication) HasAuthenticationOverrides() bool {
	if o != nil && !IsNil(o.AuthenticationOverrides) {
		return true
	}

	return false
}

// SetAuthenticationOverrides gets a reference to the given AuthenticationOverrides and assigns it to the AuthenticationOverrides field.
func (o *MutualAuthentication) SetAuthenticationOverrides(v AuthenticationOverrides) {
	o.AuthenticationOverrides = &v
}

func (o MutualAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MutualAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificatePolicies) {
		toSerialize["certificatePolicies"] = o.CertificatePolicies
	}
	if !IsNil(o.CertCheckingStrength) {
		toSerialize["certCheckingStrength"] = o.CertCheckingStrength
	}
	if !IsNil(o.VerificationDepth) {
		toSerialize["verificationDepth"] = o.VerificationDepth
	}
	if !IsNil(o.PerformDomainChecking) {
		toSerialize["performDomainChecking"] = o.PerformDomainChecking
	}
	if !IsNil(o.CertificatePolicyChecking) {
		toSerialize["certificatePolicyChecking"] = o.CertificatePolicyChecking
	}
	if !IsNil(o.RequireInitialExplicitPolicy) {
		toSerialize["requireInitialExplicitPolicy"] = o.RequireInitialExplicitPolicy
	}
	if !IsNil(o.RevocationChecking) {
		toSerialize["revocationChecking"] = o.RevocationChecking
	}
	if !IsNil(o.RevocationCheckingMethod) {
		toSerialize["revocationCheckingMethod"] = o.RevocationCheckingMethod
	}
	if !IsNil(o.CrlDistributorConfig) {
		toSerialize["crlDistributorConfig"] = o.CrlDistributorConfig
	}
	if !IsNil(o.RequireCrlForAllCa) {
		toSerialize["requireCrlForAllCa"] = o.RequireCrlForAllCa
	}
	if !IsNil(o.SendTruststore) {
		toSerialize["sendTruststore"] = o.SendTruststore
	}
	if !IsNil(o.CertificatePinning) {
		toSerialize["certificatePinning"] = o.CertificatePinning
	}
	if !IsNil(o.AuthenticationOverrides) {
		toSerialize["authenticationOverrides"] = o.AuthenticationOverrides
	}
	return toSerialize, nil
}

type NullableMutualAuthentication struct {
	value *MutualAuthentication
	isSet bool
}

func (v NullableMutualAuthentication) Get() *MutualAuthentication {
	return v.value
}

func (v *NullableMutualAuthentication) Set(val *MutualAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualAuthentication(val *MutualAuthentication) *NullableMutualAuthentication {
	return &NullableMutualAuthentication{value: val, isSet: true}
}

func (v NullableMutualAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


