openapi: 3.0.0
info:
  description: Secret Group TLS Context API
  title: Secret Group TLS Context API
  version: 1.0.0
servers:
- description: Anypoint Cloudhub
  url: https://anypoint.mulesoft.com/secrets-manager/api/v1/
- description: Anypoint Cloudhub EU
  url: https://eu1.anypoint.mulesoft.com/secrets-manager/api/v1/
- description: Anypoint Cloudhub GOV
  url: https://gov.anypoint.mulesoft.com/secrets-manager/api/v1/
security:
- bearerAuth: []
paths:
  /organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/tlsContexts:
    get:
      description: Retrieves a secret-groups' collection of tls-contexts.
      operationId: GetSecretGroupTlsContexts
      parameters:
      - description: The organization Id
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The environment id
        explode: false
        in: path
        name: envId
        required: true
        schema:
          type: string
        style: simple
      - description: The secret group id
        explode: false
        in: path
        name: secretGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "401":
          description: Access token is missing or invalid
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsResponse'
          description: Bad request response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TlsContextSummaryCollection'
          description: get secret-groups tls-context response
      summary: Retrieves a secret-groups' collection of tls-contexts.
    post:
      description: Create a secret-groups' tls-context.
      operationId: PostSecretGroupTlsContext
      parameters:
      - description: The organization Id
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The environment id
        explode: false
        in: path
        name: envId
        required: true
        schema:
          type: string
        style: simple
      - description: The secret group id
        explode: false
        in: path
        name: secretGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TlsContextPostBody'
      responses:
        "401":
          description: Access token is missing or invalid
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsResponse'
          description: Bad request response
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSecretGroupTlsContext_201_response'
          description: post secret-groups tls-context response
      summary: Create a secret-groups' tls-context.
  /organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/tlsContexts/{secretId}:
    get:
      description: Retrieves tls-context details by id for a given secret group in
        a given organization and environment
      operationId: GetSecretGroupTlsContextDetails
      parameters:
      - description: The organization Id
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The environment id
        explode: false
        in: path
        name: envId
        required: true
        schema:
          type: string
        style: simple
      - description: The secret group id
        explode: false
        in: path
        name: secretGroupId
        required: true
        schema:
          type: string
        style: simple
      - description: The keystore id
        explode: false
        in: path
        name: secretId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "401":
          description: Access token is missing or invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSecretGroupTlsContextDetails_404_response'
          description: resource not found
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TlsContextDetails'
          description: get tls-context details response
      summary: Retrieve tls-context details
    patch:
      description: Update tls-context details for a given secret-group in a given
        organization and environment
      operationId: PatchSecretGroupTlsContext
      parameters:
      - description: The organization Id
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The environment id
        explode: false
        in: path
        name: envId
        required: true
        schema:
          type: string
        style: simple
      - description: The secret group id
        explode: false
        in: path
        name: secretGroupId
        required: true
        schema:
          type: string
        style: simple
      - description: The keystore id
        explode: false
        in: path
        name: secretId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TlsContextPatchBody'
      responses:
        "401":
          description: Access token is missing or invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSecretGroupTlsContextDetails_404_response'
          description: resource not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsResponse'
          description: Bad request response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSecretGroupTlsContext_200_response'
          description: patch tls-context details response
      summary: Update a given secret-group tls-context
    put:
      description: Update tls-context details for a given secret-group in a given
        organization and environment
      operationId: PutSecretGroupTlsContext
      parameters:
      - description: The organization Id
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The environment id
        explode: false
        in: path
        name: envId
        required: true
        schema:
          type: string
        style: simple
      - description: The secret group id
        explode: false
        in: path
        name: secretGroupId
        required: true
        schema:
          type: string
        style: simple
      - description: The keystore id
        explode: false
        in: path
        name: secretId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TlsContextPutBody'
      responses:
        "401":
          description: Access token is missing or invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSecretGroupTlsContextDetails_404_response'
          description: resource not found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorsResponse'
          description: Bad request response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSecretGroupTlsContext_200_response'
          description: put tls-context details response
      summary: Update a given secret-group tls-context
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorsResponse'
      description: Bad request response
    NotFoundError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetSecretGroupTlsContextDetails_404_response'
      description: resource not found
    SuccessGetSecretGroupTlsContextCollection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TlsContextSummaryCollection'
      description: get secret-groups tls-context response
    SuccessPostSecretGroupTlsContext:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostSecretGroupTlsContext_201_response'
      description: post secret-groups tls-context response
    SuccessGetSecretGroupTlsContextDetails:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TlsContextDetails'
      description: get tls-context details response
    SuccessPutSecretGroupTlsContext:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PutSecretGroupTlsContext_200_response'
      description: put tls-context details response
    SuccessPatchSecretGroupTlsContext:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PutSecretGroupTlsContext_200_response'
      description: patch tls-context details response
  schemas:
    errorsResponse:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/errorsResponse_errors_inner'
          type: array
      title: errorsResponse
      type: object
    TlsContextSummaryCollection:
      items:
        $ref: '#/components/schemas/TlsContextSummary'
      type: array
    TlsContextSummary:
      example:
        meta:
          path: path
          id: id
        name: name
        expirationDate: expirationDate
        target: target
      properties:
        name:
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
        expirationDate:
          type: string
        target:
          type: string
      type: object
    TlsContextDetails:
      example:
        mutualAuthentication:
          certCheckingStrength: Strict
          requireCrlForAllCa: false
          crlDistributorConfig:
            path: path
          certificatePinning:
            certificatePinset:
              path: path
            performCertificatePinning: true
          authenticationOverrides:
            certificateUntrusted: false
            certificateHasExpired: false
            certificateUnresolved: false
            invalidPurpose: false
            other: false
            certificateBadFormat: false
            allowSelfSigned: false
            certificateBadSignature: false
            certificateNotYetValid: false
            invalidCa: false
          performDomainChecking: false
          revocationCheckingMethod: revocationCheckingMethod
          sendTruststore: false
          certificatePolicyChecking: false
          requireInitialExplicitPolicy: false
          certificatePolicies:
          - certificatePolicies
          - certificatePolicies
          verificationDepth: 0
          revocationChecking: false
        acceptableCipherSuites:
          dheRsaAes128GcmSha256: false
          dheRsaChacha20Poly1305: false
          tlsChacha20Poly1305Sha256: false
          dheRsaAes256Sha256: false
          dheRsaAes128Sha256: false
          ecdheEcdsaAes128GcmSha256: false
          aes128GcmSha256: false
          tlsAes128GcmSha256: false
          aes128Sha256: false
          ecdheRsaAes128GcmSha256: false
          ecdheRsaChacha20Poly1305: false
          tlsAes256GcmSha384: false
          dheRsaAes256GcmSha384: false
          ecdheEcdsaAes256Sha1: false
          ecdheEcdsaChacha20Poly1305: false
          aes256Sha256: false
          aes256GcmSha384: false
          ecdheRsaAes256Sha1: false
          ecdheRsaAes256GcmSha384: false
          ecdheEcdsaAes256GcmSha384: false
          ecdheRsaAes128Sha1: false
          ecdheEcdsaAes128Sha1: false
        enableMutualAuthentication: true
        target: SecurityFabric
        acceptableTlsVersions:
          tlsV1Dot3: true
          tlsV1Dot2: true
          tlsV1Dot1: true
        outboundSettings:
          skipServerCertValidation: true
        meta:
          path: path
          id: id
        cipherSuites:
        - cipherSuites
        - cipherSuites
        minTlsVersion: minTlsVersion
        name: name
        insecure: false
        keystore:
          path: path
        truststore:
          path: path
        maxTlsVersion: maxTlsVersion
        inboundSettings:
          enableClientCertValidation: true
        expirationDate: expirationDate
        alpnProtocols:
        - alpnProtocols
        - alpnProtocols
      properties:
        target:
          description: The target application
          enum:
          - SecurityFabric
          - Mule
          - FlexGateway
          type: string
        name:
          type: string
        expirationDate:
          type: string
        meta:
          $ref: '#/components/schemas/Meta'
        keystore:
          $ref: '#/components/schemas/SecretPath'
        truststore:
          $ref: '#/components/schemas/SecretPath'
        enableMutualAuthentication:
          description: This flag is to enable client authentication
          type: boolean
        mutualAuthentication:
          $ref: '#/components/schemas/MutualAuthentication'
        acceptableCipherSuites:
          $ref: '#/components/schemas/AcceptableCipherSuites'
        acceptableTlsVersions:
          $ref: '#/components/schemas/AcceptableTlsVersions'
        cipherSuites:
          description: List of enabled cipher suites for Mule target
          items:
            type: string
          type: array
        insecure:
          default: false
          description: "Setting this flag to true indicates that certificate validation\
            \ should not be enforced, i.e. the truststore, even though set, is ignored\
            \ at runtime."
          type: boolean
        minTlsVersion:
          description: Minimum TLS version supported.
          type: string
        maxTlsVersion:
          description: Maximum TLS version supported.
          type: string
        alpnProtocols:
          description: supported HTTP versions in the most-to-least preferred order.
            At least one version must be specified.
          items:
            type: string
          type: array
        inboundSettings:
          $ref: '#/components/schemas/TlsContextDetails_inboundSettings'
        outboundSettings:
          $ref: '#/components/schemas/TlsContextDetails_outboundSettings'
      type: object
    TlsContextPostBody:
      description: |
        The body differs depending on the type of the tls-context you want to create. more information here: https://anypoint.mulesoft.com/exchange/portals/anypoint-platform/f1e97bc6-315a-4490-82a7-23abe036327a.anypoint-platform/secrets-manager/minor/1.6/console/method/%233344/
      oneOf:
      - $ref: '#/components/schemas/TlsContextSfBody'
      - $ref: '#/components/schemas/TlsContextMuleBody'
      - $ref: '#/components/schemas/TlsContextFlexGatewayBody'
    TlsContextPutBody:
      description: |
        The body differs depending on the type of the tls-context you want to create. more information here: https://anypoint.mulesoft.com/exchange/portals/anypoint-platform/f1e97bc6-315a-4490-82a7-23abe036327a.anypoint-platform/secrets-manager/minor/1.6/console/method/%233344/
      oneOf:
      - $ref: '#/components/schemas/TlsContextSfBody'
      - $ref: '#/components/schemas/TlsContextMuleBody'
      - $ref: '#/components/schemas/TlsContextFlexGatewayBody'
    TlsContextPatchBody:
      example: |
        {
          "name": "",
          "expirationDate": ""
        }
      type: object
    TlsContextSfBody:
      properties:
        expirationDate:
          description: |
            Date on which this secret should expire. If not set, by default, it will be set to one year from the date on which this secret is created/updated. Once the secret expires, a grant can not be requested for it.
          type: string
        name:
          type: string
        acceptableTlsVersions:
          $ref: '#/components/schemas/AcceptableTlsVersions'
        acceptableCipherSuites:
          $ref: '#/components/schemas/AcceptableCipherSuites'
        mutualAuthentication:
          $ref: '#/components/schemas/MutualAuthentication'
        enableMutualAuthentication:
          description: "This flag is to enable client authentication. To set this\
            \ flag to true, both keystore and truststore must be set."
          type: boolean
        target:
          description: The target engine
          enum:
          - SecurityFabric
          type: string
        keystore:
          $ref: '#/components/schemas/SecretPath'
        truststore:
          $ref: '#/components/schemas/SecretPath'
      type: object
    TlsContextMuleBody:
      properties:
        name:
          type: string
        expirationDate:
          description: |
            Date on which this secret should expire. If not set, by default, it will be set to one year from the date on which this secret is created/updated. Once the secret expires, a grant can not be requested for it.
          type: string
        target:
          description: The target engine. The enum type SecurityFabric is used for
            the Anypoint Security products.
          enum:
          - FlexGateway
          - Mule
          - SecurityFabric
          type: string
        keystore:
          $ref: '#/components/schemas/SecretPath'
        truststore:
          $ref: '#/components/schemas/SecretPath'
        cipherSuites:
          description: List of enabled cipher suites for Mule target
          items:
            type: string
          type: array
        acceptableTlsVersions:
          $ref: '#/components/schemas/AcceptableTlsVersions'
        insecure:
          description: "Setting this flag to true indicates that certificate validation\
            \ should not be enforced, i.e. the truststore, even though set, is ignored\
            \ at runtime."
          type: boolean
      type: object
    TlsContextFlexGatewayBody:
      properties:
        name:
          type: string
        expirationDate:
          description: |
            Date on which this secret should expire. If not set, by default, it will be set to one year from the date on which this secret is created/updated. Once the secret expires, a grant can not be requested for it.
          type: string
        minTlsVersion:
          description: Minimum TLS version supported.
          enum:
          - TLSv1.1
          - TLSv1.2
          - TLSv1.3
          type: string
        maxTlsVersion:
          description: Maximum TLS version supported.
          enum:
          - TLSv1.1
          - TLSv1.2
          - TLSv1.3
          type: string
        target:
          description: The target engine
          enum:
          - FlexGateway
          type: string
        alpnProtocols:
          description: supported HTTP versions in the most-to-least preferred order.
            At least one version must be specified.
          items:
            enum:
            - h2
            - http/1.1
            type: string
          type: array
        inboundSettings:
          $ref: '#/components/schemas/TlsContextFlexGatewayBody_inboundSettings'
        outboundSettings:
          $ref: '#/components/schemas/TlsContextFlexGatewayBody_outboundSettings'
        cipherSuites:
          description: |
            List of acceptable cipher suites for Flex Gateway target if min TLS version is < 1.3. If you are are not using the defaults and select individual ciphers, please select ciphers that match the configured keystore to ensure that TLS can setup a connection. For a keystore with an RSA key (the most common type), select ciphers which contain the string RSA (there are some exceptions). If using ECC ciphers, select ciphers which contain the string "ECDSA". TLS standards and documentation can be consulted for more background information.
          items:
            enum:
            - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
            - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
            - TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256
            - TLS_RSA_WITH_AES_128_GCM_SHA256
            - TLS_RSA_WITH_AES_256_GCM_SHA384
            - TLS_RSA_WITH_NULL_SHA
            - TLS_RSA_WITH_AES_128_CBC_SHA
            - TLS_RSA_WITH_AES_256_CBC_SHA
            - TLS_PSK_WITH_AES_128_CBC_SHA
            - TLS_PSK_WITH_AES_256_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
            - TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
            - TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
            - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
            - TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
            - TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
            - TLS_RSA_WITH_3DES_EDE_CBC_SHA
            type: string
          type: array
        keystore:
          $ref: '#/components/schemas/SecretPath'
        truststore:
          $ref: '#/components/schemas/SecretPath'
      type: object
    SecretPath:
      example:
        path: path
      properties:
        path:
          description: Relative path of the secret to be referenced.
          type: string
      type: object
    MutualAuthentication:
      example:
        certCheckingStrength: Strict
        requireCrlForAllCa: false
        crlDistributorConfig:
          path: path
        certificatePinning:
          certificatePinset:
            path: path
          performCertificatePinning: true
        authenticationOverrides:
          certificateUntrusted: false
          certificateHasExpired: false
          certificateUnresolved: false
          invalidPurpose: false
          other: false
          certificateBadFormat: false
          allowSelfSigned: false
          certificateBadSignature: false
          certificateNotYetValid: false
          invalidCa: false
        performDomainChecking: false
        revocationCheckingMethod: revocationCheckingMethod
        sendTruststore: false
        certificatePolicyChecking: false
        requireInitialExplicitPolicy: false
        certificatePolicies:
        - certificatePolicies
        - certificatePolicies
        verificationDepth: 0
        revocationChecking: false
      properties:
        certificatePolicies:
          description: |
            List of Object identifier (OID). OIDs are intended to be globally unique. They are formed by taking a unique numeric string (e.g. 1.3.5.7.9.24.68) and adding additional digits in a unique fashion (e.g. 1.3.5.7.9.24.68.1, 1.3.5.7.9.24.68.2, 1.3.5.7.9.24.68.1.1, etc.) An institution will acquire an arc (eg 1.3.5.7.9.24.68) and then extend the arc (called subarcs) as indicated above to create additional OID’s and arcs. There is no limit to the length of an OID, and virtually no computational burden to having a long OID.
          items:
            type: string
          type: array
        certCheckingStrength:
          description: allows application to control if strict or lax certificate
            checking will be performed during chain-of-trust processing
          enum:
          - Strict
          - Lax
          type: string
        verificationDepth:
          description: maximum allowed chain length for the certificates
          type: integer
        performDomainChecking:
          default: false
          description: Whether or not to perform domain checking
          type: boolean
        certificatePolicyChecking:
          default: false
          description: |
            Controls certificate policy processing as defined in RFC 3280, 5280. A certificate can contain zero or more policies. A policy is represented as an object identifier (OID). In an end entity certificate, this policy information indicate the policy under which the certificate has been issued and the purposes for which the certificate may be used. In a CA certificate, this policy information limits the set of policies for certification paths that include this certificate. Applications with specific policy requirements are expected to have a list of those policies that they will accept and to compare the policy OIDs in the certificate to that list. If this extension is critical, the path validation software MUST be able to interpret this extension (including the optional qualifier), or MUST reject the certificate
          type: boolean
        requireInitialExplicitPolicy:
          default: false
          description: Indicates if the path must be valid for at least one of the
            certificate policies in the user-initial-policy-set.
          type: boolean
        revocationChecking:
          default: false
          description: Indicates if certificate revocation checking should be enabled
            or not
          type: boolean
        revocationCheckingMethod:
          description: Protocol used for certificate revocation checking. Must be
            set if revocationChecking is set to 'true'.
          type: string
        crlDistributorConfig:
          $ref: '#/components/schemas/SecretPath'
        requireCrlForAllCa:
          default: false
          description: Indicates if a valid CRL file must be in effect for every immediate
            and root Certificate Authority (CA) in the chain-of-trust
          type: boolean
        sendTruststore:
          default: false
          description: Should the truststore i.e. trusted certificate authorities
            be sent to far-end during mutual authentication
          type: boolean
        certificatePinning:
          $ref: '#/components/schemas/CertificatePinning'
        authenticationOverrides:
          $ref: '#/components/schemas/AuthenticationOverrides'
      type: object
    Meta:
      example:
        path: path
        id: id
      properties:
        id:
          type: string
        path:
          type: string
      type: object
    AcceptableCipherSuites:
      description: |
        List of accepted cipher suites by Security Fabric target, at least one should be set to true. If you are are not using the defaults and select individual ciphers, please select ciphers that match the configured keystore to ensure that TLS can setup a connection. For a keystore with an RSA key (the most common type), select ciphers which contain the string RSA (there are some exceptions). If using ECC ciphers, select ciphers which contain the string "ECDSA". TLS standards and documentation can be consulted for more background information.
      example:
        dheRsaAes128GcmSha256: false
        dheRsaChacha20Poly1305: false
        tlsChacha20Poly1305Sha256: false
        dheRsaAes256Sha256: false
        dheRsaAes128Sha256: false
        ecdheEcdsaAes128GcmSha256: false
        aes128GcmSha256: false
        tlsAes128GcmSha256: false
        aes128Sha256: false
        ecdheRsaAes128GcmSha256: false
        ecdheRsaChacha20Poly1305: false
        tlsAes256GcmSha384: false
        dheRsaAes256GcmSha384: false
        ecdheEcdsaAes256Sha1: false
        ecdheEcdsaChacha20Poly1305: false
        aes256Sha256: false
        aes256GcmSha384: false
        ecdheRsaAes256Sha1: false
        ecdheRsaAes256GcmSha384: false
        ecdheEcdsaAes256GcmSha384: false
        ecdheRsaAes128Sha1: false
        ecdheEcdsaAes128Sha1: false
      properties:
        aes128GcmSha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        aes128Sha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        aes256GcmSha384:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        aes256Sha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        dheRsaAes128GcmSha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        dheRsaAes128Sha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        dheRsaAes256GcmSha384:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        dheRsaAes256Sha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheEcdsaAes128GcmSha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheEcdsaAes128Sha1:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheEcdsaAes256GcmSha384:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheEcdsaAes256Sha1:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheRsaAes128GcmSha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheRsaAes128Sha1:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheRsaAes256GcmSha384:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheRsaAes256Sha1:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheEcdsaChacha20Poly1305:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        ecdheRsaChacha20Poly1305:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        dheRsaChacha20Poly1305:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        tlsAes256GcmSha384:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        tlsChacha20Poly1305Sha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
        tlsAes128GcmSha256:
          default: false
          description: Allowed to be enabled only if tlsV1Dot2 is enabled.
          type: boolean
      type: object
    AuthenticationOverrides:
      example:
        certificateUntrusted: false
        certificateHasExpired: false
        certificateUnresolved: false
        invalidPurpose: false
        other: false
        certificateBadFormat: false
        allowSelfSigned: false
        certificateBadSignature: false
        certificateNotYetValid: false
        invalidCa: false
      properties:
        certificateBadFormat:
          default: false
          description: Allow processing of certificates with bad format
          type: boolean
        certificateBadSignature:
          default: false
          description: Allow processing of certificates with bad signature
          type: boolean
        certificateNotYetValid:
          default: false
          description: Allow processing of certificates that are not yet valid
          type: boolean
        certificateHasExpired:
          default: false
          description: Allow processing of certificates that are expired
          type: boolean
        allowSelfSigned:
          default: false
          description: Allow self signed certificates
          type: boolean
        certificateUnresolved:
          default: false
          description: Allow unresolved certificates
          type: boolean
        certificateUntrusted:
          default: false
          description: Allow untrusted certificates
          type: boolean
        invalidCa:
          default: false
          description: Allow invalid certificate authority certificates
          type: boolean
        invalidPurpose:
          default: false
          description: Allow certificates with invalid purpose
          type: boolean
        other:
          default: false
          description: Override any miscellaneous error condition encountered
          type: boolean
      type: object
    CertificatePinning:
      example:
        certificatePinset:
          path: path
        performCertificatePinning: true
      properties:
        performCertificatePinning:
          type: boolean
        certificatePinset:
          $ref: '#/components/schemas/SecretPath'
      type: object
    AcceptableTlsVersions:
      description: "TLS versions supported, at least one should be set to true"
      example:
        tlsV1Dot3: true
        tlsV1Dot2: true
        tlsV1Dot1: true
      properties:
        tlsV1Dot1:
          description: TLS version 1.1
          type: boolean
        tlsV1Dot2:
          description: TLS version 1.2
          type: boolean
        tlsV1Dot3:
          description: TLS version 1.3
          type: boolean
      type: object
    PostSecretGroupTlsContext_201_response:
      example:
        id: id
        message: message
      properties:
        message:
          type: string
        id:
          type: string
      type: object
    GetSecretGroupTlsContextDetails_404_response:
      properties:
        name:
          type: string
        message:
          type: string
      type: object
    PutSecretGroupTlsContext_200_response:
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    errorsResponse_errors_inner:
      properties:
        type:
          title: type
          type: string
        dataPath:
          title: dataPath
          type: string
        keyword:
          title: keyword
          type: string
        schema:
          title: schema
          type: string
        data:
          title: data
          type: string
        message:
          title: message
          type: string
      type: object
    TlsContextDetails_inboundSettings:
      description: Properties that are applicable only when the TLS context is used
        to secure inbound traffic.
      example:
        enableClientCertValidation: true
      properties:
        enableClientCertValidation:
          description: flag that indicates whether the client certificate validation
            must be enforced.
          type: boolean
      type: object
    TlsContextDetails_outboundSettings:
      description: Properties that are applicable only when the TLS context is used
        to secure outbound traffic.
      example:
        skipServerCertValidation: true
      properties:
        skipServerCertValidation:
          description: flag that indicates whether the server certificate validation
            must be skipped.
          type: boolean
      type: object
    TlsContextFlexGatewayBody_inboundSettings:
      description: Properties that are applicable only when the TLS context is used
        to secure inbound traffic.
      properties:
        enableClientCertValidation:
          default: false
          description: flag that indicates whether the client certificate validation
            must be enforced.
          type: boolean
      type: object
    TlsContextFlexGatewayBody_outboundSettings:
      description: Properties that are applicable only when the TLS context is used
        to secure outbound traffic.
      properties:
        skipServerCertValidation:
          default: false
          description: flag that indicates whether the server certificate validation
            must be skipped.
          type: boolean
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
