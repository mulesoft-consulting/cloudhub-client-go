/*
Secret Group TLS Context API

Secret Group TLS Context API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_tlscontext

import (
	"encoding/json"
)

// checks if the AcceptableTlsVersions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcceptableTlsVersions{}

// AcceptableTlsVersions TLS versions supported, at least one should be set to true
type AcceptableTlsVersions struct {
	// TLS version 1.1
	TlsV1Dot1 *bool `json:"tlsV1Dot1,omitempty"`
	// TLS version 1.2
	TlsV1Dot2 *bool `json:"tlsV1Dot2,omitempty"`
	// TLS version 1.3
	TlsV1Dot3 *bool `json:"tlsV1Dot3,omitempty"`
}

// NewAcceptableTlsVersions instantiates a new AcceptableTlsVersions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceptableTlsVersions() *AcceptableTlsVersions {
	this := AcceptableTlsVersions{}
	return &this
}

// NewAcceptableTlsVersionsWithDefaults instantiates a new AcceptableTlsVersions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceptableTlsVersionsWithDefaults() *AcceptableTlsVersions {
	this := AcceptableTlsVersions{}
	return &this
}

// GetTlsV1Dot1 returns the TlsV1Dot1 field value if set, zero value otherwise.
func (o *AcceptableTlsVersions) GetTlsV1Dot1() bool {
	if o == nil || IsNil(o.TlsV1Dot1) {
		var ret bool
		return ret
	}
	return *o.TlsV1Dot1
}

// GetTlsV1Dot1Ok returns a tuple with the TlsV1Dot1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptableTlsVersions) GetTlsV1Dot1Ok() (*bool, bool) {
	if o == nil || IsNil(o.TlsV1Dot1) {
		return nil, false
	}
	return o.TlsV1Dot1, true
}

// HasTlsV1Dot1 returns a boolean if a field has been set.
func (o *AcceptableTlsVersions) HasTlsV1Dot1() bool {
	if o != nil && !IsNil(o.TlsV1Dot1) {
		return true
	}

	return false
}

// SetTlsV1Dot1 gets a reference to the given bool and assigns it to the TlsV1Dot1 field.
func (o *AcceptableTlsVersions) SetTlsV1Dot1(v bool) {
	o.TlsV1Dot1 = &v
}

// GetTlsV1Dot2 returns the TlsV1Dot2 field value if set, zero value otherwise.
func (o *AcceptableTlsVersions) GetTlsV1Dot2() bool {
	if o == nil || IsNil(o.TlsV1Dot2) {
		var ret bool
		return ret
	}
	return *o.TlsV1Dot2
}

// GetTlsV1Dot2Ok returns a tuple with the TlsV1Dot2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptableTlsVersions) GetTlsV1Dot2Ok() (*bool, bool) {
	if o == nil || IsNil(o.TlsV1Dot2) {
		return nil, false
	}
	return o.TlsV1Dot2, true
}

// HasTlsV1Dot2 returns a boolean if a field has been set.
func (o *AcceptableTlsVersions) HasTlsV1Dot2() bool {
	if o != nil && !IsNil(o.TlsV1Dot2) {
		return true
	}

	return false
}

// SetTlsV1Dot2 gets a reference to the given bool and assigns it to the TlsV1Dot2 field.
func (o *AcceptableTlsVersions) SetTlsV1Dot2(v bool) {
	o.TlsV1Dot2 = &v
}

// GetTlsV1Dot3 returns the TlsV1Dot3 field value if set, zero value otherwise.
func (o *AcceptableTlsVersions) GetTlsV1Dot3() bool {
	if o == nil || IsNil(o.TlsV1Dot3) {
		var ret bool
		return ret
	}
	return *o.TlsV1Dot3
}

// GetTlsV1Dot3Ok returns a tuple with the TlsV1Dot3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptableTlsVersions) GetTlsV1Dot3Ok() (*bool, bool) {
	if o == nil || IsNil(o.TlsV1Dot3) {
		return nil, false
	}
	return o.TlsV1Dot3, true
}

// HasTlsV1Dot3 returns a boolean if a field has been set.
func (o *AcceptableTlsVersions) HasTlsV1Dot3() bool {
	if o != nil && !IsNil(o.TlsV1Dot3) {
		return true
	}

	return false
}

// SetTlsV1Dot3 gets a reference to the given bool and assigns it to the TlsV1Dot3 field.
func (o *AcceptableTlsVersions) SetTlsV1Dot3(v bool) {
	o.TlsV1Dot3 = &v
}

func (o AcceptableTlsVersions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcceptableTlsVersions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TlsV1Dot1) {
		toSerialize["tlsV1Dot1"] = o.TlsV1Dot1
	}
	if !IsNil(o.TlsV1Dot2) {
		toSerialize["tlsV1Dot2"] = o.TlsV1Dot2
	}
	if !IsNil(o.TlsV1Dot3) {
		toSerialize["tlsV1Dot3"] = o.TlsV1Dot3
	}
	return toSerialize, nil
}

type NullableAcceptableTlsVersions struct {
	value *AcceptableTlsVersions
	isSet bool
}

func (v NullableAcceptableTlsVersions) Get() *AcceptableTlsVersions {
	return v.value
}

func (v *NullableAcceptableTlsVersions) Set(val *AcceptableTlsVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceptableTlsVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceptableTlsVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceptableTlsVersions(val *AcceptableTlsVersions) *NullableAcceptableTlsVersions {
	return &NullableAcceptableTlsVersions{value: val, isSet: true}
}

func (v NullableAcceptableTlsVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceptableTlsVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


