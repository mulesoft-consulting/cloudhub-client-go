/*
Secret Group TLS Context API

Secret Group TLS Context API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_tlscontext

import (
	"encoding/json"
)

// checks if the AuthenticationOverrides type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationOverrides{}

// AuthenticationOverrides struct for AuthenticationOverrides
type AuthenticationOverrides struct {
	// Allow processing of certificates with bad format
	CertificateBadFormat *bool `json:"certificateBadFormat,omitempty"`
	// Allow processing of certificates with bad signature
	CertificateBadSignature *bool `json:"certificateBadSignature,omitempty"`
	// Allow processing of certificates that are not yet valid
	CertificateNotYetValid *bool `json:"certificateNotYetValid,omitempty"`
	// Allow processing of certificates that are expired
	CertificateHasExpired *bool `json:"certificateHasExpired,omitempty"`
	// Allow self signed certificates
	AllowSelfSigned *bool `json:"allowSelfSigned,omitempty"`
	// Allow unresolved certificates
	CertificateUnresolved *bool `json:"certificateUnresolved,omitempty"`
	// Allow untrusted certificates
	CertificateUntrusted *bool `json:"certificateUntrusted,omitempty"`
	// Allow invalid certificate authority certificates
	InvalidCa *bool `json:"invalidCa,omitempty"`
	// Allow certificates with invalid purpose
	InvalidPurpose *bool `json:"invalidPurpose,omitempty"`
	// Override any miscellaneous error condition encountered
	Other *bool `json:"other,omitempty"`
}

// NewAuthenticationOverrides instantiates a new AuthenticationOverrides object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationOverrides() *AuthenticationOverrides {
	this := AuthenticationOverrides{}
	var certificateBadFormat bool = false
	this.CertificateBadFormat = &certificateBadFormat
	var certificateBadSignature bool = false
	this.CertificateBadSignature = &certificateBadSignature
	var certificateNotYetValid bool = false
	this.CertificateNotYetValid = &certificateNotYetValid
	var certificateHasExpired bool = false
	this.CertificateHasExpired = &certificateHasExpired
	var allowSelfSigned bool = false
	this.AllowSelfSigned = &allowSelfSigned
	var certificateUnresolved bool = false
	this.CertificateUnresolved = &certificateUnresolved
	var certificateUntrusted bool = false
	this.CertificateUntrusted = &certificateUntrusted
	var invalidCa bool = false
	this.InvalidCa = &invalidCa
	var invalidPurpose bool = false
	this.InvalidPurpose = &invalidPurpose
	var other bool = false
	this.Other = &other
	return &this
}

// NewAuthenticationOverridesWithDefaults instantiates a new AuthenticationOverrides object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationOverridesWithDefaults() *AuthenticationOverrides {
	this := AuthenticationOverrides{}
	var certificateBadFormat bool = false
	this.CertificateBadFormat = &certificateBadFormat
	var certificateBadSignature bool = false
	this.CertificateBadSignature = &certificateBadSignature
	var certificateNotYetValid bool = false
	this.CertificateNotYetValid = &certificateNotYetValid
	var certificateHasExpired bool = false
	this.CertificateHasExpired = &certificateHasExpired
	var allowSelfSigned bool = false
	this.AllowSelfSigned = &allowSelfSigned
	var certificateUnresolved bool = false
	this.CertificateUnresolved = &certificateUnresolved
	var certificateUntrusted bool = false
	this.CertificateUntrusted = &certificateUntrusted
	var invalidCa bool = false
	this.InvalidCa = &invalidCa
	var invalidPurpose bool = false
	this.InvalidPurpose = &invalidPurpose
	var other bool = false
	this.Other = &other
	return &this
}

// GetCertificateBadFormat returns the CertificateBadFormat field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetCertificateBadFormat() bool {
	if o == nil || IsNil(o.CertificateBadFormat) {
		var ret bool
		return ret
	}
	return *o.CertificateBadFormat
}

// GetCertificateBadFormatOk returns a tuple with the CertificateBadFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetCertificateBadFormatOk() (*bool, bool) {
	if o == nil || IsNil(o.CertificateBadFormat) {
		return nil, false
	}
	return o.CertificateBadFormat, true
}

// HasCertificateBadFormat returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasCertificateBadFormat() bool {
	if o != nil && !IsNil(o.CertificateBadFormat) {
		return true
	}

	return false
}

// SetCertificateBadFormat gets a reference to the given bool and assigns it to the CertificateBadFormat field.
func (o *AuthenticationOverrides) SetCertificateBadFormat(v bool) {
	o.CertificateBadFormat = &v
}

// GetCertificateBadSignature returns the CertificateBadSignature field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetCertificateBadSignature() bool {
	if o == nil || IsNil(o.CertificateBadSignature) {
		var ret bool
		return ret
	}
	return *o.CertificateBadSignature
}

// GetCertificateBadSignatureOk returns a tuple with the CertificateBadSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetCertificateBadSignatureOk() (*bool, bool) {
	if o == nil || IsNil(o.CertificateBadSignature) {
		return nil, false
	}
	return o.CertificateBadSignature, true
}

// HasCertificateBadSignature returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasCertificateBadSignature() bool {
	if o != nil && !IsNil(o.CertificateBadSignature) {
		return true
	}

	return false
}

// SetCertificateBadSignature gets a reference to the given bool and assigns it to the CertificateBadSignature field.
func (o *AuthenticationOverrides) SetCertificateBadSignature(v bool) {
	o.CertificateBadSignature = &v
}

// GetCertificateNotYetValid returns the CertificateNotYetValid field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetCertificateNotYetValid() bool {
	if o == nil || IsNil(o.CertificateNotYetValid) {
		var ret bool
		return ret
	}
	return *o.CertificateNotYetValid
}

// GetCertificateNotYetValidOk returns a tuple with the CertificateNotYetValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetCertificateNotYetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.CertificateNotYetValid) {
		return nil, false
	}
	return o.CertificateNotYetValid, true
}

// HasCertificateNotYetValid returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasCertificateNotYetValid() bool {
	if o != nil && !IsNil(o.CertificateNotYetValid) {
		return true
	}

	return false
}

// SetCertificateNotYetValid gets a reference to the given bool and assigns it to the CertificateNotYetValid field.
func (o *AuthenticationOverrides) SetCertificateNotYetValid(v bool) {
	o.CertificateNotYetValid = &v
}

// GetCertificateHasExpired returns the CertificateHasExpired field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetCertificateHasExpired() bool {
	if o == nil || IsNil(o.CertificateHasExpired) {
		var ret bool
		return ret
	}
	return *o.CertificateHasExpired
}

// GetCertificateHasExpiredOk returns a tuple with the CertificateHasExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetCertificateHasExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.CertificateHasExpired) {
		return nil, false
	}
	return o.CertificateHasExpired, true
}

// HasCertificateHasExpired returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasCertificateHasExpired() bool {
	if o != nil && !IsNil(o.CertificateHasExpired) {
		return true
	}

	return false
}

// SetCertificateHasExpired gets a reference to the given bool and assigns it to the CertificateHasExpired field.
func (o *AuthenticationOverrides) SetCertificateHasExpired(v bool) {
	o.CertificateHasExpired = &v
}

// GetAllowSelfSigned returns the AllowSelfSigned field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetAllowSelfSigned() bool {
	if o == nil || IsNil(o.AllowSelfSigned) {
		var ret bool
		return ret
	}
	return *o.AllowSelfSigned
}

// GetAllowSelfSignedOk returns a tuple with the AllowSelfSigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetAllowSelfSignedOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowSelfSigned) {
		return nil, false
	}
	return o.AllowSelfSigned, true
}

// HasAllowSelfSigned returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasAllowSelfSigned() bool {
	if o != nil && !IsNil(o.AllowSelfSigned) {
		return true
	}

	return false
}

// SetAllowSelfSigned gets a reference to the given bool and assigns it to the AllowSelfSigned field.
func (o *AuthenticationOverrides) SetAllowSelfSigned(v bool) {
	o.AllowSelfSigned = &v
}

// GetCertificateUnresolved returns the CertificateUnresolved field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetCertificateUnresolved() bool {
	if o == nil || IsNil(o.CertificateUnresolved) {
		var ret bool
		return ret
	}
	return *o.CertificateUnresolved
}

// GetCertificateUnresolvedOk returns a tuple with the CertificateUnresolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetCertificateUnresolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.CertificateUnresolved) {
		return nil, false
	}
	return o.CertificateUnresolved, true
}

// HasCertificateUnresolved returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasCertificateUnresolved() bool {
	if o != nil && !IsNil(o.CertificateUnresolved) {
		return true
	}

	return false
}

// SetCertificateUnresolved gets a reference to the given bool and assigns it to the CertificateUnresolved field.
func (o *AuthenticationOverrides) SetCertificateUnresolved(v bool) {
	o.CertificateUnresolved = &v
}

// GetCertificateUntrusted returns the CertificateUntrusted field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetCertificateUntrusted() bool {
	if o == nil || IsNil(o.CertificateUntrusted) {
		var ret bool
		return ret
	}
	return *o.CertificateUntrusted
}

// GetCertificateUntrustedOk returns a tuple with the CertificateUntrusted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetCertificateUntrustedOk() (*bool, bool) {
	if o == nil || IsNil(o.CertificateUntrusted) {
		return nil, false
	}
	return o.CertificateUntrusted, true
}

// HasCertificateUntrusted returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasCertificateUntrusted() bool {
	if o != nil && !IsNil(o.CertificateUntrusted) {
		return true
	}

	return false
}

// SetCertificateUntrusted gets a reference to the given bool and assigns it to the CertificateUntrusted field.
func (o *AuthenticationOverrides) SetCertificateUntrusted(v bool) {
	o.CertificateUntrusted = &v
}

// GetInvalidCa returns the InvalidCa field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetInvalidCa() bool {
	if o == nil || IsNil(o.InvalidCa) {
		var ret bool
		return ret
	}
	return *o.InvalidCa
}

// GetInvalidCaOk returns a tuple with the InvalidCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetInvalidCaOk() (*bool, bool) {
	if o == nil || IsNil(o.InvalidCa) {
		return nil, false
	}
	return o.InvalidCa, true
}

// HasInvalidCa returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasInvalidCa() bool {
	if o != nil && !IsNil(o.InvalidCa) {
		return true
	}

	return false
}

// SetInvalidCa gets a reference to the given bool and assigns it to the InvalidCa field.
func (o *AuthenticationOverrides) SetInvalidCa(v bool) {
	o.InvalidCa = &v
}

// GetInvalidPurpose returns the InvalidPurpose field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetInvalidPurpose() bool {
	if o == nil || IsNil(o.InvalidPurpose) {
		var ret bool
		return ret
	}
	return *o.InvalidPurpose
}

// GetInvalidPurposeOk returns a tuple with the InvalidPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetInvalidPurposeOk() (*bool, bool) {
	if o == nil || IsNil(o.InvalidPurpose) {
		return nil, false
	}
	return o.InvalidPurpose, true
}

// HasInvalidPurpose returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasInvalidPurpose() bool {
	if o != nil && !IsNil(o.InvalidPurpose) {
		return true
	}

	return false
}

// SetInvalidPurpose gets a reference to the given bool and assigns it to the InvalidPurpose field.
func (o *AuthenticationOverrides) SetInvalidPurpose(v bool) {
	o.InvalidPurpose = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *AuthenticationOverrides) GetOther() bool {
	if o == nil || IsNil(o.Other) {
		var ret bool
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationOverrides) GetOtherOk() (*bool, bool) {
	if o == nil || IsNil(o.Other) {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *AuthenticationOverrides) HasOther() bool {
	if o != nil && !IsNil(o.Other) {
		return true
	}

	return false
}

// SetOther gets a reference to the given bool and assigns it to the Other field.
func (o *AuthenticationOverrides) SetOther(v bool) {
	o.Other = &v
}

func (o AuthenticationOverrides) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationOverrides) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateBadFormat) {
		toSerialize["certificateBadFormat"] = o.CertificateBadFormat
	}
	if !IsNil(o.CertificateBadSignature) {
		toSerialize["certificateBadSignature"] = o.CertificateBadSignature
	}
	if !IsNil(o.CertificateNotYetValid) {
		toSerialize["certificateNotYetValid"] = o.CertificateNotYetValid
	}
	if !IsNil(o.CertificateHasExpired) {
		toSerialize["certificateHasExpired"] = o.CertificateHasExpired
	}
	if !IsNil(o.AllowSelfSigned) {
		toSerialize["allowSelfSigned"] = o.AllowSelfSigned
	}
	if !IsNil(o.CertificateUnresolved) {
		toSerialize["certificateUnresolved"] = o.CertificateUnresolved
	}
	if !IsNil(o.CertificateUntrusted) {
		toSerialize["certificateUntrusted"] = o.CertificateUntrusted
	}
	if !IsNil(o.InvalidCa) {
		toSerialize["invalidCa"] = o.InvalidCa
	}
	if !IsNil(o.InvalidPurpose) {
		toSerialize["invalidPurpose"] = o.InvalidPurpose
	}
	if !IsNil(o.Other) {
		toSerialize["other"] = o.Other
	}
	return toSerialize, nil
}

type NullableAuthenticationOverrides struct {
	value *AuthenticationOverrides
	isSet bool
}

func (v NullableAuthenticationOverrides) Get() *AuthenticationOverrides {
	return v.value
}

func (v *NullableAuthenticationOverrides) Set(val *AuthenticationOverrides) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationOverrides) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationOverrides) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationOverrides(val *AuthenticationOverrides) *NullableAuthenticationOverrides {
	return &NullableAuthenticationOverrides{value: val, isSet: true}
}

func (v NullableAuthenticationOverrides) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationOverrides) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


