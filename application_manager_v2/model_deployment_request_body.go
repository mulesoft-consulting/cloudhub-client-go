/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the DeploymentRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentRequestBody{}

// DeploymentRequestBody struct for DeploymentRequestBody
type DeploymentRequestBody struct {
	Name *string `json:"name,omitempty"`
	Target *Target `json:"target,omitempty"`
	Application *Application `json:"application,omitempty"`
	DesiredVersion *string `json:"desiredVersion,omitempty"`
}

// NewDeploymentRequestBody instantiates a new DeploymentRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentRequestBody() *DeploymentRequestBody {
	this := DeploymentRequestBody{}
	return &this
}

// NewDeploymentRequestBodyWithDefaults instantiates a new DeploymentRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentRequestBodyWithDefaults() *DeploymentRequestBody {
	this := DeploymentRequestBody{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeploymentRequestBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentRequestBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeploymentRequestBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeploymentRequestBody) SetName(v string) {
	o.Name = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *DeploymentRequestBody) GetTarget() Target {
	if o == nil || IsNil(o.Target) {
		var ret Target
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentRequestBody) GetTargetOk() (*Target, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *DeploymentRequestBody) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given Target and assigns it to the Target field.
func (o *DeploymentRequestBody) SetTarget(v Target) {
	o.Target = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *DeploymentRequestBody) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentRequestBody) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *DeploymentRequestBody) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *DeploymentRequestBody) SetApplication(v Application) {
	o.Application = &v
}

// GetDesiredVersion returns the DesiredVersion field value if set, zero value otherwise.
func (o *DeploymentRequestBody) GetDesiredVersion() string {
	if o == nil || IsNil(o.DesiredVersion) {
		var ret string
		return ret
	}
	return *o.DesiredVersion
}

// GetDesiredVersionOk returns a tuple with the DesiredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentRequestBody) GetDesiredVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DesiredVersion) {
		return nil, false
	}
	return o.DesiredVersion, true
}

// HasDesiredVersion returns a boolean if a field has been set.
func (o *DeploymentRequestBody) HasDesiredVersion() bool {
	if o != nil && !IsNil(o.DesiredVersion) {
		return true
	}

	return false
}

// SetDesiredVersion gets a reference to the given string and assigns it to the DesiredVersion field.
func (o *DeploymentRequestBody) SetDesiredVersion(v string) {
	o.DesiredVersion = &v
}

func (o DeploymentRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.DesiredVersion) {
		toSerialize["desiredVersion"] = o.DesiredVersion
	}
	return toSerialize, nil
}

type NullableDeploymentRequestBody struct {
	value *DeploymentRequestBody
	isSet bool
}

func (v NullableDeploymentRequestBody) Get() *DeploymentRequestBody {
	return v.value
}

func (v *NullableDeploymentRequestBody) Set(val *DeploymentRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentRequestBody(val *DeploymentRequestBody) *NullableDeploymentRequestBody {
	return &NullableDeploymentRequestBody{value: val, isSet: true}
}

func (v NullableDeploymentRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


