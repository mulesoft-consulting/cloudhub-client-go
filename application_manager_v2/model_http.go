/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Http type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Http{}

// Http struct for Http
type Http struct {
	Inbound *HttpInbound `json:"inbound,omitempty"`
}

// NewHttp instantiates a new Http object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttp() *Http {
	this := Http{}
	return &this
}

// NewHttpWithDefaults instantiates a new Http object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpWithDefaults() *Http {
	this := Http{}
	return &this
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *Http) GetInbound() HttpInbound {
	if o == nil || IsNil(o.Inbound) {
		var ret HttpInbound
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Http) GetInboundOk() (*HttpInbound, bool) {
	if o == nil || IsNil(o.Inbound) {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *Http) HasInbound() bool {
	if o != nil && !IsNil(o.Inbound) {
		return true
	}

	return false
}

// SetInbound gets a reference to the given HttpInbound and assigns it to the Inbound field.
func (o *Http) SetInbound(v HttpInbound) {
	o.Inbound = &v
}

func (o Http) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Http) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Inbound) {
		toSerialize["inbound"] = o.Inbound
	}
	return toSerialize, nil
}

type NullableHttp struct {
	value *Http
	isSet bool
}

func (v NullableHttp) Get() *Http {
	return v.value
}

func (v *NullableHttp) Set(val *Http) {
	v.value = val
	v.isSet = true
}

func (v NullableHttp) IsSet() bool {
	return v.isSet
}

func (v *NullableHttp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttp(val *Http) *NullableHttp {
	return &NullableHttp{value: val, isSet: true}
}

func (v NullableHttp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


