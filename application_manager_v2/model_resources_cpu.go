/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the ResourcesCpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourcesCpu{}

// ResourcesCpu struct for ResourcesCpu
type ResourcesCpu struct {
	Limit *string `json:"limit,omitempty"`
	Reserved *string `json:"reserved,omitempty"`
}

// NewResourcesCpu instantiates a new ResourcesCpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcesCpu() *ResourcesCpu {
	this := ResourcesCpu{}
	return &this
}

// NewResourcesCpuWithDefaults instantiates a new ResourcesCpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcesCpuWithDefaults() *ResourcesCpu {
	this := ResourcesCpu{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ResourcesCpu) GetLimit() string {
	if o == nil || IsNil(o.Limit) {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourcesCpu) GetLimitOk() (*string, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ResourcesCpu) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *ResourcesCpu) SetLimit(v string) {
	o.Limit = &v
}

// GetReserved returns the Reserved field value if set, zero value otherwise.
func (o *ResourcesCpu) GetReserved() string {
	if o == nil || IsNil(o.Reserved) {
		var ret string
		return ret
	}
	return *o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourcesCpu) GetReservedOk() (*string, bool) {
	if o == nil || IsNil(o.Reserved) {
		return nil, false
	}
	return o.Reserved, true
}

// HasReserved returns a boolean if a field has been set.
func (o *ResourcesCpu) HasReserved() bool {
	if o != nil && !IsNil(o.Reserved) {
		return true
	}

	return false
}

// SetReserved gets a reference to the given string and assigns it to the Reserved field.
func (o *ResourcesCpu) SetReserved(v string) {
	o.Reserved = &v
}

func (o ResourcesCpu) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourcesCpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Reserved) {
		toSerialize["reserved"] = o.Reserved
	}
	return toSerialize, nil
}

type NullableResourcesCpu struct {
	value *ResourcesCpu
	isSet bool
}

func (v NullableResourcesCpu) Get() *ResourcesCpu {
	return v.value
}

func (v *NullableResourcesCpu) Set(val *ResourcesCpu) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesCpu) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesCpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesCpu(val *ResourcesCpu) *NullableResourcesCpu {
	return &NullableResourcesCpu{value: val, isSet: true}
}

func (v NullableResourcesCpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesCpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


