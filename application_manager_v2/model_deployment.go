/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Deployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Deployment{}

// Deployment struct for Deployment
type Deployment struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	CreationDate *int64 `json:"creationDate,omitempty"`
	LastModifiedDate *int64 `json:"lastModifiedDate,omitempty"`
	DesiredVersion *string `json:"desiredVersion,omitempty"`
	Replicas []Replicas `json:"replicas,omitempty"`
	Status *string `json:"status,omitempty"`
	Application *Application `json:"application,omitempty"`
	Target *Target `json:"target,omitempty"`
	LastSuccessfulVersion NullableString `json:"lastSuccessfulVersion,omitempty"`
}

// NewDeployment instantiates a new Deployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployment() *Deployment {
	this := Deployment{}
	return &this
}

// NewDeploymentWithDefaults instantiates a new Deployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentWithDefaults() *Deployment {
	this := Deployment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Deployment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Deployment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Deployment) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Deployment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Deployment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Deployment) SetName(v string) {
	o.Name = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *Deployment) GetCreationDate() int64 {
	if o == nil || IsNil(o.CreationDate) {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetCreationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *Deployment) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *Deployment) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetLastModifiedDate returns the LastModifiedDate field value if set, zero value otherwise.
func (o *Deployment) GetLastModifiedDate() int64 {
	if o == nil || IsNil(o.LastModifiedDate) {
		var ret int64
		return ret
	}
	return *o.LastModifiedDate
}

// GetLastModifiedDateOk returns a tuple with the LastModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetLastModifiedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.LastModifiedDate) {
		return nil, false
	}
	return o.LastModifiedDate, true
}

// HasLastModifiedDate returns a boolean if a field has been set.
func (o *Deployment) HasLastModifiedDate() bool {
	if o != nil && !IsNil(o.LastModifiedDate) {
		return true
	}

	return false
}

// SetLastModifiedDate gets a reference to the given int64 and assigns it to the LastModifiedDate field.
func (o *Deployment) SetLastModifiedDate(v int64) {
	o.LastModifiedDate = &v
}

// GetDesiredVersion returns the DesiredVersion field value if set, zero value otherwise.
func (o *Deployment) GetDesiredVersion() string {
	if o == nil || IsNil(o.DesiredVersion) {
		var ret string
		return ret
	}
	return *o.DesiredVersion
}

// GetDesiredVersionOk returns a tuple with the DesiredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetDesiredVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DesiredVersion) {
		return nil, false
	}
	return o.DesiredVersion, true
}

// HasDesiredVersion returns a boolean if a field has been set.
func (o *Deployment) HasDesiredVersion() bool {
	if o != nil && !IsNil(o.DesiredVersion) {
		return true
	}

	return false
}

// SetDesiredVersion gets a reference to the given string and assigns it to the DesiredVersion field.
func (o *Deployment) SetDesiredVersion(v string) {
	o.DesiredVersion = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *Deployment) GetReplicas() []Replicas {
	if o == nil || IsNil(o.Replicas) {
		var ret []Replicas
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetReplicasOk() ([]Replicas, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *Deployment) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given []Replicas and assigns it to the Replicas field.
func (o *Deployment) SetReplicas(v []Replicas) {
	o.Replicas = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Deployment) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Deployment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Deployment) SetStatus(v string) {
	o.Status = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *Deployment) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *Deployment) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *Deployment) SetApplication(v Application) {
	o.Application = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *Deployment) GetTarget() Target {
	if o == nil || IsNil(o.Target) {
		var ret Target
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetTargetOk() (*Target, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Deployment) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given Target and assigns it to the Target field.
func (o *Deployment) SetTarget(v Target) {
	o.Target = &v
}

// GetLastSuccessfulVersion returns the LastSuccessfulVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Deployment) GetLastSuccessfulVersion() string {
	if o == nil || IsNil(o.LastSuccessfulVersion.Get()) {
		var ret string
		return ret
	}
	return *o.LastSuccessfulVersion.Get()
}

// GetLastSuccessfulVersionOk returns a tuple with the LastSuccessfulVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Deployment) GetLastSuccessfulVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSuccessfulVersion.Get(), o.LastSuccessfulVersion.IsSet()
}

// HasLastSuccessfulVersion returns a boolean if a field has been set.
func (o *Deployment) HasLastSuccessfulVersion() bool {
	if o != nil && o.LastSuccessfulVersion.IsSet() {
		return true
	}

	return false
}

// SetLastSuccessfulVersion gets a reference to the given NullableString and assigns it to the LastSuccessfulVersion field.
func (o *Deployment) SetLastSuccessfulVersion(v string) {
	o.LastSuccessfulVersion.Set(&v)
}
// SetLastSuccessfulVersionNil sets the value for LastSuccessfulVersion to be an explicit nil
func (o *Deployment) SetLastSuccessfulVersionNil() {
	o.LastSuccessfulVersion.Set(nil)
}

// UnsetLastSuccessfulVersion ensures that no value is present for LastSuccessfulVersion, not even an explicit nil
func (o *Deployment) UnsetLastSuccessfulVersion() {
	o.LastSuccessfulVersion.Unset()
}

func (o Deployment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Deployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.LastModifiedDate) {
		toSerialize["lastModifiedDate"] = o.LastModifiedDate
	}
	if !IsNil(o.DesiredVersion) {
		toSerialize["desiredVersion"] = o.DesiredVersion
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if o.LastSuccessfulVersion.IsSet() {
		toSerialize["lastSuccessfulVersion"] = o.LastSuccessfulVersion.Get()
	}
	return toSerialize, nil
}

type NullableDeployment struct {
	value *Deployment
	isSet bool
}

func (v NullableDeployment) Get() *Deployment {
	return v.value
}

func (v *NullableDeployment) Set(val *Deployment) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployment(val *Deployment) *NullableDeployment {
	return &NullableDeployment{value: val, isSet: true}
}

func (v NullableDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


