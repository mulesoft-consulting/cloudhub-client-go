/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Ref type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ref{}

// Ref struct for Ref
type Ref struct {
	Classifier NullableString `json:"classifier,omitempty"`
	Type NullableString `json:"type,omitempty"`
	// The groupId of the application.
	GroupId *string `json:"groupId,omitempty"`
	// The artifactId of the application.
	ArtifactId *string `json:"artifactId,omitempty"`
	// The version of the application.
	Version *string `json:"version,omitempty"`
	// The packaging of the application.
	Packaging *string `json:"packaging,omitempty"`
}

// NewRef instantiates a new Ref object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRef() *Ref {
	this := Ref{}
	return &this
}

// NewRefWithDefaults instantiates a new Ref object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefWithDefaults() *Ref {
	this := Ref{}
	return &this
}

// GetClassifier returns the Classifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ref) GetClassifier() string {
	if o == nil || IsNil(o.Classifier.Get()) {
		var ret string
		return ret
	}
	return *o.Classifier.Get()
}

// GetClassifierOk returns a tuple with the Classifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ref) GetClassifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Classifier.Get(), o.Classifier.IsSet()
}

// HasClassifier returns a boolean if a field has been set.
func (o *Ref) HasClassifier() bool {
	if o != nil && o.Classifier.IsSet() {
		return true
	}

	return false
}

// SetClassifier gets a reference to the given NullableString and assigns it to the Classifier field.
func (o *Ref) SetClassifier(v string) {
	o.Classifier.Set(&v)
}
// SetClassifierNil sets the value for Classifier to be an explicit nil
func (o *Ref) SetClassifierNil() {
	o.Classifier.Set(nil)
}

// UnsetClassifier ensures that no value is present for Classifier, not even an explicit nil
func (o *Ref) UnsetClassifier() {
	o.Classifier.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ref) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ref) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *Ref) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *Ref) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *Ref) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *Ref) UnsetType() {
	o.Type.Unset()
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Ref) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ref) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Ref) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Ref) SetGroupId(v string) {
	o.GroupId = &v
}

// GetArtifactId returns the ArtifactId field value if set, zero value otherwise.
func (o *Ref) GetArtifactId() string {
	if o == nil || IsNil(o.ArtifactId) {
		var ret string
		return ret
	}
	return *o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ref) GetArtifactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactId) {
		return nil, false
	}
	return o.ArtifactId, true
}

// HasArtifactId returns a boolean if a field has been set.
func (o *Ref) HasArtifactId() bool {
	if o != nil && !IsNil(o.ArtifactId) {
		return true
	}

	return false
}

// SetArtifactId gets a reference to the given string and assigns it to the ArtifactId field.
func (o *Ref) SetArtifactId(v string) {
	o.ArtifactId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Ref) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ref) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Ref) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Ref) SetVersion(v string) {
	o.Version = &v
}

// GetPackaging returns the Packaging field value if set, zero value otherwise.
func (o *Ref) GetPackaging() string {
	if o == nil || IsNil(o.Packaging) {
		var ret string
		return ret
	}
	return *o.Packaging
}

// GetPackagingOk returns a tuple with the Packaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ref) GetPackagingOk() (*string, bool) {
	if o == nil || IsNil(o.Packaging) {
		return nil, false
	}
	return o.Packaging, true
}

// HasPackaging returns a boolean if a field has been set.
func (o *Ref) HasPackaging() bool {
	if o != nil && !IsNil(o.Packaging) {
		return true
	}

	return false
}

// SetPackaging gets a reference to the given string and assigns it to the Packaging field.
func (o *Ref) SetPackaging(v string) {
	o.Packaging = &v
}

func (o Ref) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ref) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Classifier.IsSet() {
		toSerialize["classifier"] = o.Classifier.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.ArtifactId) {
		toSerialize["artifactId"] = o.ArtifactId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Packaging) {
		toSerialize["packaging"] = o.Packaging
	}
	return toSerialize, nil
}

type NullableRef struct {
	value *Ref
	isSet bool
}

func (v NullableRef) Get() *Ref {
	return v.value
}

func (v *NullableRef) Set(val *Ref) {
	v.value = val
	v.isSet = true
}

func (v NullableRef) IsSet() bool {
	return v.isSet
}

func (v *NullableRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRef(val *Ref) *NullableRef {
	return &NullableRef{value: val, isSet: true}
}

func (v NullableRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


