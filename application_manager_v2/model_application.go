/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Application type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Application{}

// Application The details of the application to deploy.
type Application struct {
	// The status of the application.
	Status *string `json:"status,omitempty"`
	// The desired state of the application.
	DesiredState NullableString `json:"desiredState,omitempty"`
	Ref *Ref `json:"ref,omitempty"`
	Configuration *AppConfiguration `json:"configuration,omitempty"`
	ResourceAssets map[string]interface{} `json:"resourceAssets,omitempty"`
	// The application allocated virtual cores.
	VCores *float32 `json:"vCores,omitempty"`
	Integrations *ApplicationIntegrations `json:"integrations,omitempty"`
	ObjectStoreV2Enabled *bool `json:"objectStoreV2Enabled,omitempty"`
}

// NewApplication instantiates a new Application object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplication() *Application {
	this := Application{}
	return &this
}

// NewApplicationWithDefaults instantiates a new Application object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationWithDefaults() *Application {
	this := Application{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Application) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Application) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Application) SetStatus(v string) {
	o.Status = &v
}

// GetDesiredState returns the DesiredState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Application) GetDesiredState() string {
	if o == nil || IsNil(o.DesiredState.Get()) {
		var ret string
		return ret
	}
	return *o.DesiredState.Get()
}

// GetDesiredStateOk returns a tuple with the DesiredState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Application) GetDesiredStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DesiredState.Get(), o.DesiredState.IsSet()
}

// HasDesiredState returns a boolean if a field has been set.
func (o *Application) HasDesiredState() bool {
	if o != nil && o.DesiredState.IsSet() {
		return true
	}

	return false
}

// SetDesiredState gets a reference to the given NullableString and assigns it to the DesiredState field.
func (o *Application) SetDesiredState(v string) {
	o.DesiredState.Set(&v)
}
// SetDesiredStateNil sets the value for DesiredState to be an explicit nil
func (o *Application) SetDesiredStateNil() {
	o.DesiredState.Set(nil)
}

// UnsetDesiredState ensures that no value is present for DesiredState, not even an explicit nil
func (o *Application) UnsetDesiredState() {
	o.DesiredState.Unset()
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Application) GetRef() Ref {
	if o == nil || IsNil(o.Ref) {
		var ret Ref
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetRefOk() (*Ref, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Application) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given Ref and assigns it to the Ref field.
func (o *Application) SetRef(v Ref) {
	o.Ref = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *Application) GetConfiguration() AppConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret AppConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetConfigurationOk() (*AppConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *Application) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given AppConfiguration and assigns it to the Configuration field.
func (o *Application) SetConfiguration(v AppConfiguration) {
	o.Configuration = &v
}

// GetResourceAssets returns the ResourceAssets field value if set, zero value otherwise.
func (o *Application) GetResourceAssets() map[string]interface{} {
	if o == nil || IsNil(o.ResourceAssets) {
		var ret map[string]interface{}
		return ret
	}
	return o.ResourceAssets
}

// GetResourceAssetsOk returns a tuple with the ResourceAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetResourceAssetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResourceAssets) {
		return map[string]interface{}{}, false
	}
	return o.ResourceAssets, true
}

// HasResourceAssets returns a boolean if a field has been set.
func (o *Application) HasResourceAssets() bool {
	if o != nil && !IsNil(o.ResourceAssets) {
		return true
	}

	return false
}

// SetResourceAssets gets a reference to the given map[string]interface{} and assigns it to the ResourceAssets field.
func (o *Application) SetResourceAssets(v map[string]interface{}) {
	o.ResourceAssets = v
}

// GetVCores returns the VCores field value if set, zero value otherwise.
func (o *Application) GetVCores() float32 {
	if o == nil || IsNil(o.VCores) {
		var ret float32
		return ret
	}
	return *o.VCores
}

// GetVCoresOk returns a tuple with the VCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetVCoresOk() (*float32, bool) {
	if o == nil || IsNil(o.VCores) {
		return nil, false
	}
	return o.VCores, true
}

// HasVCores returns a boolean if a field has been set.
func (o *Application) HasVCores() bool {
	if o != nil && !IsNil(o.VCores) {
		return true
	}

	return false
}

// SetVCores gets a reference to the given float32 and assigns it to the VCores field.
func (o *Application) SetVCores(v float32) {
	o.VCores = &v
}

// GetIntegrations returns the Integrations field value if set, zero value otherwise.
func (o *Application) GetIntegrations() ApplicationIntegrations {
	if o == nil || IsNil(o.Integrations) {
		var ret ApplicationIntegrations
		return ret
	}
	return *o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetIntegrationsOk() (*ApplicationIntegrations, bool) {
	if o == nil || IsNil(o.Integrations) {
		return nil, false
	}
	return o.Integrations, true
}

// HasIntegrations returns a boolean if a field has been set.
func (o *Application) HasIntegrations() bool {
	if o != nil && !IsNil(o.Integrations) {
		return true
	}

	return false
}

// SetIntegrations gets a reference to the given ApplicationIntegrations and assigns it to the Integrations field.
func (o *Application) SetIntegrations(v ApplicationIntegrations) {
	o.Integrations = &v
}

// GetObjectStoreV2Enabled returns the ObjectStoreV2Enabled field value if set, zero value otherwise.
func (o *Application) GetObjectStoreV2Enabled() bool {
	if o == nil || IsNil(o.ObjectStoreV2Enabled) {
		var ret bool
		return ret
	}
	return *o.ObjectStoreV2Enabled
}

// GetObjectStoreV2EnabledOk returns a tuple with the ObjectStoreV2Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetObjectStoreV2EnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ObjectStoreV2Enabled) {
		return nil, false
	}
	return o.ObjectStoreV2Enabled, true
}

// HasObjectStoreV2Enabled returns a boolean if a field has been set.
func (o *Application) HasObjectStoreV2Enabled() bool {
	if o != nil && !IsNil(o.ObjectStoreV2Enabled) {
		return true
	}

	return false
}

// SetObjectStoreV2Enabled gets a reference to the given bool and assigns it to the ObjectStoreV2Enabled field.
func (o *Application) SetObjectStoreV2Enabled(v bool) {
	o.ObjectStoreV2Enabled = &v
}

func (o Application) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Application) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.DesiredState.IsSet() {
		toSerialize["desiredState"] = o.DesiredState.Get()
	}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.ResourceAssets) {
		toSerialize["resourceAssets"] = o.ResourceAssets
	}
	if !IsNil(o.VCores) {
		toSerialize["vCores"] = o.VCores
	}
	if !IsNil(o.Integrations) {
		toSerialize["integrations"] = o.Integrations
	}
	if !IsNil(o.ObjectStoreV2Enabled) {
		toSerialize["objectStoreV2Enabled"] = o.ObjectStoreV2Enabled
	}
	return toSerialize, nil
}

type NullableApplication struct {
	value *Application
	isSet bool
}

func (v NullableApplication) Get() *Application {
	return v.value
}

func (v *NullableApplication) Set(val *Application) {
	v.value = val
	v.isSet = true
}

func (v NullableApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplication(val *Application) *NullableApplication {
	return &NullableApplication{value: val, isSet: true}
}

func (v NullableApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


