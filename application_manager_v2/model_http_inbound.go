/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the HttpInbound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpInbound{}

// HttpInbound struct for HttpInbound
type HttpInbound struct {
	PublicUrl *string `json:"publicUrl,omitempty"`
	// This field is not supported on deployments to Shared Spaces. Requests containing values other than null will be rejected.
	PathRewrite *string `json:"pathRewrite,omitempty"`
	LastMileSecurity *bool `json:"lastMileSecurity,omitempty"`
	ForwardSslSession *bool `json:"forwardSslSession,omitempty"`
	InternalUrl *string `json:"internalUrl,omitempty"`
	UniqueId *string `json:"uniqueId,omitempty"`
}

// NewHttpInbound instantiates a new HttpInbound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpInbound() *HttpInbound {
	this := HttpInbound{}
	return &this
}

// NewHttpInboundWithDefaults instantiates a new HttpInbound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpInboundWithDefaults() *HttpInbound {
	this := HttpInbound{}
	return &this
}

// GetPublicUrl returns the PublicUrl field value if set, zero value otherwise.
func (o *HttpInbound) GetPublicUrl() string {
	if o == nil || IsNil(o.PublicUrl) {
		var ret string
		return ret
	}
	return *o.PublicUrl
}

// GetPublicUrlOk returns a tuple with the PublicUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpInbound) GetPublicUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PublicUrl) {
		return nil, false
	}
	return o.PublicUrl, true
}

// HasPublicUrl returns a boolean if a field has been set.
func (o *HttpInbound) HasPublicUrl() bool {
	if o != nil && !IsNil(o.PublicUrl) {
		return true
	}

	return false
}

// SetPublicUrl gets a reference to the given string and assigns it to the PublicUrl field.
func (o *HttpInbound) SetPublicUrl(v string) {
	o.PublicUrl = &v
}

// GetPathRewrite returns the PathRewrite field value if set, zero value otherwise.
func (o *HttpInbound) GetPathRewrite() string {
	if o == nil || IsNil(o.PathRewrite) {
		var ret string
		return ret
	}
	return *o.PathRewrite
}

// GetPathRewriteOk returns a tuple with the PathRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpInbound) GetPathRewriteOk() (*string, bool) {
	if o == nil || IsNil(o.PathRewrite) {
		return nil, false
	}
	return o.PathRewrite, true
}

// HasPathRewrite returns a boolean if a field has been set.
func (o *HttpInbound) HasPathRewrite() bool {
	if o != nil && !IsNil(o.PathRewrite) {
		return true
	}

	return false
}

// SetPathRewrite gets a reference to the given string and assigns it to the PathRewrite field.
func (o *HttpInbound) SetPathRewrite(v string) {
	o.PathRewrite = &v
}

// GetLastMileSecurity returns the LastMileSecurity field value if set, zero value otherwise.
func (o *HttpInbound) GetLastMileSecurity() bool {
	if o == nil || IsNil(o.LastMileSecurity) {
		var ret bool
		return ret
	}
	return *o.LastMileSecurity
}

// GetLastMileSecurityOk returns a tuple with the LastMileSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpInbound) GetLastMileSecurityOk() (*bool, bool) {
	if o == nil || IsNil(o.LastMileSecurity) {
		return nil, false
	}
	return o.LastMileSecurity, true
}

// HasLastMileSecurity returns a boolean if a field has been set.
func (o *HttpInbound) HasLastMileSecurity() bool {
	if o != nil && !IsNil(o.LastMileSecurity) {
		return true
	}

	return false
}

// SetLastMileSecurity gets a reference to the given bool and assigns it to the LastMileSecurity field.
func (o *HttpInbound) SetLastMileSecurity(v bool) {
	o.LastMileSecurity = &v
}

// GetForwardSslSession returns the ForwardSslSession field value if set, zero value otherwise.
func (o *HttpInbound) GetForwardSslSession() bool {
	if o == nil || IsNil(o.ForwardSslSession) {
		var ret bool
		return ret
	}
	return *o.ForwardSslSession
}

// GetForwardSslSessionOk returns a tuple with the ForwardSslSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpInbound) GetForwardSslSessionOk() (*bool, bool) {
	if o == nil || IsNil(o.ForwardSslSession) {
		return nil, false
	}
	return o.ForwardSslSession, true
}

// HasForwardSslSession returns a boolean if a field has been set.
func (o *HttpInbound) HasForwardSslSession() bool {
	if o != nil && !IsNil(o.ForwardSslSession) {
		return true
	}

	return false
}

// SetForwardSslSession gets a reference to the given bool and assigns it to the ForwardSslSession field.
func (o *HttpInbound) SetForwardSslSession(v bool) {
	o.ForwardSslSession = &v
}

// GetInternalUrl returns the InternalUrl field value if set, zero value otherwise.
func (o *HttpInbound) GetInternalUrl() string {
	if o == nil || IsNil(o.InternalUrl) {
		var ret string
		return ret
	}
	return *o.InternalUrl
}

// GetInternalUrlOk returns a tuple with the InternalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpInbound) GetInternalUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InternalUrl) {
		return nil, false
	}
	return o.InternalUrl, true
}

// HasInternalUrl returns a boolean if a field has been set.
func (o *HttpInbound) HasInternalUrl() bool {
	if o != nil && !IsNil(o.InternalUrl) {
		return true
	}

	return false
}

// SetInternalUrl gets a reference to the given string and assigns it to the InternalUrl field.
func (o *HttpInbound) SetInternalUrl(v string) {
	o.InternalUrl = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *HttpInbound) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpInbound) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// HasUniqueId returns a boolean if a field has been set.
func (o *HttpInbound) HasUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *HttpInbound) SetUniqueId(v string) {
	o.UniqueId = &v
}

func (o HttpInbound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpInbound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PublicUrl) {
		toSerialize["publicUrl"] = o.PublicUrl
	}
	if !IsNil(o.PathRewrite) {
		toSerialize["pathRewrite"] = o.PathRewrite
	}
	if !IsNil(o.LastMileSecurity) {
		toSerialize["lastMileSecurity"] = o.LastMileSecurity
	}
	if !IsNil(o.ForwardSslSession) {
		toSerialize["forwardSslSession"] = o.ForwardSslSession
	}
	if !IsNil(o.InternalUrl) {
		toSerialize["internalUrl"] = o.InternalUrl
	}
	if !IsNil(o.UniqueId) {
		toSerialize["uniqueId"] = o.UniqueId
	}
	return toSerialize, nil
}

type NullableHttpInbound struct {
	value *HttpInbound
	isSet bool
}

func (v NullableHttpInbound) Get() *HttpInbound {
	return v.value
}

func (v *NullableHttpInbound) Set(val *HttpInbound) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpInbound) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpInbound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpInbound(val *HttpInbound) *NullableHttpInbound {
	return &NullableHttpInbound{value: val, isSet: true}
}

func (v NullableHttpInbound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpInbound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


