/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Target type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Target{}

// Target The details of the target to perform the deployment on.
type Target struct {
	// The cloud provider the target belongs to.
	Provider *string `json:"provider,omitempty"`
	// The unique identifier of the target.
	TargetId *string `json:"targetId,omitempty"`
	DeploymentSettings *DeploymentSettings `json:"deploymentSettings,omitempty"`
	// The number of replicas of the deployment.
	Replicas *int32 `json:"replicas,omitempty"`
}

// NewTarget instantiates a new Target object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTarget() *Target {
	this := Target{}
	return &this
}

// NewTargetWithDefaults instantiates a new Target object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetWithDefaults() *Target {
	this := Target{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Target) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Target) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *Target) SetProvider(v string) {
	o.Provider = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *Target) GetTargetId() string {
	if o == nil || IsNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetTargetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *Target) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *Target) SetTargetId(v string) {
	o.TargetId = &v
}

// GetDeploymentSettings returns the DeploymentSettings field value if set, zero value otherwise.
func (o *Target) GetDeploymentSettings() DeploymentSettings {
	if o == nil || IsNil(o.DeploymentSettings) {
		var ret DeploymentSettings
		return ret
	}
	return *o.DeploymentSettings
}

// GetDeploymentSettingsOk returns a tuple with the DeploymentSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetDeploymentSettingsOk() (*DeploymentSettings, bool) {
	if o == nil || IsNil(o.DeploymentSettings) {
		return nil, false
	}
	return o.DeploymentSettings, true
}

// HasDeploymentSettings returns a boolean if a field has been set.
func (o *Target) HasDeploymentSettings() bool {
	if o != nil && !IsNil(o.DeploymentSettings) {
		return true
	}

	return false
}

// SetDeploymentSettings gets a reference to the given DeploymentSettings and assigns it to the DeploymentSettings field.
func (o *Target) SetDeploymentSettings(v DeploymentSettings) {
	o.DeploymentSettings = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *Target) GetReplicas() int32 {
	if o == nil || IsNil(o.Replicas) {
		var ret int32
		return ret
	}
	return *o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Target) GetReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *Target) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given int32 and assigns it to the Replicas field.
func (o *Target) SetReplicas(v int32) {
	o.Replicas = &v
}

func (o Target) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Target) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !IsNil(o.DeploymentSettings) {
		toSerialize["deploymentSettings"] = o.DeploymentSettings
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	return toSerialize, nil
}

type NullableTarget struct {
	value *Target
	isSet bool
}

func (v NullableTarget) Get() *Target {
	return v.value
}

func (v *NullableTarget) Set(val *Target) {
	v.value = val
	v.isSet = true
}

func (v NullableTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTarget(val *Target) *NullableTarget {
	return &NullableTarget{value: val, isSet: true}
}

func (v NullableTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


