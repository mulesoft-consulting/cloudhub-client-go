/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Sidecars type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sidecars{}

// Sidecars struct for Sidecars
type Sidecars struct {
	AnypointMonitoring *AnypointMonitoring `json:"anypoint-monitoring,omitempty"`
}

// NewSidecars instantiates a new Sidecars object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSidecars() *Sidecars {
	this := Sidecars{}
	return &this
}

// NewSidecarsWithDefaults instantiates a new Sidecars object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSidecarsWithDefaults() *Sidecars {
	this := Sidecars{}
	return &this
}

// GetAnypointMonitoring returns the AnypointMonitoring field value if set, zero value otherwise.
func (o *Sidecars) GetAnypointMonitoring() AnypointMonitoring {
	if o == nil || IsNil(o.AnypointMonitoring) {
		var ret AnypointMonitoring
		return ret
	}
	return *o.AnypointMonitoring
}

// GetAnypointMonitoringOk returns a tuple with the AnypointMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sidecars) GetAnypointMonitoringOk() (*AnypointMonitoring, bool) {
	if o == nil || IsNil(o.AnypointMonitoring) {
		return nil, false
	}
	return o.AnypointMonitoring, true
}

// HasAnypointMonitoring returns a boolean if a field has been set.
func (o *Sidecars) HasAnypointMonitoring() bool {
	if o != nil && !IsNil(o.AnypointMonitoring) {
		return true
	}

	return false
}

// SetAnypointMonitoring gets a reference to the given AnypointMonitoring and assigns it to the AnypointMonitoring field.
func (o *Sidecars) SetAnypointMonitoring(v AnypointMonitoring) {
	o.AnypointMonitoring = &v
}

func (o Sidecars) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sidecars) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnypointMonitoring) {
		toSerialize["anypoint-monitoring"] = o.AnypointMonitoring
	}
	return toSerialize, nil
}

type NullableSidecars struct {
	value *Sidecars
	isSet bool
}

func (v NullableSidecars) Get() *Sidecars {
	return v.value
}

func (v *NullableSidecars) Set(val *Sidecars) {
	v.value = val
	v.isSet = true
}

func (v NullableSidecars) IsSet() bool {
	return v.isSet
}

func (v *NullableSidecars) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSidecars(val *Sidecars) *NullableSidecars {
	return &NullableSidecars{value: val, isSet: true}
}

func (v NullableSidecars) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSidecars) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


