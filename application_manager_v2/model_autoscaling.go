/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Autoscaling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Autoscaling{}

// Autoscaling Use this object to provide CPU Based Horizontal Autoscaling configuration on deployment and redeployment operations. This object is optional. If Autoscaling is disabled and the fields \"minReplicas\" and \"maxReplicas\" are provided, they must match the value of \"target.replicas\" field. Learn more about Autoscaling at https://docs.mulesoft.com/cloudhub-2/ch2-configure-horizontal-autoscaling. 
type Autoscaling struct {
	// Enables or disables the Autoscaling feature. The possible values are: true or false. 
	Enabled *bool `json:"enabled,omitempty"`
	// Set the minimum amount of replicas for your deployment. The minimum accepted value is 1. The maximum is 3. 
	MinReplicas *int32 `json:"minReplicas,omitempty"`
	// Set the maximum amount of replicas your application can scale to. The minimum accepted value is 2. The maximum is 32. 
	MaxReplicas *int32 `json:"maxReplicas,omitempty"`
}

// NewAutoscaling instantiates a new Autoscaling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoscaling() *Autoscaling {
	this := Autoscaling{}
	return &this
}

// NewAutoscalingWithDefaults instantiates a new Autoscaling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoscalingWithDefaults() *Autoscaling {
	this := Autoscaling{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Autoscaling) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoscaling) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Autoscaling) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Autoscaling) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMinReplicas returns the MinReplicas field value if set, zero value otherwise.
func (o *Autoscaling) GetMinReplicas() int32 {
	if o == nil || IsNil(o.MinReplicas) {
		var ret int32
		return ret
	}
	return *o.MinReplicas
}

// GetMinReplicasOk returns a tuple with the MinReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoscaling) GetMinReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.MinReplicas) {
		return nil, false
	}
	return o.MinReplicas, true
}

// HasMinReplicas returns a boolean if a field has been set.
func (o *Autoscaling) HasMinReplicas() bool {
	if o != nil && !IsNil(o.MinReplicas) {
		return true
	}

	return false
}

// SetMinReplicas gets a reference to the given int32 and assigns it to the MinReplicas field.
func (o *Autoscaling) SetMinReplicas(v int32) {
	o.MinReplicas = &v
}

// GetMaxReplicas returns the MaxReplicas field value if set, zero value otherwise.
func (o *Autoscaling) GetMaxReplicas() int32 {
	if o == nil || IsNil(o.MaxReplicas) {
		var ret int32
		return ret
	}
	return *o.MaxReplicas
}

// GetMaxReplicasOk returns a tuple with the MaxReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoscaling) GetMaxReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxReplicas) {
		return nil, false
	}
	return o.MaxReplicas, true
}

// HasMaxReplicas returns a boolean if a field has been set.
func (o *Autoscaling) HasMaxReplicas() bool {
	if o != nil && !IsNil(o.MaxReplicas) {
		return true
	}

	return false
}

// SetMaxReplicas gets a reference to the given int32 and assigns it to the MaxReplicas field.
func (o *Autoscaling) SetMaxReplicas(v int32) {
	o.MaxReplicas = &v
}

func (o Autoscaling) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Autoscaling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MinReplicas) {
		toSerialize["minReplicas"] = o.MinReplicas
	}
	if !IsNil(o.MaxReplicas) {
		toSerialize["maxReplicas"] = o.MaxReplicas
	}
	return toSerialize, nil
}

type NullableAutoscaling struct {
	value *Autoscaling
	isSet bool
}

func (v NullableAutoscaling) Get() *Autoscaling {
	return v.value
}

func (v *NullableAutoscaling) Set(val *Autoscaling) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoscaling) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoscaling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoscaling(val *Autoscaling) *NullableAutoscaling {
	return &NullableAutoscaling{value: val, isSet: true}
}

func (v NullableAutoscaling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoscaling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


