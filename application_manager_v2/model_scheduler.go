/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Scheduler type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scheduler{}

// Scheduler struct for Scheduler
type Scheduler struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	FlowName *string `json:"flowName,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	TimeUnit *string `json:"timeUnit,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
	StartDelay *string `json:"startDelay,omitempty"`
	Expression *string `json:"expression,omitempty"`
	TimeZone *string `json:"timeZone,omitempty"`
}

// NewScheduler instantiates a new Scheduler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduler() *Scheduler {
	this := Scheduler{}
	return &this
}

// NewSchedulerWithDefaults instantiates a new Scheduler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerWithDefaults() *Scheduler {
	this := Scheduler{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Scheduler) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Scheduler) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Scheduler) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Scheduler) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Scheduler) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Scheduler) SetType(v string) {
	o.Type = &v
}

// GetFlowName returns the FlowName field value if set, zero value otherwise.
func (o *Scheduler) GetFlowName() string {
	if o == nil || IsNil(o.FlowName) {
		var ret string
		return ret
	}
	return *o.FlowName
}

// GetFlowNameOk returns a tuple with the FlowName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetFlowNameOk() (*string, bool) {
	if o == nil || IsNil(o.FlowName) {
		return nil, false
	}
	return o.FlowName, true
}

// HasFlowName returns a boolean if a field has been set.
func (o *Scheduler) HasFlowName() bool {
	if o != nil && !IsNil(o.FlowName) {
		return true
	}

	return false
}

// SetFlowName gets a reference to the given string and assigns it to the FlowName field.
func (o *Scheduler) SetFlowName(v string) {
	o.FlowName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Scheduler) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Scheduler) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Scheduler) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTimeUnit returns the TimeUnit field value if set, zero value otherwise.
func (o *Scheduler) GetTimeUnit() string {
	if o == nil || IsNil(o.TimeUnit) {
		var ret string
		return ret
	}
	return *o.TimeUnit
}

// GetTimeUnitOk returns a tuple with the TimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetTimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.TimeUnit) {
		return nil, false
	}
	return o.TimeUnit, true
}

// HasTimeUnit returns a boolean if a field has been set.
func (o *Scheduler) HasTimeUnit() bool {
	if o != nil && !IsNil(o.TimeUnit) {
		return true
	}

	return false
}

// SetTimeUnit gets a reference to the given string and assigns it to the TimeUnit field.
func (o *Scheduler) SetTimeUnit(v string) {
	o.TimeUnit = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *Scheduler) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *Scheduler) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *Scheduler) SetFrequency(v string) {
	o.Frequency = &v
}

// GetStartDelay returns the StartDelay field value if set, zero value otherwise.
func (o *Scheduler) GetStartDelay() string {
	if o == nil || IsNil(o.StartDelay) {
		var ret string
		return ret
	}
	return *o.StartDelay
}

// GetStartDelayOk returns a tuple with the StartDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetStartDelayOk() (*string, bool) {
	if o == nil || IsNil(o.StartDelay) {
		return nil, false
	}
	return o.StartDelay, true
}

// HasStartDelay returns a boolean if a field has been set.
func (o *Scheduler) HasStartDelay() bool {
	if o != nil && !IsNil(o.StartDelay) {
		return true
	}

	return false
}

// SetStartDelay gets a reference to the given string and assigns it to the StartDelay field.
func (o *Scheduler) SetStartDelay(v string) {
	o.StartDelay = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *Scheduler) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *Scheduler) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *Scheduler) SetExpression(v string) {
	o.Expression = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *Scheduler) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *Scheduler) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *Scheduler) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o Scheduler) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scheduler) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.FlowName) {
		toSerialize["flowName"] = o.FlowName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.TimeUnit) {
		toSerialize["timeUnit"] = o.TimeUnit
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.StartDelay) {
		toSerialize["startDelay"] = o.StartDelay
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	return toSerialize, nil
}

type NullableScheduler struct {
	value *Scheduler
	isSet bool
}

func (v NullableScheduler) Get() *Scheduler {
	return v.value
}

func (v *NullableScheduler) Set(val *Scheduler) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduler) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduler(val *Scheduler) *NullableScheduler {
	return &NullableScheduler{value: val, isSet: true}
}

func (v NullableScheduler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


