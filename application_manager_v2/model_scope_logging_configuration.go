/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the ScopeLoggingConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeLoggingConfiguration{}

// ScopeLoggingConfiguration struct for ScopeLoggingConfiguration
type ScopeLoggingConfiguration struct {
	Scope *string `json:"scope,omitempty"`
	LogLevel *string `json:"logLevel,omitempty"`
}

// NewScopeLoggingConfiguration instantiates a new ScopeLoggingConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeLoggingConfiguration() *ScopeLoggingConfiguration {
	this := ScopeLoggingConfiguration{}
	return &this
}

// NewScopeLoggingConfigurationWithDefaults instantiates a new ScopeLoggingConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeLoggingConfigurationWithDefaults() *ScopeLoggingConfiguration {
	this := ScopeLoggingConfiguration{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ScopeLoggingConfiguration) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeLoggingConfiguration) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ScopeLoggingConfiguration) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *ScopeLoggingConfiguration) SetScope(v string) {
	o.Scope = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *ScopeLoggingConfiguration) GetLogLevel() string {
	if o == nil || IsNil(o.LogLevel) {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeLoggingConfiguration) GetLogLevelOk() (*string, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *ScopeLoggingConfiguration) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *ScopeLoggingConfiguration) SetLogLevel(v string) {
	o.LogLevel = &v
}

func (o ScopeLoggingConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeLoggingConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.LogLevel) {
		toSerialize["logLevel"] = o.LogLevel
	}
	return toSerialize, nil
}

type NullableScopeLoggingConfiguration struct {
	value *ScopeLoggingConfiguration
	isSet bool
}

func (v NullableScopeLoggingConfiguration) Get() *ScopeLoggingConfiguration {
	return v.value
}

func (v *NullableScopeLoggingConfiguration) Set(val *ScopeLoggingConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeLoggingConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeLoggingConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeLoggingConfiguration(val *ScopeLoggingConfiguration) *NullableScopeLoggingConfiguration {
	return &NullableScopeLoggingConfiguration{value: val, isSet: true}
}

func (v NullableScopeLoggingConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeLoggingConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


