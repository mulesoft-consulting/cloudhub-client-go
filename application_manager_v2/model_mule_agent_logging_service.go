/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the MuleAgentLoggingService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MuleAgentLoggingService{}

// MuleAgentLoggingService struct for MuleAgentLoggingService
type MuleAgentLoggingService struct {
	ArtifactName *string `json:"artifactName,omitempty"`
	ScopeLoggingConfigurations []ScopeLoggingConfiguration `json:"scopeLoggingConfigurations,omitempty"`
}

// NewMuleAgentLoggingService instantiates a new MuleAgentLoggingService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMuleAgentLoggingService() *MuleAgentLoggingService {
	this := MuleAgentLoggingService{}
	return &this
}

// NewMuleAgentLoggingServiceWithDefaults instantiates a new MuleAgentLoggingService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMuleAgentLoggingServiceWithDefaults() *MuleAgentLoggingService {
	this := MuleAgentLoggingService{}
	return &this
}

// GetArtifactName returns the ArtifactName field value if set, zero value otherwise.
func (o *MuleAgentLoggingService) GetArtifactName() string {
	if o == nil || IsNil(o.ArtifactName) {
		var ret string
		return ret
	}
	return *o.ArtifactName
}

// GetArtifactNameOk returns a tuple with the ArtifactName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MuleAgentLoggingService) GetArtifactNameOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactName) {
		return nil, false
	}
	return o.ArtifactName, true
}

// HasArtifactName returns a boolean if a field has been set.
func (o *MuleAgentLoggingService) HasArtifactName() bool {
	if o != nil && !IsNil(o.ArtifactName) {
		return true
	}

	return false
}

// SetArtifactName gets a reference to the given string and assigns it to the ArtifactName field.
func (o *MuleAgentLoggingService) SetArtifactName(v string) {
	o.ArtifactName = &v
}

// GetScopeLoggingConfigurations returns the ScopeLoggingConfigurations field value if set, zero value otherwise.
func (o *MuleAgentLoggingService) GetScopeLoggingConfigurations() []ScopeLoggingConfiguration {
	if o == nil || IsNil(o.ScopeLoggingConfigurations) {
		var ret []ScopeLoggingConfiguration
		return ret
	}
	return o.ScopeLoggingConfigurations
}

// GetScopeLoggingConfigurationsOk returns a tuple with the ScopeLoggingConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MuleAgentLoggingService) GetScopeLoggingConfigurationsOk() ([]ScopeLoggingConfiguration, bool) {
	if o == nil || IsNil(o.ScopeLoggingConfigurations) {
		return nil, false
	}
	return o.ScopeLoggingConfigurations, true
}

// HasScopeLoggingConfigurations returns a boolean if a field has been set.
func (o *MuleAgentLoggingService) HasScopeLoggingConfigurations() bool {
	if o != nil && !IsNil(o.ScopeLoggingConfigurations) {
		return true
	}

	return false
}

// SetScopeLoggingConfigurations gets a reference to the given []ScopeLoggingConfiguration and assigns it to the ScopeLoggingConfigurations field.
func (o *MuleAgentLoggingService) SetScopeLoggingConfigurations(v []ScopeLoggingConfiguration) {
	o.ScopeLoggingConfigurations = v
}

func (o MuleAgentLoggingService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MuleAgentLoggingService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArtifactName) {
		toSerialize["artifactName"] = o.ArtifactName
	}
	if !IsNil(o.ScopeLoggingConfigurations) {
		toSerialize["scopeLoggingConfigurations"] = o.ScopeLoggingConfigurations
	}
	return toSerialize, nil
}

type NullableMuleAgentLoggingService struct {
	value *MuleAgentLoggingService
	isSet bool
}

func (v NullableMuleAgentLoggingService) Get() *MuleAgentLoggingService {
	return v.value
}

func (v *NullableMuleAgentLoggingService) Set(val *MuleAgentLoggingService) {
	v.value = val
	v.isSet = true
}

func (v NullableMuleAgentLoggingService) IsSet() bool {
	return v.isSet
}

func (v *NullableMuleAgentLoggingService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMuleAgentLoggingService(val *MuleAgentLoggingService) *NullableMuleAgentLoggingService {
	return &NullableMuleAgentLoggingService{value: val, isSet: true}
}

func (v NullableMuleAgentLoggingService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMuleAgentLoggingService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


