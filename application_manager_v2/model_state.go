/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
	"fmt"
)

// State the model 'State'
type State string

// List of State
const (
	PARTIALLY_STARTED State = "PARTIALLY_STARTED"
	DEPLOYMENT_FAILED State = "DEPLOYMENT_FAILED"
	STARTING State = "STARTING"
	STARTED State = "STARTED"
	STOPPING State = "STOPPING"
	STOPPED State = "STOPPED"
	UNDEPLOYING State = "UNDEPLOYING"
	UNDEPLOYED State = "UNDEPLOYED"
	UPDATED State = "UPDATED"
	APPLIED State = "APPLIED"
	APPLYING State = "APPLYING"
	FAILED State = "FAILED"
	DELETED State = "DELETED"
)

// All allowed values of State enum
var AllowedStateEnumValues = []State{
	"PARTIALLY_STARTED",
	"DEPLOYMENT_FAILED",
	"STARTING",
	"STARTED",
	"STOPPING",
	"STOPPED",
	"UNDEPLOYING",
	"UNDEPLOYED",
	"UPDATED",
	"APPLIED",
	"APPLYING",
	"FAILED",
	"DELETED",
}

func (v *State) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := State(value)
	for _, existing := range AllowedStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid State", value)
}

// NewStateFromValue returns a pointer to a valid State
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStateFromValue(v string) (*State, error) {
	ev := State(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for State: valid values are %v", v, AllowedStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v State) IsValid() bool {
	for _, existing := range AllowedStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to State value
func (v State) Ptr() *State {
	return &v
}

type NullableState struct {
	value *State
	isSet bool
}

func (v NullableState) Get() *State {
	return v.value
}

func (v *NullableState) Set(val *State) {
	v.value = val
	v.isSet = true
}

func (v NullableState) IsSet() bool {
	return v.isSet
}

func (v *NullableState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableState(val *State) *NullableState {
	return &NullableState{value: val, isSet: true}
}

func (v NullableState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

