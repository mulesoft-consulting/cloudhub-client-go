/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the Replicas type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Replicas{}

// Replicas The list of replicas for the specified deployment.
type Replicas struct {
	// The id of the replica in RTF
	Id *string `json:"id,omitempty"`
	// The current state of the replica
	State *string `json:"state,omitempty"`
	// The node id in which the replica is deployed.
	DeploymentLocation *string `json:"deploymentLocation,omitempty"`
	// The version deployed in the replica.
	CurrentDeploymentVersion *string `json:"currentDeploymentVersion,omitempty"`
	// In case of an error, it should provide information about the root cause.
	Reason *string `json:"reason,omitempty"`
}

// NewReplicas instantiates a new Replicas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicas() *Replicas {
	this := Replicas{}
	return &this
}

// NewReplicasWithDefaults instantiates a new Replicas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicasWithDefaults() *Replicas {
	this := Replicas{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Replicas) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replicas) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Replicas) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Replicas) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Replicas) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replicas) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Replicas) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Replicas) SetState(v string) {
	o.State = &v
}

// GetDeploymentLocation returns the DeploymentLocation field value if set, zero value otherwise.
func (o *Replicas) GetDeploymentLocation() string {
	if o == nil || IsNil(o.DeploymentLocation) {
		var ret string
		return ret
	}
	return *o.DeploymentLocation
}

// GetDeploymentLocationOk returns a tuple with the DeploymentLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replicas) GetDeploymentLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentLocation) {
		return nil, false
	}
	return o.DeploymentLocation, true
}

// HasDeploymentLocation returns a boolean if a field has been set.
func (o *Replicas) HasDeploymentLocation() bool {
	if o != nil && !IsNil(o.DeploymentLocation) {
		return true
	}

	return false
}

// SetDeploymentLocation gets a reference to the given string and assigns it to the DeploymentLocation field.
func (o *Replicas) SetDeploymentLocation(v string) {
	o.DeploymentLocation = &v
}

// GetCurrentDeploymentVersion returns the CurrentDeploymentVersion field value if set, zero value otherwise.
func (o *Replicas) GetCurrentDeploymentVersion() string {
	if o == nil || IsNil(o.CurrentDeploymentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentDeploymentVersion
}

// GetCurrentDeploymentVersionOk returns a tuple with the CurrentDeploymentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replicas) GetCurrentDeploymentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentDeploymentVersion) {
		return nil, false
	}
	return o.CurrentDeploymentVersion, true
}

// HasCurrentDeploymentVersion returns a boolean if a field has been set.
func (o *Replicas) HasCurrentDeploymentVersion() bool {
	if o != nil && !IsNil(o.CurrentDeploymentVersion) {
		return true
	}

	return false
}

// SetCurrentDeploymentVersion gets a reference to the given string and assigns it to the CurrentDeploymentVersion field.
func (o *Replicas) SetCurrentDeploymentVersion(v string) {
	o.CurrentDeploymentVersion = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Replicas) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Replicas) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Replicas) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Replicas) SetReason(v string) {
	o.Reason = &v
}

func (o Replicas) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Replicas) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.DeploymentLocation) {
		toSerialize["deploymentLocation"] = o.DeploymentLocation
	}
	if !IsNil(o.CurrentDeploymentVersion) {
		toSerialize["currentDeploymentVersion"] = o.CurrentDeploymentVersion
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableReplicas struct {
	value *Replicas
	isSet bool
}

func (v NullableReplicas) Get() *Replicas {
	return v.value
}

func (v *NullableReplicas) Set(val *Replicas) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicas) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicas(val *Replicas) *NullableReplicas {
	return &NullableReplicas{value: val, isSet: true}
}

func (v NullableReplicas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


