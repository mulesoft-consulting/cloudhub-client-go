/*
Deployment

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Runtime Fabric and CloudHub 2.0 targets only. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v2

import (
	"encoding/json"
)

// checks if the AnypointMonitoring type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnypointMonitoring{}

// AnypointMonitoring struct for AnypointMonitoring
type AnypointMonitoring struct {
	Image *string `json:"image,omitempty"`
	Resources *AnypointMonitoringResources `json:"resources,omitempty"`
}

// NewAnypointMonitoring instantiates a new AnypointMonitoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnypointMonitoring() *AnypointMonitoring {
	this := AnypointMonitoring{}
	return &this
}

// NewAnypointMonitoringWithDefaults instantiates a new AnypointMonitoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnypointMonitoringWithDefaults() *AnypointMonitoring {
	this := AnypointMonitoring{}
	return &this
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *AnypointMonitoring) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnypointMonitoring) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *AnypointMonitoring) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *AnypointMonitoring) SetImage(v string) {
	o.Image = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *AnypointMonitoring) GetResources() AnypointMonitoringResources {
	if o == nil || IsNil(o.Resources) {
		var ret AnypointMonitoringResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnypointMonitoring) GetResourcesOk() (*AnypointMonitoringResources, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *AnypointMonitoring) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given AnypointMonitoringResources and assigns it to the Resources field.
func (o *AnypointMonitoring) SetResources(v AnypointMonitoringResources) {
	o.Resources = &v
}

func (o AnypointMonitoring) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnypointMonitoring) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

type NullableAnypointMonitoring struct {
	value *AnypointMonitoring
	isSet bool
}

func (v NullableAnypointMonitoring) Get() *AnypointMonitoring {
	return v.value
}

func (v *NullableAnypointMonitoring) Set(val *AnypointMonitoring) {
	v.value = val
	v.isSet = true
}

func (v NullableAnypointMonitoring) IsSet() bool {
	return v.isSet
}

func (v *NullableAnypointMonitoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnypointMonitoring(val *AnypointMonitoring) *NullableAnypointMonitoring {
	return &NullableAnypointMonitoring{value: val, isSet: true}
}

func (v NullableAnypointMonitoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnypointMonitoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


