/*
Alert Runtime Manager

Description of the Alert in Runtime Manager API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rm_alerts

import (
	"encoding/json"
)

// checks if the AlertBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertBody{}

// AlertBody struct for AlertBody
type AlertBody struct {
	Name *string `json:"name,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Condition *Condition `json:"condition,omitempty"`
	Actions []Action `json:"actions,omitempty"`
}

// NewAlertBody instantiates a new AlertBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertBody() *AlertBody {
	this := AlertBody{}
	return &this
}

// NewAlertBodyWithDefaults instantiates a new AlertBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertBodyWithDefaults() *AlertBody {
	this := AlertBody{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AlertBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AlertBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AlertBody) SetName(v string) {
	o.Name = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AlertBody) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertBody) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AlertBody) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *AlertBody) SetSeverity(v string) {
	o.Severity = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *AlertBody) GetCondition() Condition {
	if o == nil || IsNil(o.Condition) {
		var ret Condition
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertBody) GetConditionOk() (*Condition, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *AlertBody) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given Condition and assigns it to the Condition field.
func (o *AlertBody) SetCondition(v Condition) {
	o.Condition = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *AlertBody) GetActions() []Action {
	if o == nil || IsNil(o.Actions) {
		var ret []Action
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertBody) GetActionsOk() ([]Action, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *AlertBody) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []Action and assigns it to the Actions field.
func (o *AlertBody) SetActions(v []Action) {
	o.Actions = v
}

func (o AlertBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	return toSerialize, nil
}

type NullableAlertBody struct {
	value *AlertBody
	isSet bool
}

func (v NullableAlertBody) Get() *AlertBody {
	return v.value
}

func (v *NullableAlertBody) Set(val *AlertBody) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertBody) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertBody(val *AlertBody) *NullableAlertBody {
	return &NullableAlertBody{value: val, isSet: true}
}

func (v NullableAlertBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


