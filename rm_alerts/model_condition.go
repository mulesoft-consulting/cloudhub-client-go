/*
Alert Runtime Manager

Description of the Alert in Runtime Manager API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rm_alerts

import (
	"encoding/json"
)

// checks if the Condition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Condition{}

// Condition struct for Condition
type Condition struct {
	Operator *string `json:"operator,omitempty"`
	PeriodCount *int32 `json:"periodCount,omitempty"`
	Value *int32 `json:"value,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Type *string `json:"type,omitempty"`
	PeriodMins *int32 `json:"periodMins,omitempty"`
	Resources []string `json:"resources,omitempty"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition() *Condition {
	this := Condition{}
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *Condition) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *Condition) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *Condition) SetOperator(v string) {
	o.Operator = &v
}

// GetPeriodCount returns the PeriodCount field value if set, zero value otherwise.
func (o *Condition) GetPeriodCount() int32 {
	if o == nil || IsNil(o.PeriodCount) {
		var ret int32
		return ret
	}
	return *o.PeriodCount
}

// GetPeriodCountOk returns a tuple with the PeriodCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetPeriodCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodCount) {
		return nil, false
	}
	return o.PeriodCount, true
}

// HasPeriodCount returns a boolean if a field has been set.
func (o *Condition) HasPeriodCount() bool {
	if o != nil && !IsNil(o.PeriodCount) {
		return true
	}

	return false
}

// SetPeriodCount gets a reference to the given int32 and assigns it to the PeriodCount field.
func (o *Condition) SetPeriodCount(v int32) {
	o.PeriodCount = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Condition) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Condition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *Condition) SetValue(v int32) {
	o.Value = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Condition) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Condition) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *Condition) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Condition) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Condition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Condition) SetType(v string) {
	o.Type = &v
}

// GetPeriodMins returns the PeriodMins field value if set, zero value otherwise.
func (o *Condition) GetPeriodMins() int32 {
	if o == nil || IsNil(o.PeriodMins) {
		var ret int32
		return ret
	}
	return *o.PeriodMins
}

// GetPeriodMinsOk returns a tuple with the PeriodMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetPeriodMinsOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodMins) {
		return nil, false
	}
	return o.PeriodMins, true
}

// HasPeriodMins returns a boolean if a field has been set.
func (o *Condition) HasPeriodMins() bool {
	if o != nil && !IsNil(o.PeriodMins) {
		return true
	}

	return false
}

// SetPeriodMins gets a reference to the given int32 and assigns it to the PeriodMins field.
func (o *Condition) SetPeriodMins(v int32) {
	o.PeriodMins = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Condition) GetResources() []string {
	if o == nil || IsNil(o.Resources) {
		var ret []string
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Condition) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []string and assigns it to the Resources field.
func (o *Condition) SetResources(v []string) {
	o.Resources = v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Condition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.PeriodCount) {
		toSerialize["periodCount"] = o.PeriodCount
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PeriodMins) {
		toSerialize["periodMins"] = o.PeriodMins
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


