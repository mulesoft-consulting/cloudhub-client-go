/*
Alert Runtime Manager

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rm_alerts

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/rm_alerts"
)

func Test_rm_alerts_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService AlertsAlertIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertId string

		httpRes, err := apiClient.DefaultApi.AlertsAlertIdDelete(context.Background(), alertId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AlertsAlertIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertId string

		resp, httpRes, err := apiClient.DefaultApi.AlertsAlertIdGet(context.Background(), alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AlertsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.AlertsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService AlertsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.AlertsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ModifyOneAlert", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertId string

		resp, httpRes, err := apiClient.DefaultApi.ModifyOneAlert(context.Background(), alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
