/*
Invite API

Description of the Invite API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package invite

import (
	"encoding/json"
)

// checks if the InviteDelete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteDelete{}

// InviteDelete struct for InviteDelete
type InviteDelete struct {
	InviteId *string `json:"inviteId,omitempty"`
}

// NewInviteDelete instantiates a new InviteDelete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteDelete() *InviteDelete {
	this := InviteDelete{}
	return &this
}

// NewInviteDeleteWithDefaults instantiates a new InviteDelete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteDeleteWithDefaults() *InviteDelete {
	this := InviteDelete{}
	return &this
}

// GetInviteId returns the InviteId field value if set, zero value otherwise.
func (o *InviteDelete) GetInviteId() string {
	if o == nil || IsNil(o.InviteId) {
		var ret string
		return ret
	}
	return *o.InviteId
}

// GetInviteIdOk returns a tuple with the InviteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteDelete) GetInviteIdOk() (*string, bool) {
	if o == nil || IsNil(o.InviteId) {
		return nil, false
	}
	return o.InviteId, true
}

// HasInviteId returns a boolean if a field has been set.
func (o *InviteDelete) HasInviteId() bool {
	if o != nil && !IsNil(o.InviteId) {
		return true
	}

	return false
}

// SetInviteId gets a reference to the given string and assigns it to the InviteId field.
func (o *InviteDelete) SetInviteId(v string) {
	o.InviteId = &v
}

func (o InviteDelete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteDelete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InviteId) {
		toSerialize["inviteId"] = o.InviteId
	}
	return toSerialize, nil
}

type NullableInviteDelete struct {
	value *InviteDelete
	isSet bool
}

func (v NullableInviteDelete) Get() *InviteDelete {
	return v.value
}

func (v *NullableInviteDelete) Set(val *InviteDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteDelete(val *InviteDelete) *NullableInviteDelete {
	return &NullableInviteDelete{value: val, isSet: true}
}

func (v NullableInviteDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


