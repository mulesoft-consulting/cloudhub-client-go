/*
VPN API

Description of the VPN API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecGetRequest) Execute() (*OrganizationsOrgIdVpcsVpcIdIpsecGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdIpsecGetExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdIpsecGet Returns a list of vpns.

Returns a list of VPNs for the given organization and VPC

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param vpcId The vpc Id
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecGet(ctx context.Context, orgId string, vpcId string) DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecGetRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
	}
}

// Execute executes the request
//  @return OrganizationsOrgIdVpcsVpcIdIpsecGet200Response
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecGetExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecGetRequest) (*OrganizationsOrgIdVpcsVpcIdIpsecGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrgIdVpcsVpcIdIpsecGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdIpsecGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/ipsec"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
	vpnPostReqBody *VpnPostReqBody
}

// VPN request body
func (r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest) VpnPostReqBody(vpnPostReqBody VpnPostReqBody) DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest {
	r.vpnPostReqBody = &vpnPostReqBody
	return r
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest) Execute() (*VpnPost, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdIpsecPostExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdIpsecPost Creates a VPN.

Create a VPN connection from a VPC, up to a limit of 10 total VPN Connections per

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param vpcId The vpc Id
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecPost(ctx context.Context, orgId string, vpcId string) DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
	}
}

// Execute executes the request
//  @return VpnPost
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecPostExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecPostRequest) (*VpnPost, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VpnPost
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdIpsecPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/ipsec"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpnPostReqBody == nil {
		return localVarReturnValue, nil, reportError("vpnPostReqBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpnPostReqBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
	vpnId string
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdIpsecVpnIdDelete Delete a VPN connection

The VPN connection from a VPC.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param vpcId The vpc Id
 @param vpnId The vpn Id
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecVpnIdDelete(ctx context.Context, orgId string, vpcId string, vpnId string) DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
		vpnId: vpnId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdIpsecVpnIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/ipsec/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterValueToString(r.vpnId, "vpnId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
	vpnId string
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetRequest) Execute() (*VpnGet, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdIpsecVpnIdGet Returns a a specific vpn

Returns a specific VPN for the given vpn, organization and VPC

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param vpcId The vpc Id
 @param vpnId The vpn Id
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecVpnIdGet(ctx context.Context, orgId string, vpcId string, vpnId string) DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
		vpnId: vpnId,
	}
}

// Execute executes the request
//  @return VpnGet
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdIpsecVpnIdGetRequest) (*VpnGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VpnGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdIpsecVpnIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/ipsec/{vpnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpnId"+"}", url.PathEscape(parameterValueToString(r.vpnId, "vpnId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
