/*
ENV API

Description of the ENV API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package env

import (
	"encoding/json"
)

// checks if the EnvId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvId{}

// EnvId struct for EnvId
type EnvId struct {
	// The env Id
	Id string `json:"id"`
}

// NewEnvId instantiates a new EnvId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvId(id string) *EnvId {
	this := EnvId{}
	this.Id = id
	return &this
}

// NewEnvIdWithDefaults instantiates a new EnvId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvIdWithDefaults() *EnvId {
	this := EnvId{}
	return &this
}

// GetId returns the Id field value
func (o *EnvId) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvId) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvId) SetId(v string) {
	o.Id = v
}

func (o EnvId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableEnvId struct {
	value *EnvId
	isSet bool
}

func (v NullableEnvId) Get() *EnvId {
	return v.value
}

func (v *NullableEnvId) Set(val *EnvId) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvId) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvId(val *EnvId) *NullableEnvId {
	return &NullableEnvId{value: val, isSet: true}
}

func (v NullableEnvId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


