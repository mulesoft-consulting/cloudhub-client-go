/*
Dedicated Load Balancer API

Description of the DLB API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dlb

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
	dlbId string
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDelete Method for OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDelete

Deletes a DLB

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param vpcId The ID of the VPC in GUID format
 @param dlbId The ID of the DLB in GUID format
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDelete(ctx context.Context, orgId string, vpcId string, dlbId string) DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
		dlbId: dlbId,
	}
}

// Execute executes the request
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/loadbalancers/{dlbId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dlbId"+"}", url.PathEscape(parameterValueToString(r.dlbId, "dlbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
	dlbId string
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetRequest) Execute() (*Dlb, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGet Method for OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGet

Retrieves a DLB by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param vpcId The ID of the VPC in GUID format
 @param dlbId The ID of the DLB in GUID format
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGet(ctx context.Context, orgId string, vpcId string, dlbId string) DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
		dlbId: dlbId,
	}
}

// Execute executes the request
//  @return Dlb
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGetRequest) (*Dlb, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Dlb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/loadbalancers/{dlbId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dlbId"+"}", url.PathEscape(parameterValueToString(r.dlbId, "dlbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
	dlbId string
	updateObject *[]UpdateObject
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest) UpdateObject(updateObject []UpdateObject) DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest {
	r.updateObject = &updateObject
	return r
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest) Execute() (*Dlb, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatch Method for OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatch

Updates a dlb. uses JSON Patch body object

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param vpcId The ID of the VPC in GUID format
 @param dlbId The ID of the DLB in GUID format
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatch(ctx context.Context, orgId string, vpcId string, dlbId string) DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
		dlbId: dlbId,
	}
}

// Execute executes the request
//  @return Dlb
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatchRequest) (*Dlb, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Dlb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersDlbIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/loadbalancers/{dlbId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dlbId"+"}", url.PathEscape(parameterValueToString(r.dlbId, "dlbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateObject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OrganizationsOrgIdVpcsVpcIdLoadbalancersPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersGetRequest) Execute() (*OrganizationsOrgIdVpcsVpcIdLoadbalancersGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersGetExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdLoadbalancersGet Method for OrganizationsOrgIdVpcsVpcIdLoadbalancersGet

Returns all loadbalancers in the given vpc

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param vpcId The ID of the VPC in GUID format
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersGet(ctx context.Context, orgId string, vpcId string) DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersGetRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
	}
}

// Execute executes the request
//  @return OrganizationsOrgIdVpcsVpcIdLoadbalancersGet200Response
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersGetExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersGetRequest) (*OrganizationsOrgIdVpcsVpcIdLoadbalancersGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrgIdVpcsVpcIdLoadbalancersGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/loadbalancers"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	vpcId string
	dlbPostBody *DlbPostBody
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest) DlbPostBody(dlbPostBody DlbPostBody) DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest {
	r.dlbPostBody = &dlbPostBody
	return r
}

func (r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest) Execute() (*Dlb, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersPostExecute(r)
}

/*
OrganizationsOrgIdVpcsVpcIdLoadbalancersPost Method for OrganizationsOrgIdVpcsVpcIdLoadbalancersPost

create a DLB

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param vpcId The ID of the VPC in GUID format
 @return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersPost(ctx context.Context, orgId string, vpcId string) DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest {
	return DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		vpcId: vpcId,
	}
}

// Execute executes the request
//  @return Dlb
func (a *DefaultApiService) OrganizationsOrgIdVpcsVpcIdLoadbalancersPostExecute(r DefaultApiOrganizationsOrgIdVpcsVpcIdLoadbalancersPostRequest) (*Dlb, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Dlb
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdVpcsVpcIdLoadbalancersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/vpcs/{vpcId}/loadbalancers"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpcId"+"}", url.PathEscape(parameterValueToString(r.vpcId, "vpcId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dlbPostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OrganizationsOrgIdVpcsVpcIdLoadbalancersPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
