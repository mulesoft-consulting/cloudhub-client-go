/*
Anypoint MQ Exchange specfication

Anypoint MQ Exchange API specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ame

import (
	"encoding/json"
)

// checks if the Exchange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Exchange{}

// Exchange struct for Exchange
type Exchange struct {
	Encrypted *bool `json:"encrypted,omitempty"`
	Type *string `json:"type,omitempty"`
	ExchangeId *string `json:"exchangeId,omitempty"`
}

// NewExchange instantiates a new Exchange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchange() *Exchange {
	this := Exchange{}
	return &this
}

// NewExchangeWithDefaults instantiates a new Exchange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeWithDefaults() *Exchange {
	this := Exchange{}
	return &this
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *Exchange) GetEncrypted() bool {
	if o == nil || IsNil(o.Encrypted) {
		var ret bool
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Encrypted) {
		return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *Exchange) HasEncrypted() bool {
	if o != nil && !IsNil(o.Encrypted) {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given bool and assigns it to the Encrypted field.
func (o *Exchange) SetEncrypted(v bool) {
	o.Encrypted = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Exchange) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Exchange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Exchange) SetType(v string) {
	o.Type = &v
}

// GetExchangeId returns the ExchangeId field value if set, zero value otherwise.
func (o *Exchange) GetExchangeId() string {
	if o == nil || IsNil(o.ExchangeId) {
		var ret string
		return ret
	}
	return *o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange) GetExchangeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeId) {
		return nil, false
	}
	return o.ExchangeId, true
}

// HasExchangeId returns a boolean if a field has been set.
func (o *Exchange) HasExchangeId() bool {
	if o != nil && !IsNil(o.ExchangeId) {
		return true
	}

	return false
}

// SetExchangeId gets a reference to the given string and assigns it to the ExchangeId field.
func (o *Exchange) SetExchangeId(v string) {
	o.ExchangeId = &v
}

func (o Exchange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Exchange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ExchangeId) {
		toSerialize["exchangeId"] = o.ExchangeId
	}
	return toSerialize, nil
}

type NullableExchange struct {
	value *Exchange
	isSet bool
}

func (v NullableExchange) Get() *Exchange {
	return v.value
}

func (v *NullableExchange) Set(val *Exchange) {
	v.value = val
	v.isSet = true
}

func (v NullableExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchange(val *Exchange) *NullableExchange {
	return &NullableExchange{value: val, isSet: true}
}

func (v NullableExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


