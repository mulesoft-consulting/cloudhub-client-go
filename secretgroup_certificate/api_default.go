/*
Secret Group Certificate API

Secret Group Certificate API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_certificate

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiGetSecretGroupCertificateDetailsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
}

func (r DefaultApiGetSecretGroupCertificateDetailsRequest) Execute() (*Certificate, *http.Response, error) {
	return r.ApiService.GetSecretGroupCertificateDetailsExecute(r)
}

/*
GetSecretGroupCertificateDetails Retrieve certificate details

Retrieves certificate details by id for a given secret group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The truststore id
 @return DefaultApiGetSecretGroupCertificateDetailsRequest
*/
func (a *DefaultApiService) GetSecretGroupCertificateDetails(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiGetSecretGroupCertificateDetailsRequest {
	return DefaultApiGetSecretGroupCertificateDetailsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return Certificate
func (a *DefaultApiService) GetSecretGroupCertificateDetailsExecute(r DefaultApiGetSecretGroupCertificateDetailsRequest) (*Certificate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Certificate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetSecretGroupCertificateDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/certificates/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupCertificateDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetSecretGroupCertificatesRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
}

func (r DefaultApiGetSecretGroupCertificatesRequest) Execute() ([]CertificateSummary, *http.Response, error) {
	return r.ApiService.GetSecretGroupCertificatesExecute(r)
}

/*
GetSecretGroupCertificates Retrieves a secret-groups' collection of certificates.

Retrieves a secret-groups' collection of certificates.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @return DefaultApiGetSecretGroupCertificatesRequest
*/
func (a *DefaultApiService) GetSecretGroupCertificates(ctx context.Context, orgId string, envId string, secretGroupId string) DefaultApiGetSecretGroupCertificatesRequest {
	return DefaultApiGetSecretGroupCertificatesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
	}
}

// Execute executes the request
//  @return []CertificateSummary
func (a *DefaultApiService) GetSecretGroupCertificatesExecute(r DefaultApiGetSecretGroupCertificatesRequest) ([]CertificateSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CertificateSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetSecretGroupCertificates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/certificates"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPatchSecretGroupCertificateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
	body *map[string]interface{}
}

func (r DefaultApiPatchSecretGroupCertificateRequest) Body(body map[string]interface{}) DefaultApiPatchSecretGroupCertificateRequest {
	r.body = &body
	return r
}

func (r DefaultApiPatchSecretGroupCertificateRequest) Execute() (*PutSecretGroupCertificate200Response, *http.Response, error) {
	return r.ApiService.PatchSecretGroupCertificateExecute(r)
}

/*
PatchSecretGroupCertificate Update a given secret-group certificate

Update certificate details for a given secret-group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The truststore id
 @return DefaultApiPatchSecretGroupCertificateRequest
*/
func (a *DefaultApiService) PatchSecretGroupCertificate(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiPatchSecretGroupCertificateRequest {
	return DefaultApiPatchSecretGroupCertificateRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return PutSecretGroupCertificate200Response
func (a *DefaultApiService) PatchSecretGroupCertificateExecute(r DefaultApiPatchSecretGroupCertificateRequest) (*PutSecretGroupCertificate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutSecretGroupCertificate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchSecretGroupCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/certificates/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json:"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupCertificateDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPostSecretGroupCertificateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	allowExpiredCert *bool
	expirationDate *string
	certStore *os.File
	type_ *string
	name *string
}

// With &#39;true&#39; to allow uploading expired certificates
func (r DefaultApiPostSecretGroupCertificateRequest) AllowExpiredCert(allowExpiredCert bool) DefaultApiPostSecretGroupCertificateRequest {
	r.allowExpiredCert = &allowExpiredCert
	return r
}

// Date on which this secret should expire. If not set, by default, it will be set to notAfter date of this certificate.  Once the secret expires, a grant can not be requested for it. 
func (r DefaultApiPostSecretGroupCertificateRequest) ExpirationDate(expirationDate string) DefaultApiPostSecretGroupCertificateRequest {
	r.expirationDate = &expirationDate
	return r
}

// The file containing the certificate in PEM format
func (r DefaultApiPostSecretGroupCertificateRequest) CertStore(certStore *os.File) DefaultApiPostSecretGroupCertificateRequest {
	r.certStore = certStore
	return r
}

// Type of certificate supported
func (r DefaultApiPostSecretGroupCertificateRequest) Type_(type_ string) DefaultApiPostSecretGroupCertificateRequest {
	r.type_ = &type_
	return r
}

// The name of the certificate
func (r DefaultApiPostSecretGroupCertificateRequest) Name(name string) DefaultApiPostSecretGroupCertificateRequest {
	r.name = &name
	return r
}

func (r DefaultApiPostSecretGroupCertificateRequest) Execute() (*PostSecretGroupCertificate201Response, *http.Response, error) {
	return r.ApiService.PostSecretGroupCertificateExecute(r)
}

/*
PostSecretGroupCertificate Create a secret-groups' certificate.

Create a secret-groups' certificate.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @return DefaultApiPostSecretGroupCertificateRequest
*/
func (a *DefaultApiService) PostSecretGroupCertificate(ctx context.Context, orgId string, envId string, secretGroupId string) DefaultApiPostSecretGroupCertificateRequest {
	return DefaultApiPostSecretGroupCertificateRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
	}
}

// Execute executes the request
//  @return PostSecretGroupCertificate201Response
func (a *DefaultApiService) PostSecretGroupCertificateExecute(r DefaultApiPostSecretGroupCertificateRequest) (*PostSecretGroupCertificate201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostSecretGroupCertificate201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostSecretGroupCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/certificates"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.allowExpiredCert == nil {
		return localVarReturnValue, nil, reportError("allowExpiredCert is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "allowExpiredCert", r.allowExpiredCert, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.expirationDate != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "expirationDate", r.expirationDate, "")
	}
	var certStoreLocalVarFormFileName string
	var certStoreLocalVarFileName     string
	var certStoreLocalVarFileBytes    []byte

	certStoreLocalVarFormFileName = "certStore"


	certStoreLocalVarFile := r.certStore

	if certStoreLocalVarFile != nil {
		fbs, _ := io.ReadAll(certStoreLocalVarFile)

		certStoreLocalVarFileBytes = fbs
		certStoreLocalVarFileName = certStoreLocalVarFile.Name()
		certStoreLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: certStoreLocalVarFileBytes, fileName: certStoreLocalVarFileName, formFileName: certStoreLocalVarFormFileName})
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPutSecretGroupCertificateRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
	allowExpiredCert *bool
	expirationDate *string
	certStore *os.File
	type_ *string
	name *string
}

// With &#39;true&#39; to allow uploading expired certificates
func (r DefaultApiPutSecretGroupCertificateRequest) AllowExpiredCert(allowExpiredCert bool) DefaultApiPutSecretGroupCertificateRequest {
	r.allowExpiredCert = &allowExpiredCert
	return r
}

// Date on which this secret should expire. If not set, by default, it will be set to notAfter date of this certificate.  Once the secret expires, a grant can not be requested for it. 
func (r DefaultApiPutSecretGroupCertificateRequest) ExpirationDate(expirationDate string) DefaultApiPutSecretGroupCertificateRequest {
	r.expirationDate = &expirationDate
	return r
}

// The file containing the certificate in PEM format
func (r DefaultApiPutSecretGroupCertificateRequest) CertStore(certStore *os.File) DefaultApiPutSecretGroupCertificateRequest {
	r.certStore = certStore
	return r
}

// Type of certificate supported
func (r DefaultApiPutSecretGroupCertificateRequest) Type_(type_ string) DefaultApiPutSecretGroupCertificateRequest {
	r.type_ = &type_
	return r
}

// The name of the certificate
func (r DefaultApiPutSecretGroupCertificateRequest) Name(name string) DefaultApiPutSecretGroupCertificateRequest {
	r.name = &name
	return r
}

func (r DefaultApiPutSecretGroupCertificateRequest) Execute() (*PutSecretGroupCertificate200Response, *http.Response, error) {
	return r.ApiService.PutSecretGroupCertificateExecute(r)
}

/*
PutSecretGroupCertificate Update a given secret-group certificate

Update certificate details for a given secret-group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The truststore id
 @return DefaultApiPutSecretGroupCertificateRequest
*/
func (a *DefaultApiService) PutSecretGroupCertificate(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiPutSecretGroupCertificateRequest {
	return DefaultApiPutSecretGroupCertificateRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return PutSecretGroupCertificate200Response
func (a *DefaultApiService) PutSecretGroupCertificateExecute(r DefaultApiPutSecretGroupCertificateRequest) (*PutSecretGroupCertificate200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutSecretGroupCertificate200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PutSecretGroupCertificate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/certificates/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.allowExpiredCert == nil {
		return localVarReturnValue, nil, reportError("allowExpiredCert is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "allowExpiredCert", r.allowExpiredCert, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.expirationDate != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "expirationDate", r.expirationDate, "")
	}
	var certStoreLocalVarFormFileName string
	var certStoreLocalVarFileName     string
	var certStoreLocalVarFileBytes    []byte

	certStoreLocalVarFormFileName = "certStore"


	certStoreLocalVarFile := r.certStore

	if certStoreLocalVarFile != nil {
		fbs, _ := io.ReadAll(certStoreLocalVarFile)

		certStoreLocalVarFileBytes = fbs
		certStoreLocalVarFileName = certStoreLocalVarFile.Name()
		certStoreLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: certStoreLocalVarFileBytes, fileName: certStoreLocalVarFileName, formFileName: certStoreLocalVarFormFileName})
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupCertificateDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
