/*
Role API

Description of the Role API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
	roleToDelete *[]RoleToDelete
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest) RoleToDelete(roleToDelete []RoleToDelete) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest {
	r.roleToDelete = &roleToDelete
	return r
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest) Execute() ([]int32, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteExecute(r)
}

/*
OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete Method for OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete

Delete assigned roles

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param rolegroupId The id of a rolegroup
 @return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete(ctx context.Context, orgId string, rolegroupId string) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

// Execute executes the request
//  @return []int32
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteExecute(r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesDeleteRequest) ([]int32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", url.PathEscape(parameterValueToString(r.rolegroupId, "rolegroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleToDelete
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest) Execute() (*OrganizationsOrgIdRolegroupsRolegroupIdRolesGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesGetExecute(r)
}

/*
OrganizationsOrgIdRolegroupsRolegroupIdRolesGet Method for OrganizationsOrgIdRolegroupsRolegroupIdRolesGet

Returns all roles assigned to the given rolegroup within the organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param rolegroupId The id of a rolegroup
 @return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesGet(ctx context.Context, orgId string, rolegroupId string) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

// Execute executes the request
//  @return OrganizationsOrgIdRolegroupsRolegroupIdRolesGet200Response
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesGetExecute(r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesGetRequest) (*OrganizationsOrgIdRolegroupsRolegroupIdRolesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrgIdRolegroupsRolegroupIdRolesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", url.PathEscape(parameterValueToString(r.rolegroupId, "rolegroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
	roleToAssign *[]RoleToAssign
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest) RoleToAssign(roleToAssign []RoleToAssign) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest {
	r.roleToAssign = &roleToAssign
	return r
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest) Execute() ([]RolePostResponseItem, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesPostExecute(r)
}

/*
OrganizationsOrgIdRolegroupsRolegroupIdRolesPost Method for OrganizationsOrgIdRolegroupsRolegroupIdRolesPost

Assigns a role to a rolegroup.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param rolegroupId The id of a rolegroup
 @return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesPost(ctx context.Context, orgId string, rolegroupId string) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

// Execute executes the request
//  @return []RolePostResponseItem
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdRolesPostExecute(r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdRolesPostRequest) ([]RolePostResponseItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RolePostResponseItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdRolesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", url.PathEscape(parameterValueToString(r.rolegroupId, "rolegroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.roleToAssign
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OrganizationsOrgIdRolegroupsRolegroupIdRolesPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiRolesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	name *string
	description *string
	includeInternal *bool
	search *string
	offset *int32
	limit *int32
	ascending *bool
}

// search by role name
func (r DefaultApiRolesGetRequest) Name(name string) DefaultApiRolesGetRequest {
	r.name = &name
	return r
}

// search by role description
func (r DefaultApiRolesGetRequest) Description(description string) DefaultApiRolesGetRequest {
	r.description = &description
	return r
}

// include internal roles in search
func (r DefaultApiRolesGetRequest) IncludeInternal(includeInternal bool) DefaultApiRolesGetRequest {
	r.includeInternal = &includeInternal
	return r
}

// A search string to use for partial matches of role names
func (r DefaultApiRolesGetRequest) Search(search string) DefaultApiRolesGetRequest {
	r.search = &search
	return r
}

// Pagination parameter to start returning results from this position of matches
func (r DefaultApiRolesGetRequest) Offset(offset int32) DefaultApiRolesGetRequest {
	r.offset = &offset
	return r
}

// Pagination parameter for how many results to return
func (r DefaultApiRolesGetRequest) Limit(limit int32) DefaultApiRolesGetRequest {
	r.limit = &limit
	return r
}

// Sort order for filtering
func (r DefaultApiRolesGetRequest) Ascending(ascending bool) DefaultApiRolesGetRequest {
	r.ascending = &ascending
	return r
}

func (r DefaultApiRolesGetRequest) Execute() (*RolesGet200Response, *http.Response, error) {
	return r.ApiService.RolesGetExecute(r)
}

/*
RolesGet Method for RolesGet

Retrieves all availables roles (permissions)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DefaultApiRolesGetRequest
*/
func (a *DefaultApiService) RolesGet(ctx context.Context) DefaultApiRolesGetRequest {
	return DefaultApiRolesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RolesGet200Response
func (a *DefaultApiService) RolesGetExecute(r DefaultApiRolesGetRequest) (*RolesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RolesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.RolesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	if r.includeInternal != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_internal", r.includeInternal, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.ascending != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ascending", r.ascending, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
