/*
Role API

Description of the Role API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role

import (
	"encoding/json"
)

// checks if the RoleToDelete type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleToDelete{}

// RoleToDelete struct for RoleToDelete
type RoleToDelete struct {
	ContextParams *ContextParams `json:"context_params,omitempty"`
	RoleGroupAssignmentId *string `json:"role_group_assignment_id,omitempty"`
	RoleGroupId *string `json:"role_group_id,omitempty"`
	RoleId *string `json:"role_id,omitempty"`
}

// NewRoleToDelete instantiates a new RoleToDelete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleToDelete() *RoleToDelete {
	this := RoleToDelete{}
	return &this
}

// NewRoleToDeleteWithDefaults instantiates a new RoleToDelete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleToDeleteWithDefaults() *RoleToDelete {
	this := RoleToDelete{}
	return &this
}

// GetContextParams returns the ContextParams field value if set, zero value otherwise.
func (o *RoleToDelete) GetContextParams() ContextParams {
	if o == nil || IsNil(o.ContextParams) {
		var ret ContextParams
		return ret
	}
	return *o.ContextParams
}

// GetContextParamsOk returns a tuple with the ContextParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleToDelete) GetContextParamsOk() (*ContextParams, bool) {
	if o == nil || IsNil(o.ContextParams) {
		return nil, false
	}
	return o.ContextParams, true
}

// HasContextParams returns a boolean if a field has been set.
func (o *RoleToDelete) HasContextParams() bool {
	if o != nil && !IsNil(o.ContextParams) {
		return true
	}

	return false
}

// SetContextParams gets a reference to the given ContextParams and assigns it to the ContextParams field.
func (o *RoleToDelete) SetContextParams(v ContextParams) {
	o.ContextParams = &v
}

// GetRoleGroupAssignmentId returns the RoleGroupAssignmentId field value if set, zero value otherwise.
func (o *RoleToDelete) GetRoleGroupAssignmentId() string {
	if o == nil || IsNil(o.RoleGroupAssignmentId) {
		var ret string
		return ret
	}
	return *o.RoleGroupAssignmentId
}

// GetRoleGroupAssignmentIdOk returns a tuple with the RoleGroupAssignmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleToDelete) GetRoleGroupAssignmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleGroupAssignmentId) {
		return nil, false
	}
	return o.RoleGroupAssignmentId, true
}

// HasRoleGroupAssignmentId returns a boolean if a field has been set.
func (o *RoleToDelete) HasRoleGroupAssignmentId() bool {
	if o != nil && !IsNil(o.RoleGroupAssignmentId) {
		return true
	}

	return false
}

// SetRoleGroupAssignmentId gets a reference to the given string and assigns it to the RoleGroupAssignmentId field.
func (o *RoleToDelete) SetRoleGroupAssignmentId(v string) {
	o.RoleGroupAssignmentId = &v
}

// GetRoleGroupId returns the RoleGroupId field value if set, zero value otherwise.
func (o *RoleToDelete) GetRoleGroupId() string {
	if o == nil || IsNil(o.RoleGroupId) {
		var ret string
		return ret
	}
	return *o.RoleGroupId
}

// GetRoleGroupIdOk returns a tuple with the RoleGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleToDelete) GetRoleGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleGroupId) {
		return nil, false
	}
	return o.RoleGroupId, true
}

// HasRoleGroupId returns a boolean if a field has been set.
func (o *RoleToDelete) HasRoleGroupId() bool {
	if o != nil && !IsNil(o.RoleGroupId) {
		return true
	}

	return false
}

// SetRoleGroupId gets a reference to the given string and assigns it to the RoleGroupId field.
func (o *RoleToDelete) SetRoleGroupId(v string) {
	o.RoleGroupId = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *RoleToDelete) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleToDelete) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *RoleToDelete) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *RoleToDelete) SetRoleId(v string) {
	o.RoleId = &v
}

func (o RoleToDelete) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleToDelete) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextParams) {
		toSerialize["context_params"] = o.ContextParams
	}
	if !IsNil(o.RoleGroupAssignmentId) {
		toSerialize["role_group_assignment_id"] = o.RoleGroupAssignmentId
	}
	if !IsNil(o.RoleGroupId) {
		toSerialize["role_group_id"] = o.RoleGroupId
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	return toSerialize, nil
}

type NullableRoleToDelete struct {
	value *RoleToDelete
	isSet bool
}

func (v NullableRoleToDelete) Get() *RoleToDelete {
	return v.value
}

func (v *NullableRoleToDelete) Set(val *RoleToDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleToDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleToDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleToDelete(val *RoleToDelete) *NullableRoleToDelete {
	return &NullableRoleToDelete{value: val, isSet: true}
}

func (v NullableRoleToDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleToDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


