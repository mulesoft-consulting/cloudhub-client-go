/*
Role API

Description of the Role API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role

import (
	"encoding/json"
)

// checks if the RoleToAssign type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleToAssign{}

// RoleToAssign struct for RoleToAssign
type RoleToAssign struct {
	ContextParams *ContextParams `json:"context_params,omitempty"`
	RoleId *string `json:"role_id,omitempty"`
}

// NewRoleToAssign instantiates a new RoleToAssign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleToAssign() *RoleToAssign {
	this := RoleToAssign{}
	return &this
}

// NewRoleToAssignWithDefaults instantiates a new RoleToAssign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleToAssignWithDefaults() *RoleToAssign {
	this := RoleToAssign{}
	return &this
}

// GetContextParams returns the ContextParams field value if set, zero value otherwise.
func (o *RoleToAssign) GetContextParams() ContextParams {
	if o == nil || IsNil(o.ContextParams) {
		var ret ContextParams
		return ret
	}
	return *o.ContextParams
}

// GetContextParamsOk returns a tuple with the ContextParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleToAssign) GetContextParamsOk() (*ContextParams, bool) {
	if o == nil || IsNil(o.ContextParams) {
		return nil, false
	}
	return o.ContextParams, true
}

// HasContextParams returns a boolean if a field has been set.
func (o *RoleToAssign) HasContextParams() bool {
	if o != nil && !IsNil(o.ContextParams) {
		return true
	}

	return false
}

// SetContextParams gets a reference to the given ContextParams and assigns it to the ContextParams field.
func (o *RoleToAssign) SetContextParams(v ContextParams) {
	o.ContextParams = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *RoleToAssign) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleToAssign) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *RoleToAssign) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *RoleToAssign) SetRoleId(v string) {
	o.RoleId = &v
}

func (o RoleToAssign) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleToAssign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextParams) {
		toSerialize["context_params"] = o.ContextParams
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	return toSerialize, nil
}

type NullableRoleToAssign struct {
	value *RoleToAssign
	isSet bool
}

func (v NullableRoleToAssign) Get() *RoleToAssign {
	return v.value
}

func (v *NullableRoleToAssign) Set(val *RoleToAssign) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleToAssign) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleToAssign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleToAssign(val *RoleToAssign) *NullableRoleToAssign {
	return &NullableRoleToAssign{value: val, isSet: true}
}

func (v NullableRoleToAssign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleToAssign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


