/*
Role API

Description of the Role API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role

import (
	"encoding/json"
)

// checks if the ContextParamsJson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContextParamsJson{}

// ContextParamsJson struct for ContextParamsJson
type ContextParamsJson struct {
	Org *string `json:"org,omitempty"`
}

// NewContextParamsJson instantiates a new ContextParamsJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextParamsJson() *ContextParamsJson {
	this := ContextParamsJson{}
	return &this
}

// NewContextParamsJsonWithDefaults instantiates a new ContextParamsJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextParamsJsonWithDefaults() *ContextParamsJson {
	this := ContextParamsJson{}
	return &this
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *ContextParamsJson) GetOrg() string {
	if o == nil || IsNil(o.Org) {
		var ret string
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextParamsJson) GetOrgOk() (*string, bool) {
	if o == nil || IsNil(o.Org) {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *ContextParamsJson) HasOrg() bool {
	if o != nil && !IsNil(o.Org) {
		return true
	}

	return false
}

// SetOrg gets a reference to the given string and assigns it to the Org field.
func (o *ContextParamsJson) SetOrg(v string) {
	o.Org = &v
}

func (o ContextParamsJson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContextParamsJson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Org) {
		toSerialize["org"] = o.Org
	}
	return toSerialize, nil
}

type NullableContextParamsJson struct {
	value *ContextParamsJson
	isSet bool
}

func (v NullableContextParamsJson) Get() *ContextParamsJson {
	return v.value
}

func (v *NullableContextParamsJson) Set(val *ContextParamsJson) {
	v.value = val
	v.isSet = true
}

func (v NullableContextParamsJson) IsSet() bool {
	return v.isSet
}

func (v *NullableContextParamsJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextParamsJson(val *ContextParamsJson) *NullableContextParamsJson {
	return &NullableContextParamsJson{value: val, isSet: true}
}

func (v NullableContextParamsJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextParamsJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


