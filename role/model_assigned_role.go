/*
Role API

Description of the Role API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package role

import (
	"encoding/json"
)

// checks if the AssignedRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignedRole{}

// AssignedRole struct for AssignedRole
type AssignedRole struct {
	ContextParams *ContextParams `json:"context_params,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	RoleGroupAssignmentId *string `json:"role_group_assignment_id,omitempty"`
	RoleGroupId *string `json:"role_group_id,omitempty"`
	RoleId *string `json:"role_id,omitempty"`
	OrgId *string `json:"org_id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Internal *bool `json:"internal,omitempty"`
}

// NewAssignedRole instantiates a new AssignedRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignedRole() *AssignedRole {
	this := AssignedRole{}
	return &this
}

// NewAssignedRoleWithDefaults instantiates a new AssignedRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignedRoleWithDefaults() *AssignedRole {
	this := AssignedRole{}
	return &this
}

// GetContextParams returns the ContextParams field value if set, zero value otherwise.
func (o *AssignedRole) GetContextParams() ContextParams {
	if o == nil || IsNil(o.ContextParams) {
		var ret ContextParams
		return ret
	}
	return *o.ContextParams
}

// GetContextParamsOk returns a tuple with the ContextParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetContextParamsOk() (*ContextParams, bool) {
	if o == nil || IsNil(o.ContextParams) {
		return nil, false
	}
	return o.ContextParams, true
}

// HasContextParams returns a boolean if a field has been set.
func (o *AssignedRole) HasContextParams() bool {
	if o != nil && !IsNil(o.ContextParams) {
		return true
	}

	return false
}

// SetContextParams gets a reference to the given ContextParams and assigns it to the ContextParams field.
func (o *AssignedRole) SetContextParams(v ContextParams) {
	o.ContextParams = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AssignedRole) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AssignedRole) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *AssignedRole) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetRoleGroupAssignmentId returns the RoleGroupAssignmentId field value if set, zero value otherwise.
func (o *AssignedRole) GetRoleGroupAssignmentId() string {
	if o == nil || IsNil(o.RoleGroupAssignmentId) {
		var ret string
		return ret
	}
	return *o.RoleGroupAssignmentId
}

// GetRoleGroupAssignmentIdOk returns a tuple with the RoleGroupAssignmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetRoleGroupAssignmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleGroupAssignmentId) {
		return nil, false
	}
	return o.RoleGroupAssignmentId, true
}

// HasRoleGroupAssignmentId returns a boolean if a field has been set.
func (o *AssignedRole) HasRoleGroupAssignmentId() bool {
	if o != nil && !IsNil(o.RoleGroupAssignmentId) {
		return true
	}

	return false
}

// SetRoleGroupAssignmentId gets a reference to the given string and assigns it to the RoleGroupAssignmentId field.
func (o *AssignedRole) SetRoleGroupAssignmentId(v string) {
	o.RoleGroupAssignmentId = &v
}

// GetRoleGroupId returns the RoleGroupId field value if set, zero value otherwise.
func (o *AssignedRole) GetRoleGroupId() string {
	if o == nil || IsNil(o.RoleGroupId) {
		var ret string
		return ret
	}
	return *o.RoleGroupId
}

// GetRoleGroupIdOk returns a tuple with the RoleGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetRoleGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleGroupId) {
		return nil, false
	}
	return o.RoleGroupId, true
}

// HasRoleGroupId returns a boolean if a field has been set.
func (o *AssignedRole) HasRoleGroupId() bool {
	if o != nil && !IsNil(o.RoleGroupId) {
		return true
	}

	return false
}

// SetRoleGroupId gets a reference to the given string and assigns it to the RoleGroupId field.
func (o *AssignedRole) SetRoleGroupId(v string) {
	o.RoleGroupId = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *AssignedRole) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *AssignedRole) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *AssignedRole) SetRoleId(v string) {
	o.RoleId = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *AssignedRole) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *AssignedRole) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *AssignedRole) SetOrgId(v string) {
	o.OrgId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssignedRole) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssignedRole) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssignedRole) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AssignedRole) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AssignedRole) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AssignedRole) SetDescription(v string) {
	o.Description = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *AssignedRole) GetInternal() bool {
	if o == nil || IsNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedRole) GetInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *AssignedRole) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *AssignedRole) SetInternal(v bool) {
	o.Internal = &v
}

func (o AssignedRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignedRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContextParams) {
		toSerialize["context_params"] = o.ContextParams
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.RoleGroupAssignmentId) {
		toSerialize["role_group_assignment_id"] = o.RoleGroupAssignmentId
	}
	if !IsNil(o.RoleGroupId) {
		toSerialize["role_group_id"] = o.RoleGroupId
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	return toSerialize, nil
}

type NullableAssignedRole struct {
	value *AssignedRole
	isSet bool
}

func (v NullableAssignedRole) Get() *AssignedRole {
	return v.value
}

func (v *NullableAssignedRole) Set(val *AssignedRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignedRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignedRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignedRole(val *AssignedRole) *NullableAssignedRole {
	return &NullableAssignedRole{value: val, isSet: true}
}

func (v NullableAssignedRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignedRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


