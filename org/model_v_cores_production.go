/*
Organization API

Description of the Organization API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the VCoresProduction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VCoresProduction{}

// VCoresProduction An explanation about the purpose of this instance.
type VCoresProduction struct {
	// An explanation about the purpose of this instance.
	Assigned float32 `json:"assigned"`
	// An explanation about the purpose of this instance.
	Reassigned *float32 `json:"reassigned,omitempty"`
}

// NewVCoresProduction instantiates a new VCoresProduction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCoresProduction(assigned float32) *VCoresProduction {
	this := VCoresProduction{}
	this.Assigned = assigned
	var reassigned float32 = 0.0
	this.Reassigned = &reassigned
	return &this
}

// NewVCoresProductionWithDefaults instantiates a new VCoresProduction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCoresProductionWithDefaults() *VCoresProduction {
	this := VCoresProduction{}
	var assigned float32 = 0
	this.Assigned = assigned
	var reassigned float32 = 0.0
	this.Reassigned = &reassigned
	return &this
}

// GetAssigned returns the Assigned field value
func (o *VCoresProduction) GetAssigned() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value
// and a boolean to check if the value has been set.
func (o *VCoresProduction) GetAssignedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assigned, true
}

// SetAssigned sets field value
func (o *VCoresProduction) SetAssigned(v float32) {
	o.Assigned = v
}

// GetReassigned returns the Reassigned field value if set, zero value otherwise.
func (o *VCoresProduction) GetReassigned() float32 {
	if o == nil || IsNil(o.Reassigned) {
		var ret float32
		return ret
	}
	return *o.Reassigned
}

// GetReassignedOk returns a tuple with the Reassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCoresProduction) GetReassignedOk() (*float32, bool) {
	if o == nil || IsNil(o.Reassigned) {
		return nil, false
	}
	return o.Reassigned, true
}

// HasReassigned returns a boolean if a field has been set.
func (o *VCoresProduction) HasReassigned() bool {
	if o != nil && !IsNil(o.Reassigned) {
		return true
	}

	return false
}

// SetReassigned gets a reference to the given float32 and assigns it to the Reassigned field.
func (o *VCoresProduction) SetReassigned(v float32) {
	o.Reassigned = &v
}

func (o VCoresProduction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VCoresProduction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assigned"] = o.Assigned
	if !IsNil(o.Reassigned) {
		toSerialize["reassigned"] = o.Reassigned
	}
	return toSerialize, nil
}

type NullableVCoresProduction struct {
	value *VCoresProduction
	isSet bool
}

func (v NullableVCoresProduction) Get() *VCoresProduction {
	return v.value
}

func (v *NullableVCoresProduction) Set(val *VCoresProduction) {
	v.value = val
	v.isSet = true
}

func (v NullableVCoresProduction) IsSet() bool {
	return v.isSet
}

func (v *NullableVCoresProduction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCoresProduction(val *VCoresProduction) *NullableVCoresProduction {
	return &NullableVCoresProduction{value: val, isSet: true}
}

func (v NullableVCoresProduction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCoresProduction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


