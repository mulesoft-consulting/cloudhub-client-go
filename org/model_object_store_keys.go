/*
Organization API

Description of the Organization API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the ObjectStoreKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStoreKeys{}

// ObjectStoreKeys An explanation about the purpose of this instance.
type ObjectStoreKeys struct {
	// An explanation about the purpose of this instance.
	AddOn *int32 `json:"addOn,omitempty"`
	// An explanation about the purpose of this instance.
	Base *int32 `json:"base,omitempty"`
}

// NewObjectStoreKeys instantiates a new ObjectStoreKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStoreKeys() *ObjectStoreKeys {
	this := ObjectStoreKeys{}
	var addOn int32 = 0
	this.AddOn = &addOn
	var base int32 = 0
	this.Base = &base
	return &this
}

// NewObjectStoreKeysWithDefaults instantiates a new ObjectStoreKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStoreKeysWithDefaults() *ObjectStoreKeys {
	this := ObjectStoreKeys{}
	var addOn int32 = 0
	this.AddOn = &addOn
	var base int32 = 0
	this.Base = &base
	return &this
}

// GetAddOn returns the AddOn field value if set, zero value otherwise.
func (o *ObjectStoreKeys) GetAddOn() int32 {
	if o == nil || IsNil(o.AddOn) {
		var ret int32
		return ret
	}
	return *o.AddOn
}

// GetAddOnOk returns a tuple with the AddOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoreKeys) GetAddOnOk() (*int32, bool) {
	if o == nil || IsNil(o.AddOn) {
		return nil, false
	}
	return o.AddOn, true
}

// HasAddOn returns a boolean if a field has been set.
func (o *ObjectStoreKeys) HasAddOn() bool {
	if o != nil && !IsNil(o.AddOn) {
		return true
	}

	return false
}

// SetAddOn gets a reference to the given int32 and assigns it to the AddOn field.
func (o *ObjectStoreKeys) SetAddOn(v int32) {
	o.AddOn = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *ObjectStoreKeys) GetBase() int32 {
	if o == nil || IsNil(o.Base) {
		var ret int32
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStoreKeys) GetBaseOk() (*int32, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *ObjectStoreKeys) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given int32 and assigns it to the Base field.
func (o *ObjectStoreKeys) SetBase(v int32) {
	o.Base = &v
}

func (o ObjectStoreKeys) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStoreKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddOn) {
		toSerialize["addOn"] = o.AddOn
	}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	return toSerialize, nil
}

type NullableObjectStoreKeys struct {
	value *ObjectStoreKeys
	isSet bool
}

func (v NullableObjectStoreKeys) Get() *ObjectStoreKeys {
	return v.value
}

func (v *NullableObjectStoreKeys) Set(val *ObjectStoreKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStoreKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStoreKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStoreKeys(val *ObjectStoreKeys) *NullableObjectStoreKeys {
	return &NullableObjectStoreKeys{value: val, isSet: true}
}

func (v NullableObjectStoreKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStoreKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


