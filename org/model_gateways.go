/*
Organization API

Description of the Organization API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the Gateways type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gateways{}

// Gateways An explanation about the purpose of this instance.
type Gateways struct {
	// An explanation about the purpose of this instance.
	Assigned int32 `json:"assigned"`
}

// NewGateways instantiates a new Gateways object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGateways(assigned int32) *Gateways {
	this := Gateways{}
	this.Assigned = assigned
	return &this
}

// NewGatewaysWithDefaults instantiates a new Gateways object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewaysWithDefaults() *Gateways {
	this := Gateways{}
	var assigned int32 = 0
	this.Assigned = assigned
	return &this
}

// GetAssigned returns the Assigned field value
func (o *Gateways) GetAssigned() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value
// and a boolean to check if the value has been set.
func (o *Gateways) GetAssignedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assigned, true
}

// SetAssigned sets field value
func (o *Gateways) SetAssigned(v int32) {
	o.Assigned = v
}

func (o Gateways) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gateways) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assigned"] = o.Assigned
	return toSerialize, nil
}

type NullableGateways struct {
	value *Gateways
	isSet bool
}

func (v NullableGateways) Get() *Gateways {
	return v.value
}

func (v *NullableGateways) Set(val *Gateways) {
	v.value = val
	v.isSet = true
}

func (v NullableGateways) IsSet() bool {
	return v.isSet
}

func (v *NullableGateways) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGateways(val *Gateways) *NullableGateways {
	return &NullableGateways{value: val, isSet: true}
}

func (v NullableGateways) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGateways) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


