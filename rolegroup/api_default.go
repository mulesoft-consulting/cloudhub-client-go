/*
RoleGroup API

Description of the RoleGroup API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rolegroup

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiOrganizationsOrgIdRolegroupsGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
}

func (r DefaultApiOrganizationsOrgIdRolegroupsGetRequest) Execute() (*OrganizationsOrgIdRolegroupsGet200Response, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsGetExecute(r)
}

/*
OrganizationsOrgIdRolegroupsGet Method for OrganizationsOrgIdRolegroupsGet

Returns all rolegroups within the organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @return DefaultApiOrganizationsOrgIdRolegroupsGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsGet(ctx context.Context, orgId string) DefaultApiOrganizationsOrgIdRolegroupsGetRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return OrganizationsOrgIdRolegroupsGet200Response
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsGetExecute(r DefaultApiOrganizationsOrgIdRolegroupsGetRequest) (*OrganizationsOrgIdRolegroupsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationsOrgIdRolegroupsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdRolegroupsPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupPostBody *RolegroupPostBody
}

func (r DefaultApiOrganizationsOrgIdRolegroupsPostRequest) RolegroupPostBody(rolegroupPostBody RolegroupPostBody) DefaultApiOrganizationsOrgIdRolegroupsPostRequest {
	r.rolegroupPostBody = &rolegroupPostBody
	return r
}

func (r DefaultApiOrganizationsOrgIdRolegroupsPostRequest) Execute() (*Rolegroup, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsPostExecute(r)
}

/*
OrganizationsOrgIdRolegroupsPost Method for OrganizationsOrgIdRolegroupsPost

Creates an rolegroup. Name must be unique.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @return DefaultApiOrganizationsOrgIdRolegroupsPostRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsPost(ctx context.Context, orgId string) DefaultApiOrganizationsOrgIdRolegroupsPostRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsPostRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return Rolegroup
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsPostExecute(r DefaultApiOrganizationsOrgIdRolegroupsPostRequest) (*Rolegroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rolegroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rolegroupPostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OrganizationsOrgIdRolegroupsPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdDeleteRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdDeleteExecute(r)
}

/*
OrganizationsOrgIdRolegroupsRolegroupIdDelete Method for OrganizationsOrgIdRolegroupsRolegroupIdDelete

Delete a rolegroup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param rolegroupId The id of a rolegroup
 @return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdDeleteRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdDelete(ctx context.Context, orgId string, rolegroupId string) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdDeleteRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

// Execute executes the request
//  @return []string
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdDeleteExecute(r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdDeleteRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", url.PathEscape(parameterValueToString(r.rolegroupId, "rolegroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdGetRequest) Execute() (*Rolegroup, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdGetExecute(r)
}

/*
OrganizationsOrgIdRolegroupsRolegroupIdGet Method for OrganizationsOrgIdRolegroupsRolegroupIdGet

Retrieves a rolegroup by id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param rolegroupId The id of rolegroup
 @return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdGetRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdGet(ctx context.Context, orgId string, rolegroupId string) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdGetRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdGetRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

// Execute executes the request
//  @return Rolegroup
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdGetExecute(r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdGetRequest) (*Rolegroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rolegroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", url.PathEscape(parameterValueToString(r.rolegroupId, "rolegroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	rolegroupId string
	rolegroupPutBody *RolegroupPutBody
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest) RolegroupPutBody(rolegroupPutBody RolegroupPutBody) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest {
	r.rolegroupPutBody = &rolegroupPutBody
	return r
}

func (r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest) Execute() (*Rolegroup, *http.Response, error) {
	return r.ApiService.OrganizationsOrgIdRolegroupsRolegroupIdPutExecute(r)
}

/*
OrganizationsOrgIdRolegroupsRolegroupIdPut Method for OrganizationsOrgIdRolegroupsRolegroupIdPut

Update a role gorup, implemented as a patch. Note that only the name (must be unique) and description is allowed to be updated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The ID of the organization in GUID format
 @param rolegroupId The id of an rolegroup
 @return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest
*/
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdPut(ctx context.Context, orgId string, rolegroupId string) DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest {
	return DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		rolegroupId: rolegroupId,
	}
}

// Execute executes the request
//  @return Rolegroup
func (a *DefaultApiService) OrganizationsOrgIdRolegroupsRolegroupIdPutExecute(r DefaultApiOrganizationsOrgIdRolegroupsRolegroupIdPutRequest) (*Rolegroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rolegroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.OrganizationsOrgIdRolegroupsRolegroupIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/rolegroups/{rolegroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"rolegroupId"+"}", url.PathEscape(parameterValueToString(r.rolegroupId, "rolegroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rolegroupPutBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OrganizationsOrgIdRolegroupsPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
