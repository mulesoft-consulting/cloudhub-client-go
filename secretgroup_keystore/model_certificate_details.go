/*
Secret Group Keystore API

Secret Group Keystore API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_keystore

import (
	"encoding/json"
)

// checks if the CertificateDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateDetails{}

// CertificateDetails struct for CertificateDetails
type CertificateDetails struct {
	Issuer *IssuerSubject `json:"issuer,omitempty"`
	Subject *IssuerSubject `json:"subject,omitempty"`
	// Collection of subject alternative names from the SubjectAltName x509 extension
	SubjectAlternativeName []string `json:"subjectAlternativeName,omitempty"`
	Version *string `json:"version,omitempty"`
	// Serial number assigned by the CA to this certificate, in hex format
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Name of the signature algorithm
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty"`
	// The standard algorithm name for the public key of this certificate
	PublicKeyAlgorithm *string `json:"publicKeyAlgorithm,omitempty"`
	BasicConstraints *CertificateDetailsBasicConstraints `json:"basicConstraints,omitempty"`
	Validity *CertificateValidity `json:"validity,omitempty"`
	// A list of values defining the purpose of the public key i.e. the key usage extensions from this certificate
	KeyUsage []string `json:"keyUsage,omitempty"`
	// A list of values providing details about the extended key usage extensions from this certificate.
	ExtendedKeyUsage []string `json:"extendedKeyUsage,omitempty"`
	// The type of this certificate
	CertificateType *string `json:"certificateType,omitempty"`
}

// NewCertificateDetails instantiates a new CertificateDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateDetails() *CertificateDetails {
	this := CertificateDetails{}
	return &this
}

// NewCertificateDetailsWithDefaults instantiates a new CertificateDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateDetailsWithDefaults() *CertificateDetails {
	this := CertificateDetails{}
	return &this
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *CertificateDetails) GetIssuer() IssuerSubject {
	if o == nil || IsNil(o.Issuer) {
		var ret IssuerSubject
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetIssuerOk() (*IssuerSubject, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *CertificateDetails) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given IssuerSubject and assigns it to the Issuer field.
func (o *CertificateDetails) SetIssuer(v IssuerSubject) {
	o.Issuer = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *CertificateDetails) GetSubject() IssuerSubject {
	if o == nil || IsNil(o.Subject) {
		var ret IssuerSubject
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetSubjectOk() (*IssuerSubject, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *CertificateDetails) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given IssuerSubject and assigns it to the Subject field.
func (o *CertificateDetails) SetSubject(v IssuerSubject) {
	o.Subject = &v
}

// GetSubjectAlternativeName returns the SubjectAlternativeName field value if set, zero value otherwise.
func (o *CertificateDetails) GetSubjectAlternativeName() []string {
	if o == nil || IsNil(o.SubjectAlternativeName) {
		var ret []string
		return ret
	}
	return o.SubjectAlternativeName
}

// GetSubjectAlternativeNameOk returns a tuple with the SubjectAlternativeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetSubjectAlternativeNameOk() ([]string, bool) {
	if o == nil || IsNil(o.SubjectAlternativeName) {
		return nil, false
	}
	return o.SubjectAlternativeName, true
}

// HasSubjectAlternativeName returns a boolean if a field has been set.
func (o *CertificateDetails) HasSubjectAlternativeName() bool {
	if o != nil && !IsNil(o.SubjectAlternativeName) {
		return true
	}

	return false
}

// SetSubjectAlternativeName gets a reference to the given []string and assigns it to the SubjectAlternativeName field.
func (o *CertificateDetails) SetSubjectAlternativeName(v []string) {
	o.SubjectAlternativeName = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CertificateDetails) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CertificateDetails) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CertificateDetails) SetVersion(v string) {
	o.Version = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CertificateDetails) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CertificateDetails) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CertificateDetails) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value if set, zero value otherwise.
func (o *CertificateDetails) GetSignatureAlgorithm() string {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		var ret string
		return ret
	}
	return *o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetSignatureAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureAlgorithm) {
		return nil, false
	}
	return o.SignatureAlgorithm, true
}

// HasSignatureAlgorithm returns a boolean if a field has been set.
func (o *CertificateDetails) HasSignatureAlgorithm() bool {
	if o != nil && !IsNil(o.SignatureAlgorithm) {
		return true
	}

	return false
}

// SetSignatureAlgorithm gets a reference to the given string and assigns it to the SignatureAlgorithm field.
func (o *CertificateDetails) SetSignatureAlgorithm(v string) {
	o.SignatureAlgorithm = &v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value if set, zero value otherwise.
func (o *CertificateDetails) GetPublicKeyAlgorithm() string {
	if o == nil || IsNil(o.PublicKeyAlgorithm) {
		var ret string
		return ret
	}
	return *o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetPublicKeyAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKeyAlgorithm) {
		return nil, false
	}
	return o.PublicKeyAlgorithm, true
}

// HasPublicKeyAlgorithm returns a boolean if a field has been set.
func (o *CertificateDetails) HasPublicKeyAlgorithm() bool {
	if o != nil && !IsNil(o.PublicKeyAlgorithm) {
		return true
	}

	return false
}

// SetPublicKeyAlgorithm gets a reference to the given string and assigns it to the PublicKeyAlgorithm field.
func (o *CertificateDetails) SetPublicKeyAlgorithm(v string) {
	o.PublicKeyAlgorithm = &v
}

// GetBasicConstraints returns the BasicConstraints field value if set, zero value otherwise.
func (o *CertificateDetails) GetBasicConstraints() CertificateDetailsBasicConstraints {
	if o == nil || IsNil(o.BasicConstraints) {
		var ret CertificateDetailsBasicConstraints
		return ret
	}
	return *o.BasicConstraints
}

// GetBasicConstraintsOk returns a tuple with the BasicConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetBasicConstraintsOk() (*CertificateDetailsBasicConstraints, bool) {
	if o == nil || IsNil(o.BasicConstraints) {
		return nil, false
	}
	return o.BasicConstraints, true
}

// HasBasicConstraints returns a boolean if a field has been set.
func (o *CertificateDetails) HasBasicConstraints() bool {
	if o != nil && !IsNil(o.BasicConstraints) {
		return true
	}

	return false
}

// SetBasicConstraints gets a reference to the given CertificateDetailsBasicConstraints and assigns it to the BasicConstraints field.
func (o *CertificateDetails) SetBasicConstraints(v CertificateDetailsBasicConstraints) {
	o.BasicConstraints = &v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *CertificateDetails) GetValidity() CertificateValidity {
	if o == nil || IsNil(o.Validity) {
		var ret CertificateValidity
		return ret
	}
	return *o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetValidityOk() (*CertificateValidity, bool) {
	if o == nil || IsNil(o.Validity) {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *CertificateDetails) HasValidity() bool {
	if o != nil && !IsNil(o.Validity) {
		return true
	}

	return false
}

// SetValidity gets a reference to the given CertificateValidity and assigns it to the Validity field.
func (o *CertificateDetails) SetValidity(v CertificateValidity) {
	o.Validity = &v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *CertificateDetails) GetKeyUsage() []string {
	if o == nil || IsNil(o.KeyUsage) {
		var ret []string
		return ret
	}
	return o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyUsage) {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *CertificateDetails) HasKeyUsage() bool {
	if o != nil && !IsNil(o.KeyUsage) {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given []string and assigns it to the KeyUsage field.
func (o *CertificateDetails) SetKeyUsage(v []string) {
	o.KeyUsage = v
}

// GetExtendedKeyUsage returns the ExtendedKeyUsage field value if set, zero value otherwise.
func (o *CertificateDetails) GetExtendedKeyUsage() []string {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		var ret []string
		return ret
	}
	return o.ExtendedKeyUsage
}

// GetExtendedKeyUsageOk returns a tuple with the ExtendedKeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetExtendedKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		return nil, false
	}
	return o.ExtendedKeyUsage, true
}

// HasExtendedKeyUsage returns a boolean if a field has been set.
func (o *CertificateDetails) HasExtendedKeyUsage() bool {
	if o != nil && !IsNil(o.ExtendedKeyUsage) {
		return true
	}

	return false
}

// SetExtendedKeyUsage gets a reference to the given []string and assigns it to the ExtendedKeyUsage field.
func (o *CertificateDetails) SetExtendedKeyUsage(v []string) {
	o.ExtendedKeyUsage = v
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *CertificateDetails) GetCertificateType() string {
	if o == nil || IsNil(o.CertificateType) {
		var ret string
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateDetails) GetCertificateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateType) {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *CertificateDetails) HasCertificateType() bool {
	if o != nil && !IsNil(o.CertificateType) {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given string and assigns it to the CertificateType field.
func (o *CertificateDetails) SetCertificateType(v string) {
	o.CertificateType = &v
}

func (o CertificateDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.SubjectAlternativeName) {
		toSerialize["subjectAlternativeName"] = o.SubjectAlternativeName
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.SignatureAlgorithm) {
		toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	}
	if !IsNil(o.PublicKeyAlgorithm) {
		toSerialize["publicKeyAlgorithm"] = o.PublicKeyAlgorithm
	}
	if !IsNil(o.BasicConstraints) {
		toSerialize["basicConstraints"] = o.BasicConstraints
	}
	if !IsNil(o.Validity) {
		toSerialize["validity"] = o.Validity
	}
	if !IsNil(o.KeyUsage) {
		toSerialize["keyUsage"] = o.KeyUsage
	}
	if !IsNil(o.ExtendedKeyUsage) {
		toSerialize["extendedKeyUsage"] = o.ExtendedKeyUsage
	}
	if !IsNil(o.CertificateType) {
		toSerialize["certificateType"] = o.CertificateType
	}
	return toSerialize, nil
}

type NullableCertificateDetails struct {
	value *CertificateDetails
	isSet bool
}

func (v NullableCertificateDetails) Get() *CertificateDetails {
	return v.value
}

func (v *NullableCertificateDetails) Set(val *CertificateDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateDetails(val *CertificateDetails) *NullableCertificateDetails {
	return &NullableCertificateDetails{value: val, isSet: true}
}

func (v NullableCertificateDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


