/*
Secret Group Keystore API

Secret Group Keystore API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_keystore

import (
	"encoding/json"
)

// checks if the KeystoreDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeystoreDetails{}

// KeystoreDetails Details about the public certificate and capath from the keystore
type KeystoreDetails struct {
	Certificate *CertificateDetails `json:"certificate,omitempty"`
	Capath []CertificateDetails `json:"capath,omitempty"`
}

// NewKeystoreDetails instantiates a new KeystoreDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoreDetails() *KeystoreDetails {
	this := KeystoreDetails{}
	return &this
}

// NewKeystoreDetailsWithDefaults instantiates a new KeystoreDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoreDetailsWithDefaults() *KeystoreDetails {
	this := KeystoreDetails{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *KeystoreDetails) GetCertificate() CertificateDetails {
	if o == nil || IsNil(o.Certificate) {
		var ret CertificateDetails
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreDetails) GetCertificateOk() (*CertificateDetails, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *KeystoreDetails) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given CertificateDetails and assigns it to the Certificate field.
func (o *KeystoreDetails) SetCertificate(v CertificateDetails) {
	o.Certificate = &v
}

// GetCapath returns the Capath field value if set, zero value otherwise.
func (o *KeystoreDetails) GetCapath() []CertificateDetails {
	if o == nil || IsNil(o.Capath) {
		var ret []CertificateDetails
		return ret
	}
	return o.Capath
}

// GetCapathOk returns a tuple with the Capath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoreDetails) GetCapathOk() ([]CertificateDetails, bool) {
	if o == nil || IsNil(o.Capath) {
		return nil, false
	}
	return o.Capath, true
}

// HasCapath returns a boolean if a field has been set.
func (o *KeystoreDetails) HasCapath() bool {
	if o != nil && !IsNil(o.Capath) {
		return true
	}

	return false
}

// SetCapath gets a reference to the given []CertificateDetails and assigns it to the Capath field.
func (o *KeystoreDetails) SetCapath(v []CertificateDetails) {
	o.Capath = v
}

func (o KeystoreDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeystoreDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Capath) {
		toSerialize["capath"] = o.Capath
	}
	return toSerialize, nil
}

type NullableKeystoreDetails struct {
	value *KeystoreDetails
	isSet bool
}

func (v NullableKeystoreDetails) Get() *KeystoreDetails {
	return v.value
}

func (v *NullableKeystoreDetails) Set(val *KeystoreDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoreDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoreDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoreDetails(val *KeystoreDetails) *NullableKeystoreDetails {
	return &NullableKeystoreDetails{value: val, isSet: true}
}

func (v NullableKeystoreDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoreDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


