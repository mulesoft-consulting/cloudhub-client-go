/*
Secret Group Keystore API

Secret Group Keystore API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_keystore

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiGetSecretGroupKeystoreDetailsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
}

func (r DefaultApiGetSecretGroupKeystoreDetailsRequest) Execute() (*Keystore, *http.Response, error) {
	return r.ApiService.GetSecretGroupKeystoreDetailsExecute(r)
}

/*
GetSecretGroupKeystoreDetails Retrieve keystore details

Retrieves keystore details by id for a given secret group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The keystore id
 @return DefaultApiGetSecretGroupKeystoreDetailsRequest
*/
func (a *DefaultApiService) GetSecretGroupKeystoreDetails(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiGetSecretGroupKeystoreDetailsRequest {
	return DefaultApiGetSecretGroupKeystoreDetailsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return Keystore
func (a *DefaultApiService) GetSecretGroupKeystoreDetailsExecute(r DefaultApiGetSecretGroupKeystoreDetailsRequest) (*Keystore, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Keystore
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetSecretGroupKeystoreDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/keystores/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupKeystoreDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetSecretGroupKeystoresRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	type_ *string
}

// Filter the elements on the response to be of a specific type from {PEM, JKS, JCEKS, PKCS12}
func (r DefaultApiGetSecretGroupKeystoresRequest) Type_(type_ string) DefaultApiGetSecretGroupKeystoresRequest {
	r.type_ = &type_
	return r
}

func (r DefaultApiGetSecretGroupKeystoresRequest) Execute() ([]KeystoreSummary, *http.Response, error) {
	return r.ApiService.GetSecretGroupKeystoresExecute(r)
}

/*
GetSecretGroupKeystores Retrieves a secret-groups' collection of keystores.

Retrieves a secret-groups' collection of keystores.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @return DefaultApiGetSecretGroupKeystoresRequest
*/
func (a *DefaultApiService) GetSecretGroupKeystores(ctx context.Context, orgId string, envId string, secretGroupId string) DefaultApiGetSecretGroupKeystoresRequest {
	return DefaultApiGetSecretGroupKeystoresRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
	}
}

// Execute executes the request
//  @return []KeystoreSummary
func (a *DefaultApiService) GetSecretGroupKeystoresExecute(r DefaultApiGetSecretGroupKeystoresRequest) ([]KeystoreSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KeystoreSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetSecretGroupKeystores")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/keystores"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPatchSecretGroupKeystoreRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
	body *map[string]interface{}
}

func (r DefaultApiPatchSecretGroupKeystoreRequest) Body(body map[string]interface{}) DefaultApiPatchSecretGroupKeystoreRequest {
	r.body = &body
	return r
}

func (r DefaultApiPatchSecretGroupKeystoreRequest) Execute() (*PutSecretGroupKeystore200Response, *http.Response, error) {
	return r.ApiService.PatchSecretGroupKeystoreExecute(r)
}

/*
PatchSecretGroupKeystore Update a given secret-group keystore

Update keystore details for a given secret-group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The keystore id
 @return DefaultApiPatchSecretGroupKeystoreRequest
*/
func (a *DefaultApiService) PatchSecretGroupKeystore(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiPatchSecretGroupKeystoreRequest {
	return DefaultApiPatchSecretGroupKeystoreRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return PutSecretGroupKeystore200Response
func (a *DefaultApiService) PatchSecretGroupKeystoreExecute(r DefaultApiPatchSecretGroupKeystoreRequest) (*PutSecretGroupKeystore200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutSecretGroupKeystore200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchSecretGroupKeystore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/keystores/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json:"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupKeystoreDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPostSecretGroupKeystoresRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	allowExpiredCert *bool
	expirationDate *string
	key *os.File
	name *string
	keyPassphrase *string
	certificate *os.File
	type_ *string
	capath *os.File
	keyStore *os.File
	algorithm *string
	storePassphrase *string
	alias *string
}

// With &#39;true&#39; to allow uploading expired certificates
func (r DefaultApiPostSecretGroupKeystoresRequest) AllowExpiredCert(allowExpiredCert bool) DefaultApiPostSecretGroupKeystoresRequest {
	r.allowExpiredCert = &allowExpiredCert
	return r
}

// Date on which this secret should expire. If not set, by default, it will be set to notAfter date of the public certificate from this keystore. Once the secret expires, a grant can not be requested for it. 
func (r DefaultApiPostSecretGroupKeystoresRequest) ExpirationDate(expirationDate string) DefaultApiPostSecretGroupKeystoresRequest {
	r.expirationDate = &expirationDate
	return r
}

// The encrypted private key. Required in case of PEM type. 
func (r DefaultApiPostSecretGroupKeystoresRequest) Key(key *os.File) DefaultApiPostSecretGroupKeystoresRequest {
	r.key = key
	return r
}

// The name of this keystore instance. 
func (r DefaultApiPostSecretGroupKeystoresRequest) Name(name string) DefaultApiPostSecretGroupKeystoresRequest {
	r.name = &name
	return r
}

// Passphrase with which private key for a particular alias is protected 
func (r DefaultApiPostSecretGroupKeystoresRequest) KeyPassphrase(keyPassphrase string) DefaultApiPostSecretGroupKeystoresRequest {
	r.keyPassphrase = &keyPassphrase
	return r
}

// The public certificate. Required in the case of PEM type. 
func (r DefaultApiPostSecretGroupKeystoresRequest) Certificate(certificate *os.File) DefaultApiPostSecretGroupKeystoresRequest {
	r.certificate = certificate
	return r
}

func (r DefaultApiPostSecretGroupKeystoresRequest) Type_(type_ string) DefaultApiPostSecretGroupKeystoresRequest {
	r.type_ = &type_
	return r
}

// The concatenated chain of CA certificates, except the leaf, leading up to the root CA. Can only be set in case of PEM type. 
func (r DefaultApiPostSecretGroupKeystoresRequest) Capath(capath *os.File) DefaultApiPostSecretGroupKeystoresRequest {
	r.capath = capath
	return r
}

// File containing one or more certificate entries Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPostSecretGroupKeystoresRequest) KeyStore(keyStore *os.File) DefaultApiPostSecretGroupKeystoresRequest {
	r.keyStore = keyStore
	return r
}

// The algorithm used to initialize KeyManagerFactory Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPostSecretGroupKeystoresRequest) Algorithm(algorithm string) DefaultApiPostSecretGroupKeystoresRequest {
	r.algorithm = &algorithm
	return r
}

// Passphrase with which keystore is protected Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPostSecretGroupKeystoresRequest) StorePassphrase(storePassphrase string) DefaultApiPostSecretGroupKeystoresRequest {
	r.storePassphrase = &storePassphrase
	return r
}

// The alias name of the entry that contains the certificate. Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPostSecretGroupKeystoresRequest) Alias(alias string) DefaultApiPostSecretGroupKeystoresRequest {
	r.alias = &alias
	return r
}

func (r DefaultApiPostSecretGroupKeystoresRequest) Execute() (*PostSecretGroupKeystores201Response, *http.Response, error) {
	return r.ApiService.PostSecretGroupKeystoresExecute(r)
}

/*
PostSecretGroupKeystores Create a secret-groups' keystore.

Create a secret-groups' keystore.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @return DefaultApiPostSecretGroupKeystoresRequest
*/
func (a *DefaultApiService) PostSecretGroupKeystores(ctx context.Context, orgId string, envId string, secretGroupId string) DefaultApiPostSecretGroupKeystoresRequest {
	return DefaultApiPostSecretGroupKeystoresRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
	}
}

// Execute executes the request
//  @return PostSecretGroupKeystores201Response
func (a *DefaultApiService) PostSecretGroupKeystoresExecute(r DefaultApiPostSecretGroupKeystoresRequest) (*PostSecretGroupKeystores201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostSecretGroupKeystores201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostSecretGroupKeystores")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/keystores"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.allowExpiredCert == nil {
		return localVarReturnValue, nil, reportError("allowExpiredCert is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "allowExpiredCert", r.allowExpiredCert, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.expirationDate != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "expirationDate", r.expirationDate, "")
	}
	var keyLocalVarFormFileName string
	var keyLocalVarFileName     string
	var keyLocalVarFileBytes    []byte

	keyLocalVarFormFileName = "key"


	keyLocalVarFile := r.key

	if keyLocalVarFile != nil {
		fbs, _ := io.ReadAll(keyLocalVarFile)

		keyLocalVarFileBytes = fbs
		keyLocalVarFileName = keyLocalVarFile.Name()
		keyLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: keyLocalVarFileBytes, fileName: keyLocalVarFileName, formFileName: keyLocalVarFormFileName})
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "")
	}
	if r.keyPassphrase != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "keyPassphrase", r.keyPassphrase, "")
	}
	var certificateLocalVarFormFileName string
	var certificateLocalVarFileName     string
	var certificateLocalVarFileBytes    []byte

	certificateLocalVarFormFileName = "certificate"


	certificateLocalVarFile := r.certificate

	if certificateLocalVarFile != nil {
		fbs, _ := io.ReadAll(certificateLocalVarFile)

		certificateLocalVarFileBytes = fbs
		certificateLocalVarFileName = certificateLocalVarFile.Name()
		certificateLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: certificateLocalVarFileBytes, fileName: certificateLocalVarFileName, formFileName: certificateLocalVarFormFileName})
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "")
	}
	var capathLocalVarFormFileName string
	var capathLocalVarFileName     string
	var capathLocalVarFileBytes    []byte

	capathLocalVarFormFileName = "capath"


	capathLocalVarFile := r.capath

	if capathLocalVarFile != nil {
		fbs, _ := io.ReadAll(capathLocalVarFile)

		capathLocalVarFileBytes = fbs
		capathLocalVarFileName = capathLocalVarFile.Name()
		capathLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: capathLocalVarFileBytes, fileName: capathLocalVarFileName, formFileName: capathLocalVarFormFileName})
	}
	var keyStoreLocalVarFormFileName string
	var keyStoreLocalVarFileName     string
	var keyStoreLocalVarFileBytes    []byte

	keyStoreLocalVarFormFileName = "keyStore"


	keyStoreLocalVarFile := r.keyStore

	if keyStoreLocalVarFile != nil {
		fbs, _ := io.ReadAll(keyStoreLocalVarFile)

		keyStoreLocalVarFileBytes = fbs
		keyStoreLocalVarFileName = keyStoreLocalVarFile.Name()
		keyStoreLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: keyStoreLocalVarFileBytes, fileName: keyStoreLocalVarFileName, formFileName: keyStoreLocalVarFormFileName})
	}
	if r.algorithm != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "algorithm", r.algorithm, "")
	}
	if r.storePassphrase != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "storePassphrase", r.storePassphrase, "")
	}
	if r.alias != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "alias", r.alias, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPutSecretGroupKeystoreRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	secretGroupId string
	secretId string
	allowExpiredCert *bool
	expirationDate *string
	key *os.File
	name *string
	keyPassphrase *string
	certificate *os.File
	type_ *string
	capath *os.File
	keyStore *os.File
	algorithm *string
	storePassphrase *string
	alias *string
}

// With &#39;true&#39; to allow uploading expired certificates
func (r DefaultApiPutSecretGroupKeystoreRequest) AllowExpiredCert(allowExpiredCert bool) DefaultApiPutSecretGroupKeystoreRequest {
	r.allowExpiredCert = &allowExpiredCert
	return r
}

// Date on which this secret should expire. If not set, by default, it will be set to notAfter date of the public certificate from this keystore. Once the secret expires, a grant can not be requested for it. 
func (r DefaultApiPutSecretGroupKeystoreRequest) ExpirationDate(expirationDate string) DefaultApiPutSecretGroupKeystoreRequest {
	r.expirationDate = &expirationDate
	return r
}

// The encrypted private key. Required in case of PEM type. 
func (r DefaultApiPutSecretGroupKeystoreRequest) Key(key *os.File) DefaultApiPutSecretGroupKeystoreRequest {
	r.key = key
	return r
}

// The name of this keystore instance. 
func (r DefaultApiPutSecretGroupKeystoreRequest) Name(name string) DefaultApiPutSecretGroupKeystoreRequest {
	r.name = &name
	return r
}

// Passphrase with which private key for a particular alias is protected 
func (r DefaultApiPutSecretGroupKeystoreRequest) KeyPassphrase(keyPassphrase string) DefaultApiPutSecretGroupKeystoreRequest {
	r.keyPassphrase = &keyPassphrase
	return r
}

// The public certificate. Required in the case of PEM type. 
func (r DefaultApiPutSecretGroupKeystoreRequest) Certificate(certificate *os.File) DefaultApiPutSecretGroupKeystoreRequest {
	r.certificate = certificate
	return r
}

func (r DefaultApiPutSecretGroupKeystoreRequest) Type_(type_ string) DefaultApiPutSecretGroupKeystoreRequest {
	r.type_ = &type_
	return r
}

// The concatenated chain of CA certificates, except the leaf, leading up to the root CA. Can only be set in case of PEM type. 
func (r DefaultApiPutSecretGroupKeystoreRequest) Capath(capath *os.File) DefaultApiPutSecretGroupKeystoreRequest {
	r.capath = capath
	return r
}

// File containing one or more certificate entries Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPutSecretGroupKeystoreRequest) KeyStore(keyStore *os.File) DefaultApiPutSecretGroupKeystoreRequest {
	r.keyStore = keyStore
	return r
}

// The algorithm used to initialize KeyManagerFactory Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPutSecretGroupKeystoreRequest) Algorithm(algorithm string) DefaultApiPutSecretGroupKeystoreRequest {
	r.algorithm = &algorithm
	return r
}

// Passphrase with which keystore is protected Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPutSecretGroupKeystoreRequest) StorePassphrase(storePassphrase string) DefaultApiPutSecretGroupKeystoreRequest {
	r.storePassphrase = &storePassphrase
	return r
}

// The alias name of the entry that contains the certificate. Required in case of JKS, JCEKS and PKCS12 types 
func (r DefaultApiPutSecretGroupKeystoreRequest) Alias(alias string) DefaultApiPutSecretGroupKeystoreRequest {
	r.alias = &alias
	return r
}

func (r DefaultApiPutSecretGroupKeystoreRequest) Execute() (*PutSecretGroupKeystore200Response, *http.Response, error) {
	return r.ApiService.PutSecretGroupKeystoreExecute(r)
}

/*
PutSecretGroupKeystore Update a given secret-group keystore

Update keystore details for a given secret-group in a given organization and environment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param secretGroupId The secret group id
 @param secretId The keystore id
 @return DefaultApiPutSecretGroupKeystoreRequest
*/
func (a *DefaultApiService) PutSecretGroupKeystore(ctx context.Context, orgId string, envId string, secretGroupId string, secretId string) DefaultApiPutSecretGroupKeystoreRequest {
	return DefaultApiPutSecretGroupKeystoreRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		secretGroupId: secretGroupId,
		secretId: secretId,
	}
}

// Execute executes the request
//  @return PutSecretGroupKeystore200Response
func (a *DefaultApiService) PutSecretGroupKeystoreExecute(r DefaultApiPutSecretGroupKeystoreRequest) (*PutSecretGroupKeystore200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PutSecretGroupKeystore200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PutSecretGroupKeystore")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/secretGroups/{secretGroupId}/keystores/{secretId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretGroupId"+"}", url.PathEscape(parameterValueToString(r.secretGroupId, "secretGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"secretId"+"}", url.PathEscape(parameterValueToString(r.secretId, "secretId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.allowExpiredCert == nil {
		return localVarReturnValue, nil, reportError("allowExpiredCert is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "allowExpiredCert", r.allowExpiredCert, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.expirationDate != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "expirationDate", r.expirationDate, "")
	}
	var keyLocalVarFormFileName string
	var keyLocalVarFileName     string
	var keyLocalVarFileBytes    []byte

	keyLocalVarFormFileName = "key"


	keyLocalVarFile := r.key

	if keyLocalVarFile != nil {
		fbs, _ := io.ReadAll(keyLocalVarFile)

		keyLocalVarFileBytes = fbs
		keyLocalVarFileName = keyLocalVarFile.Name()
		keyLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: keyLocalVarFileBytes, fileName: keyLocalVarFileName, formFileName: keyLocalVarFormFileName})
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "name", r.name, "")
	}
	if r.keyPassphrase != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "keyPassphrase", r.keyPassphrase, "")
	}
	var certificateLocalVarFormFileName string
	var certificateLocalVarFileName     string
	var certificateLocalVarFileBytes    []byte

	certificateLocalVarFormFileName = "certificate"


	certificateLocalVarFile := r.certificate

	if certificateLocalVarFile != nil {
		fbs, _ := io.ReadAll(certificateLocalVarFile)

		certificateLocalVarFileBytes = fbs
		certificateLocalVarFileName = certificateLocalVarFile.Name()
		certificateLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: certificateLocalVarFileBytes, fileName: certificateLocalVarFileName, formFileName: certificateLocalVarFormFileName})
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "")
	}
	var capathLocalVarFormFileName string
	var capathLocalVarFileName     string
	var capathLocalVarFileBytes    []byte

	capathLocalVarFormFileName = "capath"


	capathLocalVarFile := r.capath

	if capathLocalVarFile != nil {
		fbs, _ := io.ReadAll(capathLocalVarFile)

		capathLocalVarFileBytes = fbs
		capathLocalVarFileName = capathLocalVarFile.Name()
		capathLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: capathLocalVarFileBytes, fileName: capathLocalVarFileName, formFileName: capathLocalVarFormFileName})
	}
	var keyStoreLocalVarFormFileName string
	var keyStoreLocalVarFileName     string
	var keyStoreLocalVarFileBytes    []byte

	keyStoreLocalVarFormFileName = "keyStore"


	keyStoreLocalVarFile := r.keyStore

	if keyStoreLocalVarFile != nil {
		fbs, _ := io.ReadAll(keyStoreLocalVarFile)

		keyStoreLocalVarFileBytes = fbs
		keyStoreLocalVarFileName = keyStoreLocalVarFile.Name()
		keyStoreLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: keyStoreLocalVarFileBytes, fileName: keyStoreLocalVarFileName, formFileName: keyStoreLocalVarFormFileName})
	}
	if r.algorithm != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "algorithm", r.algorithm, "")
	}
	if r.storePassphrase != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "storePassphrase", r.storePassphrase, "")
	}
	if r.alias != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "alias", r.alias, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetSecretGroupKeystoreDetails404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
