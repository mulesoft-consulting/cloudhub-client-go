/*
Secret Group Keystore API

Secret Group Keystore API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package secretgroup_keystore

import (
	"encoding/json"
)

// checks if the Keystore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Keystore{}

// Keystore struct for Keystore
type Keystore struct {
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// File name of the keystore that is stored in this secret
	KeystoreFileName *string `json:"keystoreFileName,omitempty"`
	Meta *Meta `json:"meta,omitempty"`
	Name *string `json:"name,omitempty"`
	// Algorithm used to create the keystore manager factory which will make use of this keystore
	Algorithm *string `json:"algorithm,omitempty"`
	Details *KeystoreDetails `json:"details,omitempty"`
	// Type of keystore supported
	Type *string `json:"type,omitempty"`
	// The alias name of the entry that contains the certificate
	Alias *string `json:"alias,omitempty"`
	// The file name of the certificate file that is stored in this keystore
	CertificateFileName *string `json:"certificateFileName,omitempty"`
	// The file name of the encrypted private key that is stored in this keystore
	KeyFileName *string `json:"keyFileName,omitempty"`
	// The file name of the CA file that is stored in this keystore
	CapathFileName *string `json:"capathFileName,omitempty"`
}

// NewKeystore instantiates a new Keystore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystore() *Keystore {
	this := Keystore{}
	return &this
}

// NewKeystoreWithDefaults instantiates a new Keystore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoreWithDefaults() *Keystore {
	this := Keystore{}
	return &this
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Keystore) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Keystore) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *Keystore) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetKeystoreFileName returns the KeystoreFileName field value if set, zero value otherwise.
func (o *Keystore) GetKeystoreFileName() string {
	if o == nil || IsNil(o.KeystoreFileName) {
		var ret string
		return ret
	}
	return *o.KeystoreFileName
}

// GetKeystoreFileNameOk returns a tuple with the KeystoreFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetKeystoreFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeystoreFileName) {
		return nil, false
	}
	return o.KeystoreFileName, true
}

// HasKeystoreFileName returns a boolean if a field has been set.
func (o *Keystore) HasKeystoreFileName() bool {
	if o != nil && !IsNil(o.KeystoreFileName) {
		return true
	}

	return false
}

// SetKeystoreFileName gets a reference to the given string and assigns it to the KeystoreFileName field.
func (o *Keystore) SetKeystoreFileName(v string) {
	o.KeystoreFileName = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Keystore) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Keystore) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *Keystore) SetMeta(v Meta) {
	o.Meta = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Keystore) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Keystore) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Keystore) SetName(v string) {
	o.Name = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *Keystore) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *Keystore) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *Keystore) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Keystore) GetDetails() KeystoreDetails {
	if o == nil || IsNil(o.Details) {
		var ret KeystoreDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetDetailsOk() (*KeystoreDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Keystore) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given KeystoreDetails and assigns it to the Details field.
func (o *Keystore) SetDetails(v KeystoreDetails) {
	o.Details = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Keystore) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Keystore) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Keystore) SetType(v string) {
	o.Type = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *Keystore) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *Keystore) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *Keystore) SetAlias(v string) {
	o.Alias = &v
}

// GetCertificateFileName returns the CertificateFileName field value if set, zero value otherwise.
func (o *Keystore) GetCertificateFileName() string {
	if o == nil || IsNil(o.CertificateFileName) {
		var ret string
		return ret
	}
	return *o.CertificateFileName
}

// GetCertificateFileNameOk returns a tuple with the CertificateFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetCertificateFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateFileName) {
		return nil, false
	}
	return o.CertificateFileName, true
}

// HasCertificateFileName returns a boolean if a field has been set.
func (o *Keystore) HasCertificateFileName() bool {
	if o != nil && !IsNil(o.CertificateFileName) {
		return true
	}

	return false
}

// SetCertificateFileName gets a reference to the given string and assigns it to the CertificateFileName field.
func (o *Keystore) SetCertificateFileName(v string) {
	o.CertificateFileName = &v
}

// GetKeyFileName returns the KeyFileName field value if set, zero value otherwise.
func (o *Keystore) GetKeyFileName() string {
	if o == nil || IsNil(o.KeyFileName) {
		var ret string
		return ret
	}
	return *o.KeyFileName
}

// GetKeyFileNameOk returns a tuple with the KeyFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetKeyFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeyFileName) {
		return nil, false
	}
	return o.KeyFileName, true
}

// HasKeyFileName returns a boolean if a field has been set.
func (o *Keystore) HasKeyFileName() bool {
	if o != nil && !IsNil(o.KeyFileName) {
		return true
	}

	return false
}

// SetKeyFileName gets a reference to the given string and assigns it to the KeyFileName field.
func (o *Keystore) SetKeyFileName(v string) {
	o.KeyFileName = &v
}

// GetCapathFileName returns the CapathFileName field value if set, zero value otherwise.
func (o *Keystore) GetCapathFileName() string {
	if o == nil || IsNil(o.CapathFileName) {
		var ret string
		return ret
	}
	return *o.CapathFileName
}

// GetCapathFileNameOk returns a tuple with the CapathFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keystore) GetCapathFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.CapathFileName) {
		return nil, false
	}
	return o.CapathFileName, true
}

// HasCapathFileName returns a boolean if a field has been set.
func (o *Keystore) HasCapathFileName() bool {
	if o != nil && !IsNil(o.CapathFileName) {
		return true
	}

	return false
}

// SetCapathFileName gets a reference to the given string and assigns it to the CapathFileName field.
func (o *Keystore) SetCapathFileName(v string) {
	o.CapathFileName = &v
}

func (o Keystore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Keystore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.KeystoreFileName) {
		toSerialize["keystoreFileName"] = o.KeystoreFileName
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.CertificateFileName) {
		toSerialize["certificateFileName"] = o.CertificateFileName
	}
	if !IsNil(o.KeyFileName) {
		toSerialize["keyFileName"] = o.KeyFileName
	}
	if !IsNil(o.CapathFileName) {
		toSerialize["capathFileName"] = o.CapathFileName
	}
	return toSerialize, nil
}

type NullableKeystore struct {
	value *Keystore
	isSet bool
}

func (v NullableKeystore) Get() *Keystore {
	return v.value
}

func (v *NullableKeystore) Set(val *Keystore) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystore) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystore(val *Keystore) *NullableKeystore {
	return &NullableKeystore{value: val, isSet: true}
}

func (v NullableKeystore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


