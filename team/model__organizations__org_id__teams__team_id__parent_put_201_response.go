/*
Team API

Description of the Team API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team

import (
	"encoding/json"
)

// checks if the OrganizationsOrgIdTeamsTeamIdParentPut201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationsOrgIdTeamsTeamIdParentPut201Response{}

// OrganizationsOrgIdTeamsTeamIdParentPut201Response struct for OrganizationsOrgIdTeamsTeamIdParentPut201Response
type OrganizationsOrgIdTeamsTeamIdParentPut201Response struct {
	OrgId *string `json:"org_id,omitempty"`
	TeamId *string `json:"team_id,omitempty"`
	TeamName *string `json:"team_name,omitempty"`
	TeamType *string `json:"team_type,omitempty"`
	AncestorTeamIds []string `json:"ancestor_team_ids,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	PreviousAncestorTeamIds []string `json:"previous_ancestor_team_ids,omitempty"`
}

// NewOrganizationsOrgIdTeamsTeamIdParentPut201Response instantiates a new OrganizationsOrgIdTeamsTeamIdParentPut201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationsOrgIdTeamsTeamIdParentPut201Response() *OrganizationsOrgIdTeamsTeamIdParentPut201Response {
	this := OrganizationsOrgIdTeamsTeamIdParentPut201Response{}
	return &this
}

// NewOrganizationsOrgIdTeamsTeamIdParentPut201ResponseWithDefaults instantiates a new OrganizationsOrgIdTeamsTeamIdParentPut201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationsOrgIdTeamsTeamIdParentPut201ResponseWithDefaults() *OrganizationsOrgIdTeamsTeamIdParentPut201Response {
	this := OrganizationsOrgIdTeamsTeamIdParentPut201Response{}
	return &this
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetOrgId(v string) {
	o.OrgId = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetTeamId() string {
	if o == nil || IsNil(o.TeamId) {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetTeamId(v string) {
	o.TeamId = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetTeamName() string {
	if o == nil || IsNil(o.TeamName) {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetTeamNameOk() (*string, bool) {
	if o == nil || IsNil(o.TeamName) {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasTeamName() bool {
	if o != nil && !IsNil(o.TeamName) {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetTeamName(v string) {
	o.TeamName = &v
}

// GetTeamType returns the TeamType field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetTeamType() string {
	if o == nil || IsNil(o.TeamType) {
		var ret string
		return ret
	}
	return *o.TeamType
}

// GetTeamTypeOk returns a tuple with the TeamType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetTeamTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TeamType) {
		return nil, false
	}
	return o.TeamType, true
}

// HasTeamType returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasTeamType() bool {
	if o != nil && !IsNil(o.TeamType) {
		return true
	}

	return false
}

// SetTeamType gets a reference to the given string and assigns it to the TeamType field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetTeamType(v string) {
	o.TeamType = &v
}

// GetAncestorTeamIds returns the AncestorTeamIds field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetAncestorTeamIds() []string {
	if o == nil || IsNil(o.AncestorTeamIds) {
		var ret []string
		return ret
	}
	return o.AncestorTeamIds
}

// GetAncestorTeamIdsOk returns a tuple with the AncestorTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetAncestorTeamIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AncestorTeamIds) {
		return nil, false
	}
	return o.AncestorTeamIds, true
}

// HasAncestorTeamIds returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasAncestorTeamIds() bool {
	if o != nil && !IsNil(o.AncestorTeamIds) {
		return true
	}

	return false
}

// SetAncestorTeamIds gets a reference to the given []string and assigns it to the AncestorTeamIds field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetAncestorTeamIds(v []string) {
	o.AncestorTeamIds = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetPreviousAncestorTeamIds returns the PreviousAncestorTeamIds field value if set, zero value otherwise.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetPreviousAncestorTeamIds() []string {
	if o == nil || IsNil(o.PreviousAncestorTeamIds) {
		var ret []string
		return ret
	}
	return o.PreviousAncestorTeamIds
}

// GetPreviousAncestorTeamIdsOk returns a tuple with the PreviousAncestorTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) GetPreviousAncestorTeamIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousAncestorTeamIds) {
		return nil, false
	}
	return o.PreviousAncestorTeamIds, true
}

// HasPreviousAncestorTeamIds returns a boolean if a field has been set.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) HasPreviousAncestorTeamIds() bool {
	if o != nil && !IsNil(o.PreviousAncestorTeamIds) {
		return true
	}

	return false
}

// SetPreviousAncestorTeamIds gets a reference to the given []string and assigns it to the PreviousAncestorTeamIds field.
func (o *OrganizationsOrgIdTeamsTeamIdParentPut201Response) SetPreviousAncestorTeamIds(v []string) {
	o.PreviousAncestorTeamIds = v
}

func (o OrganizationsOrgIdTeamsTeamIdParentPut201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationsOrgIdTeamsTeamIdParentPut201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.TeamName) {
		toSerialize["team_name"] = o.TeamName
	}
	if !IsNil(o.TeamType) {
		toSerialize["team_type"] = o.TeamType
	}
	if !IsNil(o.AncestorTeamIds) {
		toSerialize["ancestor_team_ids"] = o.AncestorTeamIds
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.PreviousAncestorTeamIds) {
		toSerialize["previous_ancestor_team_ids"] = o.PreviousAncestorTeamIds
	}
	return toSerialize, nil
}

type NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response struct {
	value *OrganizationsOrgIdTeamsTeamIdParentPut201Response
	isSet bool
}

func (v NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response) Get() *OrganizationsOrgIdTeamsTeamIdParentPut201Response {
	return v.value
}

func (v *NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response) Set(val *OrganizationsOrgIdTeamsTeamIdParentPut201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationsOrgIdTeamsTeamIdParentPut201Response(val *OrganizationsOrgIdTeamsTeamIdParentPut201Response) *NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response {
	return &NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response{value: val, isSet: true}
}

func (v NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationsOrgIdTeamsTeamIdParentPut201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


