/*
Team API

Description of the Team API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team

import (
	"encoding/json"
)

// checks if the TeamPutBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamPutBody{}

// TeamPutBody struct for TeamPutBody
type TeamPutBody struct {
	ParentTeamId *string `json:"parent_team_id,omitempty"`
}

// NewTeamPutBody instantiates a new TeamPutBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamPutBody() *TeamPutBody {
	this := TeamPutBody{}
	return &this
}

// NewTeamPutBodyWithDefaults instantiates a new TeamPutBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamPutBodyWithDefaults() *TeamPutBody {
	this := TeamPutBody{}
	return &this
}

// GetParentTeamId returns the ParentTeamId field value if set, zero value otherwise.
func (o *TeamPutBody) GetParentTeamId() string {
	if o == nil || IsNil(o.ParentTeamId) {
		var ret string
		return ret
	}
	return *o.ParentTeamId
}

// GetParentTeamIdOk returns a tuple with the ParentTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPutBody) GetParentTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentTeamId) {
		return nil, false
	}
	return o.ParentTeamId, true
}

// HasParentTeamId returns a boolean if a field has been set.
func (o *TeamPutBody) HasParentTeamId() bool {
	if o != nil && !IsNil(o.ParentTeamId) {
		return true
	}

	return false
}

// SetParentTeamId gets a reference to the given string and assigns it to the ParentTeamId field.
func (o *TeamPutBody) SetParentTeamId(v string) {
	o.ParentTeamId = &v
}

func (o TeamPutBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamPutBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentTeamId) {
		toSerialize["parent_team_id"] = o.ParentTeamId
	}
	return toSerialize, nil
}

type NullableTeamPutBody struct {
	value *TeamPutBody
	isSet bool
}

func (v NullableTeamPutBody) Get() *TeamPutBody {
	return v.value
}

func (v *NullableTeamPutBody) Set(val *TeamPutBody) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamPutBody) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamPutBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamPutBody(val *TeamPutBody) *NullableTeamPutBody {
	return &NullableTeamPutBody{value: val, isSet: true}
}

func (v NullableTeamPutBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamPutBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


