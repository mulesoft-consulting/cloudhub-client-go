/*
Team API

Description of the Team API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package team

import (
	"encoding/json"
)

// checks if the PreviousTeamState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreviousTeamState{}

// PreviousTeamState struct for PreviousTeamState
type PreviousTeamState struct {
	PreviousAncestorTeamIds []string `json:"previous_ancestor_team_ids,omitempty"`
}

// NewPreviousTeamState instantiates a new PreviousTeamState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreviousTeamState() *PreviousTeamState {
	this := PreviousTeamState{}
	return &this
}

// NewPreviousTeamStateWithDefaults instantiates a new PreviousTeamState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviousTeamStateWithDefaults() *PreviousTeamState {
	this := PreviousTeamState{}
	return &this
}

// GetPreviousAncestorTeamIds returns the PreviousAncestorTeamIds field value if set, zero value otherwise.
func (o *PreviousTeamState) GetPreviousAncestorTeamIds() []string {
	if o == nil || IsNil(o.PreviousAncestorTeamIds) {
		var ret []string
		return ret
	}
	return o.PreviousAncestorTeamIds
}

// GetPreviousAncestorTeamIdsOk returns a tuple with the PreviousAncestorTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviousTeamState) GetPreviousAncestorTeamIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviousAncestorTeamIds) {
		return nil, false
	}
	return o.PreviousAncestorTeamIds, true
}

// HasPreviousAncestorTeamIds returns a boolean if a field has been set.
func (o *PreviousTeamState) HasPreviousAncestorTeamIds() bool {
	if o != nil && !IsNil(o.PreviousAncestorTeamIds) {
		return true
	}

	return false
}

// SetPreviousAncestorTeamIds gets a reference to the given []string and assigns it to the PreviousAncestorTeamIds field.
func (o *PreviousTeamState) SetPreviousAncestorTeamIds(v []string) {
	o.PreviousAncestorTeamIds = v
}

func (o PreviousTeamState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreviousTeamState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PreviousAncestorTeamIds) {
		toSerialize["previous_ancestor_team_ids"] = o.PreviousAncestorTeamIds
	}
	return toSerialize, nil
}

type NullablePreviousTeamState struct {
	value *PreviousTeamState
	isSet bool
}

func (v NullablePreviousTeamState) Get() *PreviousTeamState {
	return v.value
}

func (v *NullablePreviousTeamState) Set(val *PreviousTeamState) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviousTeamState) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviousTeamState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviousTeamState(val *PreviousTeamState) *NullablePreviousTeamState {
	return &NullablePreviousTeamState{value: val, isSet: true}
}

func (v NullablePreviousTeamState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviousTeamState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


