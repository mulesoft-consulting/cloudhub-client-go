/*
API Manager Upstream API

API Manager Upstream API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_upstream

import (
	"encoding/json"
)

// checks if the UpstreamPostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpstreamPostBody{}

// UpstreamPostBody struct for UpstreamPostBody
type UpstreamPostBody struct {
	Label *string `json:"label,omitempty"`
	Uri *string `json:"uri,omitempty"`
	TlsContext NullableUpstreamPostBodyTlsContext `json:"tlsContext,omitempty"`
}

// NewUpstreamPostBody instantiates a new UpstreamPostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpstreamPostBody() *UpstreamPostBody {
	this := UpstreamPostBody{}
	return &this
}

// NewUpstreamPostBodyWithDefaults instantiates a new UpstreamPostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpstreamPostBodyWithDefaults() *UpstreamPostBody {
	this := UpstreamPostBody{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpstreamPostBody) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamPostBody) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpstreamPostBody) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpstreamPostBody) SetLabel(v string) {
	o.Label = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *UpstreamPostBody) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamPostBody) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *UpstreamPostBody) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *UpstreamPostBody) SetUri(v string) {
	o.Uri = &v
}

// GetTlsContext returns the TlsContext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpstreamPostBody) GetTlsContext() UpstreamPostBodyTlsContext {
	if o == nil || IsNil(o.TlsContext.Get()) {
		var ret UpstreamPostBodyTlsContext
		return ret
	}
	return *o.TlsContext.Get()
}

// GetTlsContextOk returns a tuple with the TlsContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpstreamPostBody) GetTlsContextOk() (*UpstreamPostBodyTlsContext, bool) {
	if o == nil {
		return nil, false
	}
	return o.TlsContext.Get(), o.TlsContext.IsSet()
}

// HasTlsContext returns a boolean if a field has been set.
func (o *UpstreamPostBody) HasTlsContext() bool {
	if o != nil && o.TlsContext.IsSet() {
		return true
	}

	return false
}

// SetTlsContext gets a reference to the given NullableUpstreamPostBodyTlsContext and assigns it to the TlsContext field.
func (o *UpstreamPostBody) SetTlsContext(v UpstreamPostBodyTlsContext) {
	o.TlsContext.Set(&v)
}
// SetTlsContextNil sets the value for TlsContext to be an explicit nil
func (o *UpstreamPostBody) SetTlsContextNil() {
	o.TlsContext.Set(nil)
}

// UnsetTlsContext ensures that no value is present for TlsContext, not even an explicit nil
func (o *UpstreamPostBody) UnsetTlsContext() {
	o.TlsContext.Unset()
}

func (o UpstreamPostBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpstreamPostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if o.TlsContext.IsSet() {
		toSerialize["tlsContext"] = o.TlsContext.Get()
	}
	return toSerialize, nil
}

type NullableUpstreamPostBody struct {
	value *UpstreamPostBody
	isSet bool
}

func (v NullableUpstreamPostBody) Get() *UpstreamPostBody {
	return v.value
}

func (v *NullableUpstreamPostBody) Set(val *UpstreamPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpstreamPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpstreamPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpstreamPostBody(val *UpstreamPostBody) *NullableUpstreamPostBody {
	return &NullableUpstreamPostBody{value: val, isSet: true}
}

func (v NullableUpstreamPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpstreamPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


