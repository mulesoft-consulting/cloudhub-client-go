/*
API Manager Upstream API

API Manager Upstream API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_upstream

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiDeleteApimInstanceUpstreamRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamId string
}

func (r DefaultApiDeleteApimInstanceUpstreamRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteApimInstanceUpstreamExecute(r)
}

/*
DeleteApimInstanceUpstream Delete a specific Upstream of the given API Manager Instance

Delete a specific Upstream in a API Manager Instance  in a specific environment and organization. Connected Apps require the scope "Manage APIs Configuration".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api id specific to a given environment
 @param upstreamId The upstream id
 @return DefaultApiDeleteApimInstanceUpstreamRequest
*/
func (a *DefaultApiService) DeleteApimInstanceUpstream(ctx context.Context, orgId string, envId string, envApiId string, upstreamId string) DefaultApiDeleteApimInstanceUpstreamRequest {
	return DefaultApiDeleteApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
		upstreamId: upstreamId,
	}
}

// Execute executes the request
func (a *DefaultApiService) DeleteApimInstanceUpstreamExecute(r DefaultApiDeleteApimInstanceUpstreamRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteApimInstanceUpstream")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams/{upstreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upstreamId"+"}", url.PathEscape(parameterValueToString(r.upstreamId, "upstreamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetApimInstanceUpstreams404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiGetApimInstanceUpstreamRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamId string
}

func (r DefaultApiGetApimInstanceUpstreamRequest) Execute() (*UpstreamDetails, *http.Response, error) {
	return r.ApiService.GetApimInstanceUpstreamExecute(r)
}

/*
GetApimInstanceUpstream Retrieve a specific upstream for a given API Manager instance

Retrieve a specific upstream for a given API Manager instance in a given environment. Connected App requires the scope "View APIs Configuration"

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api id specific to a given environment
 @param upstreamId The upstream id
 @return DefaultApiGetApimInstanceUpstreamRequest
*/
func (a *DefaultApiService) GetApimInstanceUpstream(ctx context.Context, orgId string, envId string, envApiId string, upstreamId string) DefaultApiGetApimInstanceUpstreamRequest {
	return DefaultApiGetApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
		upstreamId: upstreamId,
	}
}

// Execute executes the request
//  @return UpstreamDetails
func (a *DefaultApiService) GetApimInstanceUpstreamExecute(r DefaultApiGetApimInstanceUpstreamRequest) (*UpstreamDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimInstanceUpstream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams/{upstreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upstreamId"+"}", url.PathEscape(parameterValueToString(r.upstreamId, "upstreamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetApimInstanceUpstreams404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiGetApimInstanceUpstreamsRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
}

func (r DefaultApiGetApimInstanceUpstreamsRequest) Execute() (*UpstreamCollection, *http.Response, error) {
	return r.ApiService.GetApimInstanceUpstreamsExecute(r)
}

/*
GetApimInstanceUpstreams Retrieve all upstreams of a given API Manager instance

Retrieves all upstreams for a given API Manager instance in a given environment. Connected App requires the scope "View APIs Configuration"

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api id specific to a given environment
 @return DefaultApiGetApimInstanceUpstreamsRequest
*/
func (a *DefaultApiService) GetApimInstanceUpstreams(ctx context.Context, orgId string, envId string, envApiId string) DefaultApiGetApimInstanceUpstreamsRequest {
	return DefaultApiGetApimInstanceUpstreamsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

// Execute executes the request
//  @return UpstreamCollection
func (a *DefaultApiService) GetApimInstanceUpstreamsExecute(r DefaultApiGetApimInstanceUpstreamsRequest) (*UpstreamCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimInstanceUpstreams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetApimInstanceUpstreams404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPatchApimInstanceUpstreamRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamId string
	upstreamPatchBody *UpstreamPatchBody
}

// Patch API Manager Instance Upstream Body
func (r DefaultApiPatchApimInstanceUpstreamRequest) UpstreamPatchBody(upstreamPatchBody UpstreamPatchBody) DefaultApiPatchApimInstanceUpstreamRequest {
	r.upstreamPatchBody = &upstreamPatchBody
	return r
}

func (r DefaultApiPatchApimInstanceUpstreamRequest) Execute() (*Upstream, *http.Response, error) {
	return r.ApiService.PatchApimInstanceUpstreamExecute(r)
}

/*
PatchApimInstanceUpstream Update a specific upstream in a given API Manager instance

Update a specific upstream in a given API Manager instance in a given environment. Connected App requires the scope "Manage APIs Configuration"

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api id specific to a given environment
 @param upstreamId The upstream id
 @return DefaultApiPatchApimInstanceUpstreamRequest
*/
func (a *DefaultApiService) PatchApimInstanceUpstream(ctx context.Context, orgId string, envId string, envApiId string, upstreamId string) DefaultApiPatchApimInstanceUpstreamRequest {
	return DefaultApiPatchApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
		upstreamId: upstreamId,
	}
}

// Execute executes the request
//  @return Upstream
func (a *DefaultApiService) PatchApimInstanceUpstreamExecute(r DefaultApiPatchApimInstanceUpstreamRequest) (*Upstream, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Upstream
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchApimInstanceUpstream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams/{upstreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upstreamId"+"}", url.PathEscape(parameterValueToString(r.upstreamId, "upstreamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPatchBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiPostApimInstanceUpstreamRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamPostBody *UpstreamPostBody
}

// Post API Manager Instance Upstream Body
func (r DefaultApiPostApimInstanceUpstreamRequest) UpstreamPostBody(upstreamPostBody UpstreamPostBody) DefaultApiPostApimInstanceUpstreamRequest {
	r.upstreamPostBody = &upstreamPostBody
	return r
}

func (r DefaultApiPostApimInstanceUpstreamRequest) Execute() (*UpstreamDetails, *http.Response, error) {
	return r.ApiService.PostApimInstanceUpstreamExecute(r)
}

/*
PostApimInstanceUpstream Creates an upstream for a given API Manager instance

Creates an upstream for a given API Manager instance in a given environment. Connected App requires the scope "Manage APIs Configuration"

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The organization Id
 @param envId The environment id
 @param envApiId The api id specific to a given environment
 @return DefaultApiPostApimInstanceUpstreamRequest
*/
func (a *DefaultApiService) PostApimInstanceUpstream(ctx context.Context, orgId string, envId string, envApiId string) DefaultApiPostApimInstanceUpstreamRequest {
	return DefaultApiPostApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

// Execute executes the request
//  @return UpstreamDetails
func (a *DefaultApiService) PostApimInstanceUpstreamExecute(r DefaultApiPostApimInstanceUpstreamRequest) (*UpstreamDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpstreamDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostApimInstanceUpstream")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", url.PathEscape(parameterValueToString(r.envApiId, "envApiId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
